#pragma warning( disable: 4049 )  

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif 

#ifndef __mscorlib_h__
#define __mscorlib_h__
#endif

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

#ifndef __ICloneable_FWD_DEFINED__
#define __ICloneable_FWD_DEFINED__
typedef interface ICloneable ICloneable;

#endif 	

#ifndef __IEnumerable_FWD_DEFINED__
#define __IEnumerable_FWD_DEFINED__
typedef interface IEnumerable IEnumerable;

#endif 	

#ifndef __ICollection_FWD_DEFINED__
#define __ICollection_FWD_DEFINED__
typedef interface ICollection ICollection;

#endif 	

#ifndef __IList_FWD_DEFINED__
#define __IList_FWD_DEFINED__
typedef interface IList IList;

#endif 	

#ifndef __IEnumerator_FWD_DEFINED__
#define __IEnumerator_FWD_DEFINED__
typedef interface IEnumerator IEnumerator;

#endif 	

#ifndef __IDisposable_FWD_DEFINED__
#define __IDisposable_FWD_DEFINED__
typedef interface IDisposable IDisposable;

#endif 	

#ifndef __IComparable_FWD_DEFINED__
#define __IComparable_FWD_DEFINED__
typedef interface IComparable IComparable;

#endif 	

#ifndef __IFormattable_FWD_DEFINED__
#define __IFormattable_FWD_DEFINED__
typedef interface IFormattable IFormattable;

#endif 	

#ifndef __IConvertible_FWD_DEFINED__
#define __IConvertible_FWD_DEFINED__
typedef interface IConvertible IConvertible;

#endif 	

#ifndef __IComparer_FWD_DEFINED__
#define __IComparer_FWD_DEFINED__
typedef interface IComparer IComparer;

#endif 	

#ifndef __IEqualityComparer_FWD_DEFINED__
#define __IEqualityComparer_FWD_DEFINED__
typedef interface IEqualityComparer IEqualityComparer;

#endif 	

#ifndef __ISerializable_FWD_DEFINED__
#define __ISerializable_FWD_DEFINED__
typedef interface ISerializable ISerializable;

#endif 	

#ifndef ___Exception_FWD_DEFINED__
#define ___Exception_FWD_DEFINED__
typedef interface _Exception _Exception;

#endif 	

#ifndef ___Activator_FWD_DEFINED__
#define ___Activator_FWD_DEFINED__
typedef interface _Activator _Activator;

#endif 	

#ifndef ___AppDomain_FWD_DEFINED__
#define ___AppDomain_FWD_DEFINED__
typedef interface _AppDomain _AppDomain;

#endif 	

#ifndef __IEvidenceFactory_FWD_DEFINED__
#define __IEvidenceFactory_FWD_DEFINED__
typedef interface IEvidenceFactory IEvidenceFactory;

#endif 	

#ifndef __IAppDomainSetup_FWD_DEFINED__
#define __IAppDomainSetup_FWD_DEFINED__
typedef interface IAppDomainSetup IAppDomainSetup;

#endif 	

#ifndef ___Attribute_FWD_DEFINED__
#define ___Attribute_FWD_DEFINED__
typedef interface _Attribute _Attribute;

#endif 	

#ifndef ___Thread_FWD_DEFINED__
#define ___Thread_FWD_DEFINED__
typedef interface _Thread _Thread;

#endif 	

#ifndef __IObjectReference_FWD_DEFINED__
#define __IObjectReference_FWD_DEFINED__
typedef interface IObjectReference IObjectReference;

#endif 	

#ifndef __IAsyncResult_FWD_DEFINED__
#define __IAsyncResult_FWD_DEFINED__
typedef interface IAsyncResult IAsyncResult;

#endif 	

#ifndef __ICustomFormatter_FWD_DEFINED__
#define __ICustomFormatter_FWD_DEFINED__
typedef interface ICustomFormatter ICustomFormatter;

#endif 	

#ifndef __IFormatProvider_FWD_DEFINED__
#define __IFormatProvider_FWD_DEFINED__
typedef interface IFormatProvider IFormatProvider;

#endif 	

#ifndef __ICustomAttributeProvider_FWD_DEFINED__
#define __ICustomAttributeProvider_FWD_DEFINED__
typedef interface ICustomAttributeProvider ICustomAttributeProvider;

#endif 	

#ifndef ___MemberInfo_FWD_DEFINED__
#define ___MemberInfo_FWD_DEFINED__
typedef interface _MemberInfo _MemberInfo;

#endif 	

#ifndef ___Type_FWD_DEFINED__
#define ___Type_FWD_DEFINED__
typedef interface _Type _Type;

#endif 	

#ifndef __IReflect_FWD_DEFINED__
#define __IReflect_FWD_DEFINED__
typedef interface IReflect IReflect;

#endif 	

#ifndef __IObjectHandle_FWD_DEFINED__
#define __IObjectHandle_FWD_DEFINED__
typedef interface IObjectHandle IObjectHandle;

#endif 	

#ifndef __IHashCodeProvider_FWD_DEFINED__
#define __IHashCodeProvider_FWD_DEFINED__
typedef interface IHashCodeProvider IHashCodeProvider;

#endif 	

#ifndef __IDictionary_FWD_DEFINED__
#define __IDictionary_FWD_DEFINED__
typedef interface IDictionary IDictionary;

#endif 	

#ifndef __IDictionaryEnumerator_FWD_DEFINED__
#define __IDictionaryEnumerator_FWD_DEFINED__
typedef interface IDictionaryEnumerator IDictionaryEnumerator;

#endif 	

#ifndef __IDeserializationCallback_FWD_DEFINED__
#define __IDeserializationCallback_FWD_DEFINED__
typedef interface IDeserializationCallback IDeserializationCallback;

#endif 	

#ifndef __ISymbolBinder_FWD_DEFINED__
#define __ISymbolBinder_FWD_DEFINED__
typedef interface ISymbolBinder ISymbolBinder;

#endif 	

#ifndef __ISymbolBinder1_FWD_DEFINED__
#define __ISymbolBinder1_FWD_DEFINED__
typedef interface ISymbolBinder1 ISymbolBinder1;

#endif 	

#ifndef __ISymbolDocument_FWD_DEFINED__
#define __ISymbolDocument_FWD_DEFINED__
typedef interface ISymbolDocument ISymbolDocument;

#endif 	

#ifndef __ISymbolDocumentWriter_FWD_DEFINED__
#define __ISymbolDocumentWriter_FWD_DEFINED__
typedef interface ISymbolDocumentWriter ISymbolDocumentWriter;

#endif 	

#ifndef __ISymbolMethod_FWD_DEFINED__
#define __ISymbolMethod_FWD_DEFINED__
typedef interface ISymbolMethod ISymbolMethod;

#endif 	

#ifndef __ISymbolNamespace_FWD_DEFINED__
#define __ISymbolNamespace_FWD_DEFINED__
typedef interface ISymbolNamespace ISymbolNamespace;

#endif 	

#ifndef __ISymbolReader_FWD_DEFINED__
#define __ISymbolReader_FWD_DEFINED__
typedef interface ISymbolReader ISymbolReader;

#endif 	

#ifndef __ISymbolScope_FWD_DEFINED__
#define __ISymbolScope_FWD_DEFINED__
typedef interface ISymbolScope ISymbolScope;

#endif 	

#ifndef __ISymbolVariable_FWD_DEFINED__
#define __ISymbolVariable_FWD_DEFINED__
typedef interface ISymbolVariable ISymbolVariable;

#endif 	

#ifndef __ISymbolWriter_FWD_DEFINED__
#define __ISymbolWriter_FWD_DEFINED__
typedef interface ISymbolWriter ISymbolWriter;

#endif 	

#ifndef ___Assembly_FWD_DEFINED__
#define ___Assembly_FWD_DEFINED__
typedef interface _Assembly _Assembly;

#endif 	

#ifndef ___AssemblyName_FWD_DEFINED__
#define ___AssemblyName_FWD_DEFINED__
typedef interface _AssemblyName _AssemblyName;

#endif 	

#ifndef ___MethodBase_FWD_DEFINED__
#define ___MethodBase_FWD_DEFINED__
typedef interface _MethodBase _MethodBase;

#endif 	

#ifndef ___MethodInfo_FWD_DEFINED__
#define ___MethodInfo_FWD_DEFINED__
typedef interface _MethodInfo _MethodInfo;

#endif 	

#ifndef ___ConstructorInfo_FWD_DEFINED__
#define ___ConstructorInfo_FWD_DEFINED__
typedef interface _ConstructorInfo _ConstructorInfo;

#endif 	

#ifndef ___FieldInfo_FWD_DEFINED__
#define ___FieldInfo_FWD_DEFINED__
typedef interface _FieldInfo _FieldInfo;

#endif 	

#ifndef ___PropertyInfo_FWD_DEFINED__
#define ___PropertyInfo_FWD_DEFINED__
typedef interface _PropertyInfo _PropertyInfo;

#endif 	

#ifndef ___EventInfo_FWD_DEFINED__
#define ___EventInfo_FWD_DEFINED__
typedef interface _EventInfo _EventInfo;

#endif 	

#ifndef ___ParameterInfo_FWD_DEFINED__
#define ___ParameterInfo_FWD_DEFINED__
typedef interface _ParameterInfo _ParameterInfo;

#endif 	

#ifndef ___Module_FWD_DEFINED__
#define ___Module_FWD_DEFINED__
typedef interface _Module _Module;

#endif 	

#ifndef __IFormatter_FWD_DEFINED__
#define __IFormatter_FWD_DEFINED__
typedef interface IFormatter IFormatter;

#endif 	

#ifndef __IFormatterConverter_FWD_DEFINED__
#define __IFormatterConverter_FWD_DEFINED__
typedef interface IFormatterConverter IFormatterConverter;

#endif 	

#ifndef __ISerializationSurrogate_FWD_DEFINED__
#define __ISerializationSurrogate_FWD_DEFINED__
typedef interface ISerializationSurrogate ISerializationSurrogate;

#endif 	

#ifndef __ISurrogateSelector_FWD_DEFINED__
#define __ISurrogateSelector_FWD_DEFINED__
typedef interface ISurrogateSelector ISurrogateSelector;

#endif 	

#ifndef __IResourceReader_FWD_DEFINED__
#define __IResourceReader_FWD_DEFINED__
typedef interface IResourceReader IResourceReader;

#endif 	

#ifndef __IResourceWriter_FWD_DEFINED__
#define __IResourceWriter_FWD_DEFINED__
typedef interface IResourceWriter IResourceWriter;

#endif 	

#ifndef __ISecurityEncodable_FWD_DEFINED__
#define __ISecurityEncodable_FWD_DEFINED__
typedef interface ISecurityEncodable ISecurityEncodable;

#endif 	

#ifndef __ISecurityPolicyEncodable_FWD_DEFINED__
#define __ISecurityPolicyEncodable_FWD_DEFINED__
typedef interface ISecurityPolicyEncodable ISecurityPolicyEncodable;

#endif 	

#ifndef __IMembershipCondition_FWD_DEFINED__
#define __IMembershipCondition_FWD_DEFINED__
typedef interface IMembershipCondition IMembershipCondition;

#endif 	

#ifndef __IIdentityPermissionFactory_FWD_DEFINED__
#define __IIdentityPermissionFactory_FWD_DEFINED__
typedef interface IIdentityPermissionFactory IIdentityPermissionFactory;

#endif 	

#ifndef __IApplicationTrustManager_FWD_DEFINED__
#define __IApplicationTrustManager_FWD_DEFINED__
typedef interface IApplicationTrustManager IApplicationTrustManager;

#endif 	

#ifndef __IIdentity_FWD_DEFINED__
#define __IIdentity_FWD_DEFINED__
typedef interface IIdentity IIdentity;

#endif 	

#ifndef __IPrincipal_FWD_DEFINED__
#define __IPrincipal_FWD_DEFINED__
typedef interface IPrincipal IPrincipal;

#endif 	

#ifndef __ICustomMarshaler_FWD_DEFINED__
#define __ICustomMarshaler_FWD_DEFINED__
typedef interface ICustomMarshaler ICustomMarshaler;

#endif 	

#ifndef __ITypeLibImporterNotifySink_FWD_DEFINED__
#define __ITypeLibImporterNotifySink_FWD_DEFINED__
typedef interface ITypeLibImporterNotifySink ITypeLibImporterNotifySink;

#endif 	

#ifndef __ICustomAdapter_FWD_DEFINED__
#define __ICustomAdapter_FWD_DEFINED__
typedef interface ICustomAdapter ICustomAdapter;

#endif 	

#ifndef __ICustomFactory_FWD_DEFINED__
#define __ICustomFactory_FWD_DEFINED__
typedef interface ICustomFactory ICustomFactory;

#endif 	

#ifndef __IRegistrationServices_FWD_DEFINED__
#define __IRegistrationServices_FWD_DEFINED__
typedef interface IRegistrationServices IRegistrationServices;

#endif 	

#ifndef __ITypeLibExporterNotifySink_FWD_DEFINED__
#define __ITypeLibExporterNotifySink_FWD_DEFINED__
typedef interface ITypeLibExporterNotifySink ITypeLibExporterNotifySink;

#endif 	

#ifndef __ITypeLibConverter_FWD_DEFINED__
#define __ITypeLibConverter_FWD_DEFINED__
typedef interface ITypeLibConverter ITypeLibConverter;

#endif 	

#ifndef __ITypeLibExporterNameProvider_FWD_DEFINED__
#define __ITypeLibExporterNameProvider_FWD_DEFINED__
typedef interface ITypeLibExporterNameProvider ITypeLibExporterNameProvider;

#endif 	

#ifndef __IExpando_FWD_DEFINED__
#define __IExpando_FWD_DEFINED__
typedef interface IExpando IExpando;

#endif 	

#ifndef __IPermission_FWD_DEFINED__
#define __IPermission_FWD_DEFINED__
typedef interface IPermission IPermission;

#endif 	

#ifndef __IStackWalk_FWD_DEFINED__
#define __IStackWalk_FWD_DEFINED__
typedef interface IStackWalk IStackWalk;

#endif 	

#ifndef __IUnrestrictedPermission_FWD_DEFINED__
#define __IUnrestrictedPermission_FWD_DEFINED__
typedef interface IUnrestrictedPermission IUnrestrictedPermission;

#endif 	

#ifndef __IContextAttribute_FWD_DEFINED__
#define __IContextAttribute_FWD_DEFINED__
typedef interface IContextAttribute IContextAttribute;

#endif 	

#ifndef __IContextProperty_FWD_DEFINED__
#define __IContextProperty_FWD_DEFINED__
typedef interface IContextProperty IContextProperty;

#endif 	

#ifndef __IActivator_FWD_DEFINED__
#define __IActivator_FWD_DEFINED__
typedef interface IActivator IActivator;

#endif 	

#ifndef __IMessageSink_FWD_DEFINED__
#define __IMessageSink_FWD_DEFINED__
typedef interface IMessageSink IMessageSink;

#endif 	

#ifndef __ILogicalThreadAffinative_FWD_DEFINED__
#define __ILogicalThreadAffinative_FWD_DEFINED__
typedef interface ILogicalThreadAffinative ILogicalThreadAffinative;

#endif 	

#ifndef __IClientResponseChannelSinkStack_FWD_DEFINED__
#define __IClientResponseChannelSinkStack_FWD_DEFINED__
typedef interface IClientResponseChannelSinkStack IClientResponseChannelSinkStack;

#endif 	

#ifndef __IClientChannelSinkStack_FWD_DEFINED__
#define __IClientChannelSinkStack_FWD_DEFINED__
typedef interface IClientChannelSinkStack IClientChannelSinkStack;

#endif 	

#ifndef __IServerResponseChannelSinkStack_FWD_DEFINED__
#define __IServerResponseChannelSinkStack_FWD_DEFINED__
typedef interface IServerResponseChannelSinkStack IServerResponseChannelSinkStack;

#endif 	

#ifndef __IServerChannelSinkStack_FWD_DEFINED__
#define __IServerChannelSinkStack_FWD_DEFINED__
typedef interface IServerChannelSinkStack IServerChannelSinkStack;

#endif 	

#ifndef __ISponsor_FWD_DEFINED__
#define __ISponsor_FWD_DEFINED__
typedef interface ISponsor ISponsor;

#endif 	

#ifndef __IContextPropertyActivator_FWD_DEFINED__
#define __IContextPropertyActivator_FWD_DEFINED__
typedef interface IContextPropertyActivator IContextPropertyActivator;

#endif 	

#ifndef __IChannel_FWD_DEFINED__
#define __IChannel_FWD_DEFINED__
typedef interface IChannel IChannel;

#endif 	

#ifndef __IChannelSender_FWD_DEFINED__
#define __IChannelSender_FWD_DEFINED__
typedef interface IChannelSender IChannelSender;

#endif 	

#ifndef __IChannelReceiver_FWD_DEFINED__
#define __IChannelReceiver_FWD_DEFINED__
typedef interface IChannelReceiver IChannelReceiver;

#endif 	

#ifndef __IServerChannelSinkProvider_FWD_DEFINED__
#define __IServerChannelSinkProvider_FWD_DEFINED__
typedef interface IServerChannelSinkProvider IServerChannelSinkProvider;

#endif 	

#ifndef __IChannelSinkBase_FWD_DEFINED__
#define __IChannelSinkBase_FWD_DEFINED__
typedef interface IChannelSinkBase IChannelSinkBase;

#endif 	

#ifndef __IServerChannelSink_FWD_DEFINED__
#define __IServerChannelSink_FWD_DEFINED__
typedef interface IServerChannelSink IServerChannelSink;

#endif 	

#ifndef __IMessage_FWD_DEFINED__
#define __IMessage_FWD_DEFINED__
typedef interface IMessage IMessage;

#endif 	

#ifndef __IMethodMessage_FWD_DEFINED__
#define __IMethodMessage_FWD_DEFINED__
typedef interface IMethodMessage IMethodMessage;

#endif 	

#ifndef __IMethodCallMessage_FWD_DEFINED__
#define __IMethodCallMessage_FWD_DEFINED__
typedef interface IMethodCallMessage IMethodCallMessage;

#endif 	

#ifndef __IConstructionCallMessage_FWD_DEFINED__
#define __IConstructionCallMessage_FWD_DEFINED__
typedef interface IConstructionCallMessage IConstructionCallMessage;

#endif 	

#ifndef __IMethodReturnMessage_FWD_DEFINED__
#define __IMethodReturnMessage_FWD_DEFINED__
typedef interface IMethodReturnMessage IMethodReturnMessage;

#endif 	

#ifndef __IConstructionReturnMessage_FWD_DEFINED__
#define __IConstructionReturnMessage_FWD_DEFINED__
typedef interface IConstructionReturnMessage IConstructionReturnMessage;

#endif 	

#ifndef __IChannelReceiverHook_FWD_DEFINED__
#define __IChannelReceiverHook_FWD_DEFINED__
typedef interface IChannelReceiverHook IChannelReceiverHook;

#endif 	

#ifndef __IClientChannelSinkProvider_FWD_DEFINED__
#define __IClientChannelSinkProvider_FWD_DEFINED__
typedef interface IClientChannelSinkProvider IClientChannelSinkProvider;

#endif 	

#ifndef __IClientFormatterSinkProvider_FWD_DEFINED__
#define __IClientFormatterSinkProvider_FWD_DEFINED__
typedef interface IClientFormatterSinkProvider IClientFormatterSinkProvider;

#endif 	

#ifndef __IServerFormatterSinkProvider_FWD_DEFINED__
#define __IServerFormatterSinkProvider_FWD_DEFINED__
typedef interface IServerFormatterSinkProvider IServerFormatterSinkProvider;

#endif 	

#ifndef __IClientChannelSink_FWD_DEFINED__
#define __IClientChannelSink_FWD_DEFINED__
typedef interface IClientChannelSink IClientChannelSink;

#endif 	

#ifndef __IClientFormatterSink_FWD_DEFINED__
#define __IClientFormatterSink_FWD_DEFINED__
typedef interface IClientFormatterSink IClientFormatterSink;

#endif 	

#ifndef __IChannelDataStore_FWD_DEFINED__
#define __IChannelDataStore_FWD_DEFINED__
typedef interface IChannelDataStore IChannelDataStore;

#endif 	

#ifndef __ITransportHeaders_FWD_DEFINED__
#define __ITransportHeaders_FWD_DEFINED__
typedef interface ITransportHeaders ITransportHeaders;

#endif 	

#ifndef __IContributeClientContextSink_FWD_DEFINED__
#define __IContributeClientContextSink_FWD_DEFINED__
typedef interface IContributeClientContextSink IContributeClientContextSink;

#endif 	

#ifndef __IContributeDynamicSink_FWD_DEFINED__
#define __IContributeDynamicSink_FWD_DEFINED__
typedef interface IContributeDynamicSink IContributeDynamicSink;

#endif 	

#ifndef __IContributeEnvoySink_FWD_DEFINED__
#define __IContributeEnvoySink_FWD_DEFINED__
typedef interface IContributeEnvoySink IContributeEnvoySink;

#endif 	

#ifndef __IContributeObjectSink_FWD_DEFINED__
#define __IContributeObjectSink_FWD_DEFINED__
typedef interface IContributeObjectSink IContributeObjectSink;

#endif 	

#ifndef __IContributeServerContextSink_FWD_DEFINED__
#define __IContributeServerContextSink_FWD_DEFINED__
typedef interface IContributeServerContextSink IContributeServerContextSink;

#endif 	

#ifndef __IDynamicProperty_FWD_DEFINED__
#define __IDynamicProperty_FWD_DEFINED__
typedef interface IDynamicProperty IDynamicProperty;

#endif 	

#ifndef __IDynamicMessageSink_FWD_DEFINED__
#define __IDynamicMessageSink_FWD_DEFINED__
typedef interface IDynamicMessageSink IDynamicMessageSink;

#endif 	

#ifndef __ILease_FWD_DEFINED__
#define __ILease_FWD_DEFINED__
typedef interface ILease ILease;

#endif 	

#ifndef __IMessageCtrl_FWD_DEFINED__
#define __IMessageCtrl_FWD_DEFINED__
typedef interface IMessageCtrl IMessageCtrl;

#endif 	

#ifndef __IRemotingFormatter_FWD_DEFINED__
#define __IRemotingFormatter_FWD_DEFINED__
typedef interface IRemotingFormatter IRemotingFormatter;

#endif 	

#ifndef __IFieldInfo_FWD_DEFINED__
#define __IFieldInfo_FWD_DEFINED__
typedef interface IFieldInfo IFieldInfo;

#endif 	

#ifndef __IRemotingTypeInfo_FWD_DEFINED__
#define __IRemotingTypeInfo_FWD_DEFINED__
typedef interface IRemotingTypeInfo IRemotingTypeInfo;

#endif 	

#ifndef __IChannelInfo_FWD_DEFINED__
#define __IChannelInfo_FWD_DEFINED__
typedef interface IChannelInfo IChannelInfo;

#endif 	

#ifndef __IEnvoyInfo_FWD_DEFINED__
#define __IEnvoyInfo_FWD_DEFINED__
typedef interface IEnvoyInfo IEnvoyInfo;

#endif 	

#ifndef __ISoapXsd_FWD_DEFINED__
#define __ISoapXsd_FWD_DEFINED__
typedef interface ISoapXsd ISoapXsd;

#endif 	

#ifndef __ITrackingHandler_FWD_DEFINED__
#define __ITrackingHandler_FWD_DEFINED__
typedef interface ITrackingHandler ITrackingHandler;

#endif 	

#ifndef __INormalizeForIsolatedStorage_FWD_DEFINED__
#define __INormalizeForIsolatedStorage_FWD_DEFINED__
typedef interface INormalizeForIsolatedStorage INormalizeForIsolatedStorage;

#endif 	

#ifndef __ISoapMessage_FWD_DEFINED__
#define __ISoapMessage_FWD_DEFINED__
typedef interface ISoapMessage ISoapMessage;

#endif 	

#ifndef ___AssemblyBuilder_FWD_DEFINED__
#define ___AssemblyBuilder_FWD_DEFINED__
typedef interface _AssemblyBuilder _AssemblyBuilder;

#endif 	

#ifndef ___ConstructorBuilder_FWD_DEFINED__
#define ___ConstructorBuilder_FWD_DEFINED__
typedef interface _ConstructorBuilder _ConstructorBuilder;

#endif 	

#ifndef ___CustomAttributeBuilder_FWD_DEFINED__
#define ___CustomAttributeBuilder_FWD_DEFINED__
typedef interface _CustomAttributeBuilder _CustomAttributeBuilder;

#endif 	

#ifndef ___EnumBuilder_FWD_DEFINED__
#define ___EnumBuilder_FWD_DEFINED__
typedef interface _EnumBuilder _EnumBuilder;

#endif 	

#ifndef ___EventBuilder_FWD_DEFINED__
#define ___EventBuilder_FWD_DEFINED__
typedef interface _EventBuilder _EventBuilder;

#endif 	

#ifndef ___FieldBuilder_FWD_DEFINED__
#define ___FieldBuilder_FWD_DEFINED__
typedef interface _FieldBuilder _FieldBuilder;

#endif 	

#ifndef ___ILGenerator_FWD_DEFINED__
#define ___ILGenerator_FWD_DEFINED__
typedef interface _ILGenerator _ILGenerator;

#endif 	

#ifndef ___LocalBuilder_FWD_DEFINED__
#define ___LocalBuilder_FWD_DEFINED__
typedef interface _LocalBuilder _LocalBuilder;

#endif 	

#ifndef ___MethodBuilder_FWD_DEFINED__
#define ___MethodBuilder_FWD_DEFINED__
typedef interface _MethodBuilder _MethodBuilder;

#endif 	

#ifndef ___MethodRental_FWD_DEFINED__
#define ___MethodRental_FWD_DEFINED__
typedef interface _MethodRental _MethodRental;

#endif 	

#ifndef ___ModuleBuilder_FWD_DEFINED__
#define ___ModuleBuilder_FWD_DEFINED__
typedef interface _ModuleBuilder _ModuleBuilder;

#endif 	

#ifndef ___ParameterBuilder_FWD_DEFINED__
#define ___ParameterBuilder_FWD_DEFINED__
typedef interface _ParameterBuilder _ParameterBuilder;

#endif 	

#ifndef ___PropertyBuilder_FWD_DEFINED__
#define ___PropertyBuilder_FWD_DEFINED__
typedef interface _PropertyBuilder _PropertyBuilder;

#endif 	

#ifndef ___SignatureHelper_FWD_DEFINED__
#define ___SignatureHelper_FWD_DEFINED__
typedef interface _SignatureHelper _SignatureHelper;

#endif 	

#ifndef ___TypeBuilder_FWD_DEFINED__
#define ___TypeBuilder_FWD_DEFINED__
typedef interface _TypeBuilder _TypeBuilder;

#endif 	

#ifndef __ICryptoTransform_FWD_DEFINED__
#define __ICryptoTransform_FWD_DEFINED__
typedef interface ICryptoTransform ICryptoTransform;

#endif 	

#ifndef __ICspAsymmetricAlgorithm_FWD_DEFINED__
#define __ICspAsymmetricAlgorithm_FWD_DEFINED__
typedef interface ICspAsymmetricAlgorithm ICspAsymmetricAlgorithm;

#endif 	

#ifndef ___Object_FWD_DEFINED__
#define ___Object_FWD_DEFINED__
typedef interface _Object _Object;

#endif 	

#ifndef ___Array_FWD_DEFINED__
#define ___Array_FWD_DEFINED__
typedef interface _Array _Array;

#endif 	

#ifndef ___ValueType_FWD_DEFINED__
#define ___ValueType_FWD_DEFINED__
typedef interface _ValueType _ValueType;

#endif 	

#ifndef ___Enum_FWD_DEFINED__
#define ___Enum_FWD_DEFINED__
typedef interface _Enum _Enum;

#endif 	

#ifndef ___String_FWD_DEFINED__
#define ___String_FWD_DEFINED__
typedef interface _String _String;

#endif 	

#ifndef ___StringComparer_FWD_DEFINED__
#define ___StringComparer_FWD_DEFINED__
typedef interface _StringComparer _StringComparer;

#endif 	

#ifndef ___StringBuilder_FWD_DEFINED__
#define ___StringBuilder_FWD_DEFINED__
typedef interface _StringBuilder _StringBuilder;

#endif 	

#ifndef ___SystemException_FWD_DEFINED__
#define ___SystemException_FWD_DEFINED__
typedef interface _SystemException _SystemException;

#endif 	

#ifndef ___OutOfMemoryException_FWD_DEFINED__
#define ___OutOfMemoryException_FWD_DEFINED__
typedef interface _OutOfMemoryException _OutOfMemoryException;

#endif 	

#ifndef ___StackOverflowException_FWD_DEFINED__
#define ___StackOverflowException_FWD_DEFINED__
typedef interface _StackOverflowException _StackOverflowException;

#endif 	

#ifndef ___DataMisalignedException_FWD_DEFINED__
#define ___DataMisalignedException_FWD_DEFINED__
typedef interface _DataMisalignedException _DataMisalignedException;

#endif 	

#ifndef ___ExecutionEngineException_FWD_DEFINED__
#define ___ExecutionEngineException_FWD_DEFINED__
typedef interface _ExecutionEngineException _ExecutionEngineException;

#endif 	

#ifndef ___Delegate_FWD_DEFINED__
#define ___Delegate_FWD_DEFINED__
typedef interface _Delegate _Delegate;

#endif 	

#ifndef ___MulticastDelegate_FWD_DEFINED__
#define ___MulticastDelegate_FWD_DEFINED__
typedef interface _MulticastDelegate _MulticastDelegate;

#endif 	

#ifndef ___MemberAccessException_FWD_DEFINED__
#define ___MemberAccessException_FWD_DEFINED__
typedef interface _MemberAccessException _MemberAccessException;

#endif 	

#ifndef ___AccessViolationException_FWD_DEFINED__
#define ___AccessViolationException_FWD_DEFINED__
typedef interface _AccessViolationException _AccessViolationException;

#endif 	

#ifndef ___ApplicationActivator_FWD_DEFINED__
#define ___ApplicationActivator_FWD_DEFINED__
typedef interface _ApplicationActivator _ApplicationActivator;

#endif 	

#ifndef ___ApplicationException_FWD_DEFINED__
#define ___ApplicationException_FWD_DEFINED__
typedef interface _ApplicationException _ApplicationException;

#endif 	

#ifndef ___EventArgs_FWD_DEFINED__
#define ___EventArgs_FWD_DEFINED__
typedef interface _EventArgs _EventArgs;

#endif 	

#ifndef ___ResolveEventArgs_FWD_DEFINED__
#define ___ResolveEventArgs_FWD_DEFINED__
typedef interface _ResolveEventArgs _ResolveEventArgs;

#endif 	

#ifndef ___AssemblyLoadEventArgs_FWD_DEFINED__
#define ___AssemblyLoadEventArgs_FWD_DEFINED__
typedef interface _AssemblyLoadEventArgs _AssemblyLoadEventArgs;

#endif 	

#ifndef ___ResolveEventHandler_FWD_DEFINED__
#define ___ResolveEventHandler_FWD_DEFINED__
typedef interface _ResolveEventHandler _ResolveEventHandler;

#endif 	

#ifndef ___AssemblyLoadEventHandler_FWD_DEFINED__
#define ___AssemblyLoadEventHandler_FWD_DEFINED__
typedef interface _AssemblyLoadEventHandler _AssemblyLoadEventHandler;

#endif 	

#ifndef ___AppDomainInitializer_FWD_DEFINED__
#define ___AppDomainInitializer_FWD_DEFINED__
typedef interface _AppDomainInitializer _AppDomainInitializer;

#endif 	

#ifndef ___MarshalByRefObject_FWD_DEFINED__
#define ___MarshalByRefObject_FWD_DEFINED__
typedef interface _MarshalByRefObject _MarshalByRefObject;

#endif 	

#ifndef ___CrossAppDomainDelegate_FWD_DEFINED__
#define ___CrossAppDomainDelegate_FWD_DEFINED__
typedef interface _CrossAppDomainDelegate _CrossAppDomainDelegate;

#endif 	

#ifndef ___AppDomainManager_FWD_DEFINED__
#define ___AppDomainManager_FWD_DEFINED__
typedef interface _AppDomainManager _AppDomainManager;

#endif 	

#ifndef ___LoaderOptimizationAttribute_FWD_DEFINED__
#define ___LoaderOptimizationAttribute_FWD_DEFINED__
typedef interface _LoaderOptimizationAttribute _LoaderOptimizationAttribute;

#endif 	

#ifndef ___AppDomainUnloadedException_FWD_DEFINED__
#define ___AppDomainUnloadedException_FWD_DEFINED__
typedef interface _AppDomainUnloadedException _AppDomainUnloadedException;

#endif 	

#ifndef ___ActivationArguments_FWD_DEFINED__
#define ___ActivationArguments_FWD_DEFINED__
typedef interface _ActivationArguments _ActivationArguments;

#endif 	

#ifndef ___ApplicationId_FWD_DEFINED__
#define ___ApplicationId_FWD_DEFINED__
typedef interface _ApplicationId _ApplicationId;

#endif 	

#ifndef ___ArgumentException_FWD_DEFINED__
#define ___ArgumentException_FWD_DEFINED__
typedef interface _ArgumentException _ArgumentException;

#endif 	

#ifndef ___ArgumentNullException_FWD_DEFINED__
#define ___ArgumentNullException_FWD_DEFINED__
typedef interface _ArgumentNullException _ArgumentNullException;

#endif 	

#ifndef ___ArgumentOutOfRangeException_FWD_DEFINED__
#define ___ArgumentOutOfRangeException_FWD_DEFINED__
typedef interface _ArgumentOutOfRangeException _ArgumentOutOfRangeException;

#endif 	

#ifndef ___ArithmeticException_FWD_DEFINED__
#define ___ArithmeticException_FWD_DEFINED__
typedef interface _ArithmeticException _ArithmeticException;

#endif 	

#ifndef ___ArrayTypeMismatchException_FWD_DEFINED__
#define ___ArrayTypeMismatchException_FWD_DEFINED__
typedef interface _ArrayTypeMismatchException _ArrayTypeMismatchException;

#endif 	

#ifndef ___AsyncCallback_FWD_DEFINED__
#define ___AsyncCallback_FWD_DEFINED__
typedef interface _AsyncCallback _AsyncCallback;

#endif 	

#ifndef ___AttributeUsageAttribute_FWD_DEFINED__
#define ___AttributeUsageAttribute_FWD_DEFINED__
typedef interface _AttributeUsageAttribute _AttributeUsageAttribute;

#endif 	

#ifndef ___BadImageFormatException_FWD_DEFINED__
#define ___BadImageFormatException_FWD_DEFINED__
typedef interface _BadImageFormatException _BadImageFormatException;

#endif 	

#ifndef ___Buffer_FWD_DEFINED__
#define ___Buffer_FWD_DEFINED__
typedef interface _Buffer _Buffer;

#endif 	

#ifndef ___CannotUnloadAppDomainException_FWD_DEFINED__
#define ___CannotUnloadAppDomainException_FWD_DEFINED__
typedef interface _CannotUnloadAppDomainException _CannotUnloadAppDomainException;

#endif 	

#ifndef ___CharEnumerator_FWD_DEFINED__
#define ___CharEnumerator_FWD_DEFINED__
typedef interface _CharEnumerator _CharEnumerator;

#endif 	

#ifndef ___CLSCompliantAttribute_FWD_DEFINED__
#define ___CLSCompliantAttribute_FWD_DEFINED__
typedef interface _CLSCompliantAttribute _CLSCompliantAttribute;

#endif 	

#ifndef ___TypeUnloadedException_FWD_DEFINED__
#define ___TypeUnloadedException_FWD_DEFINED__
typedef interface _TypeUnloadedException _TypeUnloadedException;

#endif 	

#ifndef ___CriticalFinalizerObject_FWD_DEFINED__
#define ___CriticalFinalizerObject_FWD_DEFINED__
typedef interface _CriticalFinalizerObject _CriticalFinalizerObject;

#endif 	

#ifndef ___ContextMarshalException_FWD_DEFINED__
#define ___ContextMarshalException_FWD_DEFINED__
typedef interface _ContextMarshalException _ContextMarshalException;

#endif 	

#ifndef ___ContextBoundObject_FWD_DEFINED__
#define ___ContextBoundObject_FWD_DEFINED__
typedef interface _ContextBoundObject _ContextBoundObject;

#endif 	

#ifndef ___ContextStaticAttribute_FWD_DEFINED__
#define ___ContextStaticAttribute_FWD_DEFINED__
typedef interface _ContextStaticAttribute _ContextStaticAttribute;

#endif 	

#ifndef ___TimeZone_FWD_DEFINED__
#define ___TimeZone_FWD_DEFINED__
typedef interface _TimeZone _TimeZone;

#endif 	

#ifndef ___DBNull_FWD_DEFINED__
#define ___DBNull_FWD_DEFINED__
typedef interface _DBNull _DBNull;

#endif 	

#ifndef ___Binder_FWD_DEFINED__
#define ___Binder_FWD_DEFINED__
typedef interface _Binder _Binder;

#endif 	

#ifndef ___DivideByZeroException_FWD_DEFINED__
#define ___DivideByZeroException_FWD_DEFINED__
typedef interface _DivideByZeroException _DivideByZeroException;

#endif 	

#ifndef ___DuplicateWaitObjectException_FWD_DEFINED__
#define ___DuplicateWaitObjectException_FWD_DEFINED__
typedef interface _DuplicateWaitObjectException _DuplicateWaitObjectException;

#endif 	

#ifndef ___TypeLoadException_FWD_DEFINED__
#define ___TypeLoadException_FWD_DEFINED__
typedef interface _TypeLoadException _TypeLoadException;

#endif 	

#ifndef ___EntryPointNotFoundException_FWD_DEFINED__
#define ___EntryPointNotFoundException_FWD_DEFINED__
typedef interface _EntryPointNotFoundException _EntryPointNotFoundException;

#endif 	

#ifndef ___DllNotFoundException_FWD_DEFINED__
#define ___DllNotFoundException_FWD_DEFINED__
typedef interface _DllNotFoundException _DllNotFoundException;

#endif 	

#ifndef ___Environment_FWD_DEFINED__
#define ___Environment_FWD_DEFINED__
typedef interface _Environment _Environment;

#endif 	

#ifndef ___EventHandler_FWD_DEFINED__
#define ___EventHandler_FWD_DEFINED__
typedef interface _EventHandler _EventHandler;

#endif 	

#ifndef ___FieldAccessException_FWD_DEFINED__
#define ___FieldAccessException_FWD_DEFINED__
typedef interface _FieldAccessException _FieldAccessException;

#endif 	

#ifndef ___FlagsAttribute_FWD_DEFINED__
#define ___FlagsAttribute_FWD_DEFINED__
typedef interface _FlagsAttribute _FlagsAttribute;

#endif 	

#ifndef ___FormatException_FWD_DEFINED__
#define ___FormatException_FWD_DEFINED__
typedef interface _FormatException _FormatException;

#endif 	

#ifndef ___IndexOutOfRangeException_FWD_DEFINED__
#define ___IndexOutOfRangeException_FWD_DEFINED__
typedef interface _IndexOutOfRangeException _IndexOutOfRangeException;

#endif 	

#ifndef ___InvalidCastException_FWD_DEFINED__
#define ___InvalidCastException_FWD_DEFINED__
typedef interface _InvalidCastException _InvalidCastException;

#endif 	

#ifndef ___InvalidOperationException_FWD_DEFINED__
#define ___InvalidOperationException_FWD_DEFINED__
typedef interface _InvalidOperationException _InvalidOperationException;

#endif 	

#ifndef ___InvalidProgramException_FWD_DEFINED__
#define ___InvalidProgramException_FWD_DEFINED__
typedef interface _InvalidProgramException _InvalidProgramException;

#endif 	

#ifndef ___LocalDataStoreSlot_FWD_DEFINED__
#define ___LocalDataStoreSlot_FWD_DEFINED__
typedef interface _LocalDataStoreSlot _LocalDataStoreSlot;

#endif 	

#ifndef ___MethodAccessException_FWD_DEFINED__
#define ___MethodAccessException_FWD_DEFINED__
typedef interface _MethodAccessException _MethodAccessException;

#endif 	

#ifndef ___MissingMemberException_FWD_DEFINED__
#define ___MissingMemberException_FWD_DEFINED__
typedef interface _MissingMemberException _MissingMemberException;

#endif 	

#ifndef ___MissingFieldException_FWD_DEFINED__
#define ___MissingFieldException_FWD_DEFINED__
typedef interface _MissingFieldException _MissingFieldException;

#endif 	

#ifndef ___MissingMethodException_FWD_DEFINED__
#define ___MissingMethodException_FWD_DEFINED__
typedef interface _MissingMethodException _MissingMethodException;

#endif 	

#ifndef ___MulticastNotSupportedException_FWD_DEFINED__
#define ___MulticastNotSupportedException_FWD_DEFINED__
typedef interface _MulticastNotSupportedException _MulticastNotSupportedException;

#endif 	

#ifndef ___NonSerializedAttribute_FWD_DEFINED__
#define ___NonSerializedAttribute_FWD_DEFINED__
typedef interface _NonSerializedAttribute _NonSerializedAttribute;

#endif 	

#ifndef ___NotFiniteNumberException_FWD_DEFINED__
#define ___NotFiniteNumberException_FWD_DEFINED__
typedef interface _NotFiniteNumberException _NotFiniteNumberException;

#endif 	

#ifndef ___NotImplementedException_FWD_DEFINED__
#define ___NotImplementedException_FWD_DEFINED__
typedef interface _NotImplementedException _NotImplementedException;

#endif 	

#ifndef ___NotSupportedException_FWD_DEFINED__
#define ___NotSupportedException_FWD_DEFINED__
typedef interface _NotSupportedException _NotSupportedException;

#endif 	

#ifndef ___NullReferenceException_FWD_DEFINED__
#define ___NullReferenceException_FWD_DEFINED__
typedef interface _NullReferenceException _NullReferenceException;

#endif 	

#ifndef ___ObjectDisposedException_FWD_DEFINED__
#define ___ObjectDisposedException_FWD_DEFINED__
typedef interface _ObjectDisposedException _ObjectDisposedException;

#endif 	

#ifndef ___ObsoleteAttribute_FWD_DEFINED__
#define ___ObsoleteAttribute_FWD_DEFINED__
typedef interface _ObsoleteAttribute _ObsoleteAttribute;

#endif 	

#ifndef ___OperatingSystem_FWD_DEFINED__
#define ___OperatingSystem_FWD_DEFINED__
typedef interface _OperatingSystem _OperatingSystem;

#endif 	

#ifndef ___OperationCanceledException_FWD_DEFINED__
#define ___OperationCanceledException_FWD_DEFINED__
typedef interface _OperationCanceledException _OperationCanceledException;

#endif 	

#ifndef ___OverflowException_FWD_DEFINED__
#define ___OverflowException_FWD_DEFINED__
typedef interface _OverflowException _OverflowException;

#endif 	

#ifndef ___ParamArrayAttribute_FWD_DEFINED__
#define ___ParamArrayAttribute_FWD_DEFINED__
typedef interface _ParamArrayAttribute _ParamArrayAttribute;

#endif 	

#ifndef ___PlatformNotSupportedException_FWD_DEFINED__
#define ___PlatformNotSupportedException_FWD_DEFINED__
typedef interface _PlatformNotSupportedException _PlatformNotSupportedException;

#endif 	

#ifndef ___Random_FWD_DEFINED__
#define ___Random_FWD_DEFINED__
typedef interface _Random _Random;

#endif 	

#ifndef ___RankException_FWD_DEFINED__
#define ___RankException_FWD_DEFINED__
typedef interface _RankException _RankException;

#endif 	

#ifndef ___SerializableAttribute_FWD_DEFINED__
#define ___SerializableAttribute_FWD_DEFINED__
typedef interface _SerializableAttribute _SerializableAttribute;

#endif 	

#ifndef ___TimeoutException_FWD_DEFINED__
#define ___TimeoutException_FWD_DEFINED__
typedef interface _TimeoutException _TimeoutException;

#endif 	

#ifndef ___TypeInitializationException_FWD_DEFINED__
#define ___TypeInitializationException_FWD_DEFINED__
typedef interface _TypeInitializationException _TypeInitializationException;

#endif 	

#ifndef ___UnauthorizedAccessException_FWD_DEFINED__
#define ___UnauthorizedAccessException_FWD_DEFINED__
typedef interface _UnauthorizedAccessException _UnauthorizedAccessException;

#endif 	

#ifndef ___UnhandledExceptionEventArgs_FWD_DEFINED__
#define ___UnhandledExceptionEventArgs_FWD_DEFINED__
typedef interface _UnhandledExceptionEventArgs _UnhandledExceptionEventArgs;

#endif 	

#ifndef ___UnhandledExceptionEventHandler_FWD_DEFINED__
#define ___UnhandledExceptionEventHandler_FWD_DEFINED__
typedef interface _UnhandledExceptionEventHandler _UnhandledExceptionEventHandler;

#endif 	

#ifndef ___Version_FWD_DEFINED__
#define ___Version_FWD_DEFINED__
typedef interface _Version _Version;

#endif 	

#ifndef ___WeakReference_FWD_DEFINED__
#define ___WeakReference_FWD_DEFINED__
typedef interface _WeakReference _WeakReference;

#endif 	

#ifndef ___WaitHandle_FWD_DEFINED__
#define ___WaitHandle_FWD_DEFINED__
typedef interface _WaitHandle _WaitHandle;

#endif 	

#ifndef ___EventWaitHandle_FWD_DEFINED__
#define ___EventWaitHandle_FWD_DEFINED__
typedef interface _EventWaitHandle _EventWaitHandle;

#endif 	

#ifndef ___AutoResetEvent_FWD_DEFINED__
#define ___AutoResetEvent_FWD_DEFINED__
typedef interface _AutoResetEvent _AutoResetEvent;

#endif 	

#ifndef ___ContextCallback_FWD_DEFINED__
#define ___ContextCallback_FWD_DEFINED__
typedef interface _ContextCallback _ContextCallback;

#endif 	

#ifndef ___ManualResetEvent_FWD_DEFINED__
#define ___ManualResetEvent_FWD_DEFINED__
typedef interface _ManualResetEvent _ManualResetEvent;

#endif 	

#ifndef ___Monitor_FWD_DEFINED__
#define ___Monitor_FWD_DEFINED__
typedef interface _Monitor _Monitor;

#endif 	

#ifndef ___Mutex_FWD_DEFINED__
#define ___Mutex_FWD_DEFINED__
typedef interface _Mutex _Mutex;

#endif 	

#ifndef ___Overlapped_FWD_DEFINED__
#define ___Overlapped_FWD_DEFINED__
typedef interface _Overlapped _Overlapped;

#endif 	

#ifndef ___ReaderWriterLock_FWD_DEFINED__
#define ___ReaderWriterLock_FWD_DEFINED__
typedef interface _ReaderWriterLock _ReaderWriterLock;

#endif 	

#ifndef ___SynchronizationLockException_FWD_DEFINED__
#define ___SynchronizationLockException_FWD_DEFINED__
typedef interface _SynchronizationLockException _SynchronizationLockException;

#endif 	

#ifndef ___ThreadAbortException_FWD_DEFINED__
#define ___ThreadAbortException_FWD_DEFINED__
typedef interface _ThreadAbortException _ThreadAbortException;

#endif 	

#ifndef ___ThreadInterruptedException_FWD_DEFINED__
#define ___ThreadInterruptedException_FWD_DEFINED__
typedef interface _ThreadInterruptedException _ThreadInterruptedException;

#endif 	

#ifndef ___RegisteredWaitHandle_FWD_DEFINED__
#define ___RegisteredWaitHandle_FWD_DEFINED__
typedef interface _RegisteredWaitHandle _RegisteredWaitHandle;

#endif 	

#ifndef ___WaitCallback_FWD_DEFINED__
#define ___WaitCallback_FWD_DEFINED__
typedef interface _WaitCallback _WaitCallback;

#endif 	

#ifndef ___WaitOrTimerCallback_FWD_DEFINED__
#define ___WaitOrTimerCallback_FWD_DEFINED__
typedef interface _WaitOrTimerCallback _WaitOrTimerCallback;

#endif 	

#ifndef ___IOCompletionCallback_FWD_DEFINED__
#define ___IOCompletionCallback_FWD_DEFINED__
typedef interface _IOCompletionCallback _IOCompletionCallback;

#endif 	

#ifndef ___ThreadStart_FWD_DEFINED__
#define ___ThreadStart_FWD_DEFINED__
typedef interface _ThreadStart _ThreadStart;

#endif 	

#ifndef ___ThreadStateException_FWD_DEFINED__
#define ___ThreadStateException_FWD_DEFINED__
typedef interface _ThreadStateException _ThreadStateException;

#endif 	

#ifndef ___ThreadStaticAttribute_FWD_DEFINED__
#define ___ThreadStaticAttribute_FWD_DEFINED__
typedef interface _ThreadStaticAttribute _ThreadStaticAttribute;

#endif 	

#ifndef ___Timeout_FWD_DEFINED__
#define ___Timeout_FWD_DEFINED__
typedef interface _Timeout _Timeout;

#endif 	

#ifndef ___TimerCallback_FWD_DEFINED__
#define ___TimerCallback_FWD_DEFINED__
typedef interface _TimerCallback _TimerCallback;

#endif 	

#ifndef ___Timer_FWD_DEFINED__
#define ___Timer_FWD_DEFINED__
typedef interface _Timer _Timer;

#endif 	

#ifndef ___STAThreadAttribute_FWD_DEFINED__
#define ___STAThreadAttribute_FWD_DEFINED__
typedef interface _STAThreadAttribute _STAThreadAttribute;

#endif 	

#ifndef ___MTAThreadAttribute_FWD_DEFINED__
#define ___MTAThreadAttribute_FWD_DEFINED__
typedef interface _MTAThreadAttribute _MTAThreadAttribute;

#endif 	

#ifndef ___ArrayList_FWD_DEFINED__
#define ___ArrayList_FWD_DEFINED__
typedef interface _ArrayList _ArrayList;

#endif 	

#ifndef ___BitArray_FWD_DEFINED__
#define ___BitArray_FWD_DEFINED__
typedef interface _BitArray _BitArray;

#endif 	

#ifndef ___CaseInsensitiveComparer_FWD_DEFINED__
#define ___CaseInsensitiveComparer_FWD_DEFINED__
typedef interface _CaseInsensitiveComparer _CaseInsensitiveComparer;

#endif 	

#ifndef ___CaseInsensitiveHashCodeProvider_FWD_DEFINED__
#define ___CaseInsensitiveHashCodeProvider_FWD_DEFINED__
typedef interface _CaseInsensitiveHashCodeProvider _CaseInsensitiveHashCodeProvider;

#endif 	

#ifndef ___CollectionBase_FWD_DEFINED__
#define ___CollectionBase_FWD_DEFINED__
typedef interface _CollectionBase _CollectionBase;

#endif 	

#ifndef ___Comparer_FWD_DEFINED__
#define ___Comparer_FWD_DEFINED__
typedef interface _Comparer _Comparer;

#endif 	

#ifndef ___DictionaryBase_FWD_DEFINED__
#define ___DictionaryBase_FWD_DEFINED__
typedef interface _DictionaryBase _DictionaryBase;

#endif 	

#ifndef ___Hashtable_FWD_DEFINED__
#define ___Hashtable_FWD_DEFINED__
typedef interface _Hashtable _Hashtable;

#endif 	

#ifndef ___Queue_FWD_DEFINED__
#define ___Queue_FWD_DEFINED__
typedef interface _Queue _Queue;

#endif 	

#ifndef ___ReadOnlyCollectionBase_FWD_DEFINED__
#define ___ReadOnlyCollectionBase_FWD_DEFINED__
typedef interface _ReadOnlyCollectionBase _ReadOnlyCollectionBase;

#endif 	

#ifndef ___SortedList_FWD_DEFINED__
#define ___SortedList_FWD_DEFINED__
typedef interface _SortedList _SortedList;

#endif 	

#ifndef ___Stack_FWD_DEFINED__
#define ___Stack_FWD_DEFINED__
typedef interface _Stack _Stack;

#endif 	

#ifndef ___Nullable_FWD_DEFINED__
#define ___Nullable_FWD_DEFINED__
typedef interface _Nullable _Nullable;

#endif 	

#ifndef ___KeyNotFoundException_FWD_DEFINED__
#define ___KeyNotFoundException_FWD_DEFINED__
typedef interface _KeyNotFoundException _KeyNotFoundException;

#endif 	

#ifndef ___ConditionalAttribute_FWD_DEFINED__
#define ___ConditionalAttribute_FWD_DEFINED__
typedef interface _ConditionalAttribute _ConditionalAttribute;

#endif 	

#ifndef ___Debugger_FWD_DEFINED__
#define ___Debugger_FWD_DEFINED__
typedef interface _Debugger _Debugger;

#endif 	

#ifndef ___DebuggerStepThroughAttribute_FWD_DEFINED__
#define ___DebuggerStepThroughAttribute_FWD_DEFINED__
typedef interface _DebuggerStepThroughAttribute _DebuggerStepThroughAttribute;

#endif 	

#ifndef ___DebuggerStepperBoundaryAttribute_FWD_DEFINED__
#define ___DebuggerStepperBoundaryAttribute_FWD_DEFINED__
typedef interface _DebuggerStepperBoundaryAttribute _DebuggerStepperBoundaryAttribute;

#endif 	

#ifndef ___DebuggerHiddenAttribute_FWD_DEFINED__
#define ___DebuggerHiddenAttribute_FWD_DEFINED__
typedef interface _DebuggerHiddenAttribute _DebuggerHiddenAttribute;

#endif 	

#ifndef ___DebuggerNonUserCodeAttribute_FWD_DEFINED__
#define ___DebuggerNonUserCodeAttribute_FWD_DEFINED__
typedef interface _DebuggerNonUserCodeAttribute _DebuggerNonUserCodeAttribute;

#endif 	

#ifndef ___DebuggableAttribute_FWD_DEFINED__
#define ___DebuggableAttribute_FWD_DEFINED__
typedef interface _DebuggableAttribute _DebuggableAttribute;

#endif 	

#ifndef ___DebuggerBrowsableAttribute_FWD_DEFINED__
#define ___DebuggerBrowsableAttribute_FWD_DEFINED__
typedef interface _DebuggerBrowsableAttribute _DebuggerBrowsableAttribute;

#endif 	

#ifndef ___DebuggerTypeProxyAttribute_FWD_DEFINED__
#define ___DebuggerTypeProxyAttribute_FWD_DEFINED__
typedef interface _DebuggerTypeProxyAttribute _DebuggerTypeProxyAttribute;

#endif 	

#ifndef ___DebuggerDisplayAttribute_FWD_DEFINED__
#define ___DebuggerDisplayAttribute_FWD_DEFINED__
typedef interface _DebuggerDisplayAttribute _DebuggerDisplayAttribute;

#endif 	

#ifndef ___DebuggerVisualizerAttribute_FWD_DEFINED__
#define ___DebuggerVisualizerAttribute_FWD_DEFINED__
typedef interface _DebuggerVisualizerAttribute _DebuggerVisualizerAttribute;

#endif 	

#ifndef ___StackTrace_FWD_DEFINED__
#define ___StackTrace_FWD_DEFINED__
typedef interface _StackTrace _StackTrace;

#endif 	

#ifndef ___StackFrame_FWD_DEFINED__
#define ___StackFrame_FWD_DEFINED__
typedef interface _StackFrame _StackFrame;

#endif 	

#ifndef ___SymDocumentType_FWD_DEFINED__
#define ___SymDocumentType_FWD_DEFINED__
typedef interface _SymDocumentType _SymDocumentType;

#endif 	

#ifndef ___SymLanguageType_FWD_DEFINED__
#define ___SymLanguageType_FWD_DEFINED__
typedef interface _SymLanguageType _SymLanguageType;

#endif 	

#ifndef ___SymLanguageVendor_FWD_DEFINED__
#define ___SymLanguageVendor_FWD_DEFINED__
typedef interface _SymLanguageVendor _SymLanguageVendor;

#endif 	

#ifndef ___AmbiguousMatchException_FWD_DEFINED__
#define ___AmbiguousMatchException_FWD_DEFINED__
typedef interface _AmbiguousMatchException _AmbiguousMatchException;

#endif 	

#ifndef ___ModuleResolveEventHandler_FWD_DEFINED__
#define ___ModuleResolveEventHandler_FWD_DEFINED__
typedef interface _ModuleResolveEventHandler _ModuleResolveEventHandler;

#endif 	

#ifndef ___AssemblyCopyrightAttribute_FWD_DEFINED__
#define ___AssemblyCopyrightAttribute_FWD_DEFINED__
typedef interface _AssemblyCopyrightAttribute _AssemblyCopyrightAttribute;

#endif 	

#ifndef ___AssemblyTrademarkAttribute_FWD_DEFINED__
#define ___AssemblyTrademarkAttribute_FWD_DEFINED__
typedef interface _AssemblyTrademarkAttribute _AssemblyTrademarkAttribute;

#endif 	

#ifndef ___AssemblyProductAttribute_FWD_DEFINED__
#define ___AssemblyProductAttribute_FWD_DEFINED__
typedef interface _AssemblyProductAttribute _AssemblyProductAttribute;

#endif 	

#ifndef ___AssemblyCompanyAttribute_FWD_DEFINED__
#define ___AssemblyCompanyAttribute_FWD_DEFINED__
typedef interface _AssemblyCompanyAttribute _AssemblyCompanyAttribute;

#endif 	

#ifndef ___AssemblyDescriptionAttribute_FWD_DEFINED__
#define ___AssemblyDescriptionAttribute_FWD_DEFINED__
typedef interface _AssemblyDescriptionAttribute _AssemblyDescriptionAttribute;

#endif 	

#ifndef ___AssemblyTitleAttribute_FWD_DEFINED__
#define ___AssemblyTitleAttribute_FWD_DEFINED__
typedef interface _AssemblyTitleAttribute _AssemblyTitleAttribute;

#endif 	

#ifndef ___AssemblyConfigurationAttribute_FWD_DEFINED__
#define ___AssemblyConfigurationAttribute_FWD_DEFINED__
typedef interface _AssemblyConfigurationAttribute _AssemblyConfigurationAttribute;

#endif 	

#ifndef ___AssemblyDefaultAliasAttribute_FWD_DEFINED__
#define ___AssemblyDefaultAliasAttribute_FWD_DEFINED__
typedef interface _AssemblyDefaultAliasAttribute _AssemblyDefaultAliasAttribute;

#endif 	

#ifndef ___AssemblyInformationalVersionAttribute_FWD_DEFINED__
#define ___AssemblyInformationalVersionAttribute_FWD_DEFINED__
typedef interface _AssemblyInformationalVersionAttribute _AssemblyInformationalVersionAttribute;

#endif 	

#ifndef ___AssemblyFileVersionAttribute_FWD_DEFINED__
#define ___AssemblyFileVersionAttribute_FWD_DEFINED__
typedef interface _AssemblyFileVersionAttribute _AssemblyFileVersionAttribute;

#endif 	

#ifndef ___AssemblyCultureAttribute_FWD_DEFINED__
#define ___AssemblyCultureAttribute_FWD_DEFINED__
typedef interface _AssemblyCultureAttribute _AssemblyCultureAttribute;

#endif 	

#ifndef ___AssemblyVersionAttribute_FWD_DEFINED__
#define ___AssemblyVersionAttribute_FWD_DEFINED__
typedef interface _AssemblyVersionAttribute _AssemblyVersionAttribute;

#endif 	

#ifndef ___AssemblyKeyFileAttribute_FWD_DEFINED__
#define ___AssemblyKeyFileAttribute_FWD_DEFINED__
typedef interface _AssemblyKeyFileAttribute _AssemblyKeyFileAttribute;

#endif 	

#ifndef ___AssemblyDelaySignAttribute_FWD_DEFINED__
#define ___AssemblyDelaySignAttribute_FWD_DEFINED__
typedef interface _AssemblyDelaySignAttribute _AssemblyDelaySignAttribute;

#endif 	

#ifndef ___AssemblyAlgorithmIdAttribute_FWD_DEFINED__
#define ___AssemblyAlgorithmIdAttribute_FWD_DEFINED__
typedef interface _AssemblyAlgorithmIdAttribute _AssemblyAlgorithmIdAttribute;

#endif 	

#ifndef ___AssemblyFlagsAttribute_FWD_DEFINED__
#define ___AssemblyFlagsAttribute_FWD_DEFINED__
typedef interface _AssemblyFlagsAttribute _AssemblyFlagsAttribute;

#endif 	

#ifndef ___AssemblyKeyNameAttribute_FWD_DEFINED__
#define ___AssemblyKeyNameAttribute_FWD_DEFINED__
typedef interface _AssemblyKeyNameAttribute _AssemblyKeyNameAttribute;

#endif 	

#ifndef ___AssemblyNameProxy_FWD_DEFINED__
#define ___AssemblyNameProxy_FWD_DEFINED__
typedef interface _AssemblyNameProxy _AssemblyNameProxy;

#endif 	

#ifndef ___CustomAttributeFormatException_FWD_DEFINED__
#define ___CustomAttributeFormatException_FWD_DEFINED__
typedef interface _CustomAttributeFormatException _CustomAttributeFormatException;

#endif 	

#ifndef ___CustomAttributeData_FWD_DEFINED__
#define ___CustomAttributeData_FWD_DEFINED__
typedef interface _CustomAttributeData _CustomAttributeData;

#endif 	

#ifndef ___DefaultMemberAttribute_FWD_DEFINED__
#define ___DefaultMemberAttribute_FWD_DEFINED__
typedef interface _DefaultMemberAttribute _DefaultMemberAttribute;

#endif 	

#ifndef ___InvalidFilterCriteriaException_FWD_DEFINED__
#define ___InvalidFilterCriteriaException_FWD_DEFINED__
typedef interface _InvalidFilterCriteriaException _InvalidFilterCriteriaException;

#endif 	

#ifndef ___ManifestResourceInfo_FWD_DEFINED__
#define ___ManifestResourceInfo_FWD_DEFINED__
typedef interface _ManifestResourceInfo _ManifestResourceInfo;

#endif 	

#ifndef ___MemberFilter_FWD_DEFINED__
#define ___MemberFilter_FWD_DEFINED__
typedef interface _MemberFilter _MemberFilter;

#endif 	

#ifndef ___Missing_FWD_DEFINED__
#define ___Missing_FWD_DEFINED__
typedef interface _Missing _Missing;

#endif 	

#ifndef ___ObfuscateAssemblyAttribute_FWD_DEFINED__
#define ___ObfuscateAssemblyAttribute_FWD_DEFINED__
typedef interface _ObfuscateAssemblyAttribute _ObfuscateAssemblyAttribute;

#endif 	

#ifndef ___ObfuscationAttribute_FWD_DEFINED__
#define ___ObfuscationAttribute_FWD_DEFINED__
typedef interface _ObfuscationAttribute _ObfuscationAttribute;

#endif 	

#ifndef ___ExceptionHandlingClause_FWD_DEFINED__
#define ___ExceptionHandlingClause_FWD_DEFINED__
typedef interface _ExceptionHandlingClause _ExceptionHandlingClause;

#endif 	

#ifndef ___MethodBody_FWD_DEFINED__
#define ___MethodBody_FWD_DEFINED__
typedef interface _MethodBody _MethodBody;

#endif 	

#ifndef ___LocalVariableInfo_FWD_DEFINED__
#define ___LocalVariableInfo_FWD_DEFINED__
typedef interface _LocalVariableInfo _LocalVariableInfo;

#endif 	

#ifndef ___Pointer_FWD_DEFINED__
#define ___Pointer_FWD_DEFINED__
typedef interface _Pointer _Pointer;

#endif 	

#ifndef ___ReflectionTypeLoadException_FWD_DEFINED__
#define ___ReflectionTypeLoadException_FWD_DEFINED__
typedef interface _ReflectionTypeLoadException _ReflectionTypeLoadException;

#endif 	

#ifndef ___StrongNameKeyPair_FWD_DEFINED__
#define ___StrongNameKeyPair_FWD_DEFINED__
typedef interface _StrongNameKeyPair _StrongNameKeyPair;

#endif 	

#ifndef ___TargetException_FWD_DEFINED__
#define ___TargetException_FWD_DEFINED__
typedef interface _TargetException _TargetException;

#endif 	

#ifndef ___TargetInvocationException_FWD_DEFINED__
#define ___TargetInvocationException_FWD_DEFINED__
typedef interface _TargetInvocationException _TargetInvocationException;

#endif 	

#ifndef ___TargetParameterCountException_FWD_DEFINED__
#define ___TargetParameterCountException_FWD_DEFINED__
typedef interface _TargetParameterCountException _TargetParameterCountException;

#endif 	

#ifndef ___TypeDelegator_FWD_DEFINED__
#define ___TypeDelegator_FWD_DEFINED__
typedef interface _TypeDelegator _TypeDelegator;

#endif 	

#ifndef ___TypeFilter_FWD_DEFINED__
#define ___TypeFilter_FWD_DEFINED__
typedef interface _TypeFilter _TypeFilter;

#endif 	

#ifndef ___Formatter_FWD_DEFINED__
#define ___Formatter_FWD_DEFINED__
typedef interface _Formatter _Formatter;

#endif 	

#ifndef ___FormatterConverter_FWD_DEFINED__
#define ___FormatterConverter_FWD_DEFINED__
typedef interface _FormatterConverter _FormatterConverter;

#endif 	

#ifndef ___FormatterServices_FWD_DEFINED__
#define ___FormatterServices_FWD_DEFINED__
typedef interface _FormatterServices _FormatterServices;

#endif 	

#ifndef ___ObjectIDGenerator_FWD_DEFINED__
#define ___ObjectIDGenerator_FWD_DEFINED__
typedef interface _ObjectIDGenerator _ObjectIDGenerator;

#endif 	

#ifndef ___ObjectManager_FWD_DEFINED__
#define ___ObjectManager_FWD_DEFINED__
typedef interface _ObjectManager _ObjectManager;

#endif 	

#ifndef ___OptionalFieldAttribute_FWD_DEFINED__
#define ___OptionalFieldAttribute_FWD_DEFINED__
typedef interface _OptionalFieldAttribute _OptionalFieldAttribute;

#endif 	

#ifndef ___OnSerializingAttribute_FWD_DEFINED__
#define ___OnSerializingAttribute_FWD_DEFINED__
typedef interface _OnSerializingAttribute _OnSerializingAttribute;

#endif 	

#ifndef ___OnSerializedAttribute_FWD_DEFINED__
#define ___OnSerializedAttribute_FWD_DEFINED__
typedef interface _OnSerializedAttribute _OnSerializedAttribute;

#endif 	

#ifndef ___OnDeserializingAttribute_FWD_DEFINED__
#define ___OnDeserializingAttribute_FWD_DEFINED__
typedef interface _OnDeserializingAttribute _OnDeserializingAttribute;

#endif 	

#ifndef ___OnDeserializedAttribute_FWD_DEFINED__
#define ___OnDeserializedAttribute_FWD_DEFINED__
typedef interface _OnDeserializedAttribute _OnDeserializedAttribute;

#endif 	

#ifndef ___SerializationBinder_FWD_DEFINED__
#define ___SerializationBinder_FWD_DEFINED__
typedef interface _SerializationBinder _SerializationBinder;

#endif 	

#ifndef ___SerializationInfo_FWD_DEFINED__
#define ___SerializationInfo_FWD_DEFINED__
typedef interface _SerializationInfo _SerializationInfo;

#endif 	

#ifndef ___SerializationInfoEnumerator_FWD_DEFINED__
#define ___SerializationInfoEnumerator_FWD_DEFINED__
typedef interface _SerializationInfoEnumerator _SerializationInfoEnumerator;

#endif 	

#ifndef ___SerializationException_FWD_DEFINED__
#define ___SerializationException_FWD_DEFINED__
typedef interface _SerializationException _SerializationException;

#endif 	

#ifndef ___SurrogateSelector_FWD_DEFINED__
#define ___SurrogateSelector_FWD_DEFINED__
typedef interface _SurrogateSelector _SurrogateSelector;

#endif 	

#ifndef ___Calendar_FWD_DEFINED__
#define ___Calendar_FWD_DEFINED__
typedef interface _Calendar _Calendar;

#endif 	

#ifndef ___EastAsianLunisolarCalendar_FWD_DEFINED__
#define ___EastAsianLunisolarCalendar_FWD_DEFINED__
typedef interface _EastAsianLunisolarCalendar _EastAsianLunisolarCalendar;

#endif 	

#ifndef ___CompareInfo_FWD_DEFINED__
#define ___CompareInfo_FWD_DEFINED__
typedef interface _CompareInfo _CompareInfo;

#endif 	

#ifndef ___CultureInfo_FWD_DEFINED__
#define ___CultureInfo_FWD_DEFINED__
typedef interface _CultureInfo _CultureInfo;

#endif 	

#ifndef ___DateTimeFormatInfo_FWD_DEFINED__
#define ___DateTimeFormatInfo_FWD_DEFINED__
typedef interface _DateTimeFormatInfo _DateTimeFormatInfo;

#endif 	

#ifndef ___DaylightTime_FWD_DEFINED__
#define ___DaylightTime_FWD_DEFINED__
typedef interface _DaylightTime _DaylightTime;

#endif 	

#ifndef ___GregorianCalendar_FWD_DEFINED__
#define ___GregorianCalendar_FWD_DEFINED__
typedef interface _GregorianCalendar _GregorianCalendar;

#endif 	

#ifndef ___HebrewCalendar_FWD_DEFINED__
#define ___HebrewCalendar_FWD_DEFINED__
typedef interface _HebrewCalendar _HebrewCalendar;

#endif 	

#ifndef ___HijriCalendar_FWD_DEFINED__
#define ___HijriCalendar_FWD_DEFINED__
typedef interface _HijriCalendar _HijriCalendar;

#endif 	

#ifndef ___JapaneseCalendar_FWD_DEFINED__
#define ___JapaneseCalendar_FWD_DEFINED__
typedef interface _JapaneseCalendar _JapaneseCalendar;

#endif 	

#ifndef ___JulianCalendar_FWD_DEFINED__
#define ___JulianCalendar_FWD_DEFINED__
typedef interface _JulianCalendar _JulianCalendar;

#endif 	

#ifndef ___KoreanCalendar_FWD_DEFINED__
#define ___KoreanCalendar_FWD_DEFINED__
typedef interface _KoreanCalendar _KoreanCalendar;

#endif 	

#ifndef ___RegionInfo_FWD_DEFINED__
#define ___RegionInfo_FWD_DEFINED__
typedef interface _RegionInfo _RegionInfo;

#endif 	

#ifndef ___SortKey_FWD_DEFINED__
#define ___SortKey_FWD_DEFINED__
typedef interface _SortKey _SortKey;

#endif 	

#ifndef ___StringInfo_FWD_DEFINED__
#define ___StringInfo_FWD_DEFINED__
typedef interface _StringInfo _StringInfo;

#endif 	

#ifndef ___TaiwanCalendar_FWD_DEFINED__
#define ___TaiwanCalendar_FWD_DEFINED__
typedef interface _TaiwanCalendar _TaiwanCalendar;

#endif 	

#ifndef ___TextElementEnumerator_FWD_DEFINED__
#define ___TextElementEnumerator_FWD_DEFINED__
typedef interface _TextElementEnumerator _TextElementEnumerator;

#endif 	

#ifndef ___TextInfo_FWD_DEFINED__
#define ___TextInfo_FWD_DEFINED__
typedef interface _TextInfo _TextInfo;

#endif 	

#ifndef ___ThaiBuddhistCalendar_FWD_DEFINED__
#define ___ThaiBuddhistCalendar_FWD_DEFINED__
typedef interface _ThaiBuddhistCalendar _ThaiBuddhistCalendar;

#endif 	

#ifndef ___NumberFormatInfo_FWD_DEFINED__
#define ___NumberFormatInfo_FWD_DEFINED__
typedef interface _NumberFormatInfo _NumberFormatInfo;

#endif 	

#ifndef ___Encoding_FWD_DEFINED__
#define ___Encoding_FWD_DEFINED__
typedef interface _Encoding _Encoding;

#endif 	

#ifndef ___Encoder_FWD_DEFINED__
#define ___Encoder_FWD_DEFINED__
typedef interface _Encoder _Encoder;

#endif 	

#ifndef ___Decoder_FWD_DEFINED__
#define ___Decoder_FWD_DEFINED__
typedef interface _Decoder _Decoder;

#endif 	

#ifndef ___ASCIIEncoding_FWD_DEFINED__
#define ___ASCIIEncoding_FWD_DEFINED__
typedef interface _ASCIIEncoding _ASCIIEncoding;

#endif 	

#ifndef ___UnicodeEncoding_FWD_DEFINED__
#define ___UnicodeEncoding_FWD_DEFINED__
typedef interface _UnicodeEncoding _UnicodeEncoding;

#endif 	

#ifndef ___UTF7Encoding_FWD_DEFINED__
#define ___UTF7Encoding_FWD_DEFINED__
typedef interface _UTF7Encoding _UTF7Encoding;

#endif 	

#ifndef ___UTF8Encoding_FWD_DEFINED__
#define ___UTF8Encoding_FWD_DEFINED__
typedef interface _UTF8Encoding _UTF8Encoding;

#endif 	

#ifndef ___MissingManifestResourceException_FWD_DEFINED__
#define ___MissingManifestResourceException_FWD_DEFINED__
typedef interface _MissingManifestResourceException _MissingManifestResourceException;

#endif 	

#ifndef ___MissingSatelliteAssemblyException_FWD_DEFINED__
#define ___MissingSatelliteAssemblyException_FWD_DEFINED__
typedef interface _MissingSatelliteAssemblyException _MissingSatelliteAssemblyException;

#endif 	

#ifndef ___NeutralResourcesLanguageAttribute_FWD_DEFINED__
#define ___NeutralResourcesLanguageAttribute_FWD_DEFINED__
typedef interface _NeutralResourcesLanguageAttribute _NeutralResourcesLanguageAttribute;

#endif 	

#ifndef ___ResourceManager_FWD_DEFINED__
#define ___ResourceManager_FWD_DEFINED__
typedef interface _ResourceManager _ResourceManager;

#endif 	

#ifndef ___ResourceReader_FWD_DEFINED__
#define ___ResourceReader_FWD_DEFINED__
typedef interface _ResourceReader _ResourceReader;

#endif 	

#ifndef ___ResourceSet_FWD_DEFINED__
#define ___ResourceSet_FWD_DEFINED__
typedef interface _ResourceSet _ResourceSet;

#endif 	

#ifndef ___ResourceWriter_FWD_DEFINED__
#define ___ResourceWriter_FWD_DEFINED__
typedef interface _ResourceWriter _ResourceWriter;

#endif 	

#ifndef ___SatelliteContractVersionAttribute_FWD_DEFINED__
#define ___SatelliteContractVersionAttribute_FWD_DEFINED__
typedef interface _SatelliteContractVersionAttribute _SatelliteContractVersionAttribute;

#endif 	

#ifndef ___Registry_FWD_DEFINED__
#define ___Registry_FWD_DEFINED__
typedef interface _Registry _Registry;

#endif 	

#ifndef ___RegistryKey_FWD_DEFINED__
#define ___RegistryKey_FWD_DEFINED__
typedef interface _RegistryKey _RegistryKey;

#endif 	

#ifndef ___AllMembershipCondition_FWD_DEFINED__
#define ___AllMembershipCondition_FWD_DEFINED__
typedef interface _AllMembershipCondition _AllMembershipCondition;

#endif 	

#ifndef ___ApplicationDirectory_FWD_DEFINED__
#define ___ApplicationDirectory_FWD_DEFINED__
typedef interface _ApplicationDirectory _ApplicationDirectory;

#endif 	

#ifndef ___ApplicationDirectoryMembershipCondition_FWD_DEFINED__
#define ___ApplicationDirectoryMembershipCondition_FWD_DEFINED__
typedef interface _ApplicationDirectoryMembershipCondition _ApplicationDirectoryMembershipCondition;

#endif 	

#ifndef ___ApplicationSecurityInfo_FWD_DEFINED__
#define ___ApplicationSecurityInfo_FWD_DEFINED__
typedef interface _ApplicationSecurityInfo _ApplicationSecurityInfo;

#endif 	

#ifndef ___ApplicationSecurityManager_FWD_DEFINED__
#define ___ApplicationSecurityManager_FWD_DEFINED__
typedef interface _ApplicationSecurityManager _ApplicationSecurityManager;

#endif 	

#ifndef ___ApplicationTrust_FWD_DEFINED__
#define ___ApplicationTrust_FWD_DEFINED__
typedef interface _ApplicationTrust _ApplicationTrust;

#endif 	

#ifndef ___ApplicationTrustCollection_FWD_DEFINED__
#define ___ApplicationTrustCollection_FWD_DEFINED__
typedef interface _ApplicationTrustCollection _ApplicationTrustCollection;

#endif 	

#ifndef ___ApplicationTrustEnumerator_FWD_DEFINED__
#define ___ApplicationTrustEnumerator_FWD_DEFINED__
typedef interface _ApplicationTrustEnumerator _ApplicationTrustEnumerator;

#endif 	

#ifndef ___CodeGroup_FWD_DEFINED__
#define ___CodeGroup_FWD_DEFINED__
typedef interface _CodeGroup _CodeGroup;

#endif 	

#ifndef ___Evidence_FWD_DEFINED__
#define ___Evidence_FWD_DEFINED__
typedef interface _Evidence _Evidence;

#endif 	

#ifndef ___FileCodeGroup_FWD_DEFINED__
#define ___FileCodeGroup_FWD_DEFINED__
typedef interface _FileCodeGroup _FileCodeGroup;

#endif 	

#ifndef ___FirstMatchCodeGroup_FWD_DEFINED__
#define ___FirstMatchCodeGroup_FWD_DEFINED__
typedef interface _FirstMatchCodeGroup _FirstMatchCodeGroup;

#endif 	

#ifndef ___TrustManagerContext_FWD_DEFINED__
#define ___TrustManagerContext_FWD_DEFINED__
typedef interface _TrustManagerContext _TrustManagerContext;

#endif 	

#ifndef ___CodeConnectAccess_FWD_DEFINED__
#define ___CodeConnectAccess_FWD_DEFINED__
typedef interface _CodeConnectAccess _CodeConnectAccess;

#endif 	

#ifndef ___NetCodeGroup_FWD_DEFINED__
#define ___NetCodeGroup_FWD_DEFINED__
typedef interface _NetCodeGroup _NetCodeGroup;

#endif 	

#ifndef ___PermissionRequestEvidence_FWD_DEFINED__
#define ___PermissionRequestEvidence_FWD_DEFINED__
typedef interface _PermissionRequestEvidence _PermissionRequestEvidence;

#endif 	

#ifndef ___PolicyException_FWD_DEFINED__
#define ___PolicyException_FWD_DEFINED__
typedef interface _PolicyException _PolicyException;

#endif 	

#ifndef ___PolicyLevel_FWD_DEFINED__
#define ___PolicyLevel_FWD_DEFINED__
typedef interface _PolicyLevel _PolicyLevel;

#endif 	

#ifndef ___PolicyStatement_FWD_DEFINED__
#define ___PolicyStatement_FWD_DEFINED__
typedef interface _PolicyStatement _PolicyStatement;

#endif 	

#ifndef ___Site_FWD_DEFINED__
#define ___Site_FWD_DEFINED__
typedef interface _Site _Site;

#endif 	

#ifndef ___SiteMembershipCondition_FWD_DEFINED__
#define ___SiteMembershipCondition_FWD_DEFINED__
typedef interface _SiteMembershipCondition _SiteMembershipCondition;

#endif 	

#ifndef ___StrongName_FWD_DEFINED__
#define ___StrongName_FWD_DEFINED__
typedef interface _StrongName _StrongName;

#endif 	

#ifndef ___StrongNameMembershipCondition_FWD_DEFINED__
#define ___StrongNameMembershipCondition_FWD_DEFINED__
typedef interface _StrongNameMembershipCondition _StrongNameMembershipCondition;

#endif 	

#ifndef ___UnionCodeGroup_FWD_DEFINED__
#define ___UnionCodeGroup_FWD_DEFINED__
typedef interface _UnionCodeGroup _UnionCodeGroup;

#endif 	

#ifndef ___Url_FWD_DEFINED__
#define ___Url_FWD_DEFINED__
typedef interface _Url _Url;

#endif 	

#ifndef ___UrlMembershipCondition_FWD_DEFINED__
#define ___UrlMembershipCondition_FWD_DEFINED__
typedef interface _UrlMembershipCondition _UrlMembershipCondition;

#endif 	

#ifndef ___Zone_FWD_DEFINED__
#define ___Zone_FWD_DEFINED__
typedef interface _Zone _Zone;

#endif 	

#ifndef ___ZoneMembershipCondition_FWD_DEFINED__
#define ___ZoneMembershipCondition_FWD_DEFINED__
typedef interface _ZoneMembershipCondition _ZoneMembershipCondition;

#endif 	

#ifndef ___GacInstalled_FWD_DEFINED__
#define ___GacInstalled_FWD_DEFINED__
typedef interface _GacInstalled _GacInstalled;

#endif 	

#ifndef ___GacMembershipCondition_FWD_DEFINED__
#define ___GacMembershipCondition_FWD_DEFINED__
typedef interface _GacMembershipCondition _GacMembershipCondition;

#endif 	

#ifndef ___Hash_FWD_DEFINED__
#define ___Hash_FWD_DEFINED__
typedef interface _Hash _Hash;

#endif 	

#ifndef ___HashMembershipCondition_FWD_DEFINED__
#define ___HashMembershipCondition_FWD_DEFINED__
typedef interface _HashMembershipCondition _HashMembershipCondition;

#endif 	

#ifndef ___Publisher_FWD_DEFINED__
#define ___Publisher_FWD_DEFINED__
typedef interface _Publisher _Publisher;

#endif 	

#ifndef ___PublisherMembershipCondition_FWD_DEFINED__
#define ___PublisherMembershipCondition_FWD_DEFINED__
typedef interface _PublisherMembershipCondition _PublisherMembershipCondition;

#endif 	

#ifndef ___GenericIdentity_FWD_DEFINED__
#define ___GenericIdentity_FWD_DEFINED__
typedef interface _GenericIdentity _GenericIdentity;

#endif 	

#ifndef ___GenericPrincipal_FWD_DEFINED__
#define ___GenericPrincipal_FWD_DEFINED__
typedef interface _GenericPrincipal _GenericPrincipal;

#endif 	

#ifndef ___WindowsIdentity_FWD_DEFINED__
#define ___WindowsIdentity_FWD_DEFINED__
typedef interface _WindowsIdentity _WindowsIdentity;

#endif 	

#ifndef ___WindowsImpersonationContext_FWD_DEFINED__
#define ___WindowsImpersonationContext_FWD_DEFINED__
typedef interface _WindowsImpersonationContext _WindowsImpersonationContext;

#endif 	

#ifndef ___WindowsPrincipal_FWD_DEFINED__
#define ___WindowsPrincipal_FWD_DEFINED__
typedef interface _WindowsPrincipal _WindowsPrincipal;

#endif 	

#ifndef ___UnmanagedFunctionPointerAttribute_FWD_DEFINED__
#define ___UnmanagedFunctionPointerAttribute_FWD_DEFINED__
typedef interface _UnmanagedFunctionPointerAttribute _UnmanagedFunctionPointerAttribute;

#endif 	

#ifndef ___DispIdAttribute_FWD_DEFINED__
#define ___DispIdAttribute_FWD_DEFINED__
typedef interface _DispIdAttribute _DispIdAttribute;

#endif 	

#ifndef ___InterfaceTypeAttribute_FWD_DEFINED__
#define ___InterfaceTypeAttribute_FWD_DEFINED__
typedef interface _InterfaceTypeAttribute _InterfaceTypeAttribute;

#endif 	

#ifndef ___ComDefaultInterfaceAttribute_FWD_DEFINED__
#define ___ComDefaultInterfaceAttribute_FWD_DEFINED__
typedef interface _ComDefaultInterfaceAttribute _ComDefaultInterfaceAttribute;

#endif 	

#ifndef ___ClassInterfaceAttribute_FWD_DEFINED__
#define ___ClassInterfaceAttribute_FWD_DEFINED__
typedef interface _ClassInterfaceAttribute _ClassInterfaceAttribute;

#endif 	

#ifndef ___ComVisibleAttribute_FWD_DEFINED__
#define ___ComVisibleAttribute_FWD_DEFINED__
typedef interface _ComVisibleAttribute _ComVisibleAttribute;

#endif 	

#ifndef ___TypeLibImportClassAttribute_FWD_DEFINED__
#define ___TypeLibImportClassAttribute_FWD_DEFINED__
typedef interface _TypeLibImportClassAttribute _TypeLibImportClassAttribute;

#endif 	

#ifndef ___LCIDConversionAttribute_FWD_DEFINED__
#define ___LCIDConversionAttribute_FWD_DEFINED__
typedef interface _LCIDConversionAttribute _LCIDConversionAttribute;

#endif 	

#ifndef ___ComRegisterFunctionAttribute_FWD_DEFINED__
#define ___ComRegisterFunctionAttribute_FWD_DEFINED__
typedef interface _ComRegisterFunctionAttribute _ComRegisterFunctionAttribute;

#endif 	

#ifndef ___ComUnregisterFunctionAttribute_FWD_DEFINED__
#define ___ComUnregisterFunctionAttribute_FWD_DEFINED__
typedef interface _ComUnregisterFunctionAttribute _ComUnregisterFunctionAttribute;

#endif 	

#ifndef ___ProgIdAttribute_FWD_DEFINED__
#define ___ProgIdAttribute_FWD_DEFINED__
typedef interface _ProgIdAttribute _ProgIdAttribute;

#endif 	

#ifndef ___ImportedFromTypeLibAttribute_FWD_DEFINED__
#define ___ImportedFromTypeLibAttribute_FWD_DEFINED__
typedef interface _ImportedFromTypeLibAttribute _ImportedFromTypeLibAttribute;

#endif 	

#ifndef ___IDispatchImplAttribute_FWD_DEFINED__
#define ___IDispatchImplAttribute_FWD_DEFINED__
typedef interface _IDispatchImplAttribute _IDispatchImplAttribute;

#endif 	

#ifndef ___ComSourceInterfacesAttribute_FWD_DEFINED__
#define ___ComSourceInterfacesAttribute_FWD_DEFINED__
typedef interface _ComSourceInterfacesAttribute _ComSourceInterfacesAttribute;

#endif 	

#ifndef ___ComConversionLossAttribute_FWD_DEFINED__
#define ___ComConversionLossAttribute_FWD_DEFINED__
typedef interface _ComConversionLossAttribute _ComConversionLossAttribute;

#endif 	

#ifndef ___TypeLibTypeAttribute_FWD_DEFINED__
#define ___TypeLibTypeAttribute_FWD_DEFINED__
typedef interface _TypeLibTypeAttribute _TypeLibTypeAttribute;

#endif 	

#ifndef ___TypeLibFuncAttribute_FWD_DEFINED__
#define ___TypeLibFuncAttribute_FWD_DEFINED__
typedef interface _TypeLibFuncAttribute _TypeLibFuncAttribute;

#endif 	

#ifndef ___TypeLibVarAttribute_FWD_DEFINED__
#define ___TypeLibVarAttribute_FWD_DEFINED__
typedef interface _TypeLibVarAttribute _TypeLibVarAttribute;

#endif 	

#ifndef ___MarshalAsAttribute_FWD_DEFINED__
#define ___MarshalAsAttribute_FWD_DEFINED__
typedef interface _MarshalAsAttribute _MarshalAsAttribute;

#endif 	

#ifndef ___ComImportAttribute_FWD_DEFINED__
#define ___ComImportAttribute_FWD_DEFINED__
typedef interface _ComImportAttribute _ComImportAttribute;

#endif 	

#ifndef ___GuidAttribute_FWD_DEFINED__
#define ___GuidAttribute_FWD_DEFINED__
typedef interface _GuidAttribute _GuidAttribute;

#endif 	

#ifndef ___PreserveSigAttribute_FWD_DEFINED__
#define ___PreserveSigAttribute_FWD_DEFINED__
typedef interface _PreserveSigAttribute _PreserveSigAttribute;

#endif 	

#ifndef ___InAttribute_FWD_DEFINED__
#define ___InAttribute_FWD_DEFINED__
typedef interface _InAttribute _InAttribute;

#endif 	

#ifndef ___OutAttribute_FWD_DEFINED__
#define ___OutAttribute_FWD_DEFINED__
typedef interface _OutAttribute _OutAttribute;

#endif 	

#ifndef ___OptionalAttribute_FWD_DEFINED__
#define ___OptionalAttribute_FWD_DEFINED__
typedef interface _OptionalAttribute _OptionalAttribute;

#endif 	

#ifndef ___DllImportAttribute_FWD_DEFINED__
#define ___DllImportAttribute_FWD_DEFINED__
typedef interface _DllImportAttribute _DllImportAttribute;

#endif 	

#ifndef ___StructLayoutAttribute_FWD_DEFINED__
#define ___StructLayoutAttribute_FWD_DEFINED__
typedef interface _StructLayoutAttribute _StructLayoutAttribute;

#endif 	

#ifndef ___FieldOffsetAttribute_FWD_DEFINED__
#define ___FieldOffsetAttribute_FWD_DEFINED__
typedef interface _FieldOffsetAttribute _FieldOffsetAttribute;

#endif 	

#ifndef ___ComAliasNameAttribute_FWD_DEFINED__
#define ___ComAliasNameAttribute_FWD_DEFINED__
typedef interface _ComAliasNameAttribute _ComAliasNameAttribute;

#endif 	

#ifndef ___AutomationProxyAttribute_FWD_DEFINED__
#define ___AutomationProxyAttribute_FWD_DEFINED__
typedef interface _AutomationProxyAttribute _AutomationProxyAttribute;

#endif 	

#ifndef ___PrimaryInteropAssemblyAttribute_FWD_DEFINED__
#define ___PrimaryInteropAssemblyAttribute_FWD_DEFINED__
typedef interface _PrimaryInteropAssemblyAttribute _PrimaryInteropAssemblyAttribute;

#endif 	

#ifndef ___CoClassAttribute_FWD_DEFINED__
#define ___CoClassAttribute_FWD_DEFINED__
typedef interface _CoClassAttribute _CoClassAttribute;

#endif 	

#ifndef ___ComEventInterfaceAttribute_FWD_DEFINED__
#define ___ComEventInterfaceAttribute_FWD_DEFINED__
typedef interface _ComEventInterfaceAttribute _ComEventInterfaceAttribute;

#endif 	

#ifndef ___TypeLibVersionAttribute_FWD_DEFINED__
#define ___TypeLibVersionAttribute_FWD_DEFINED__
typedef interface _TypeLibVersionAttribute _TypeLibVersionAttribute;

#endif 	

#ifndef ___ComCompatibleVersionAttribute_FWD_DEFINED__
#define ___ComCompatibleVersionAttribute_FWD_DEFINED__
typedef interface _ComCompatibleVersionAttribute _ComCompatibleVersionAttribute;

#endif 	

#ifndef ___BestFitMappingAttribute_FWD_DEFINED__
#define ___BestFitMappingAttribute_FWD_DEFINED__
typedef interface _BestFitMappingAttribute _BestFitMappingAttribute;

#endif 	

#ifndef ___DefaultCharSetAttribute_FWD_DEFINED__
#define ___DefaultCharSetAttribute_FWD_DEFINED__
typedef interface _DefaultCharSetAttribute _DefaultCharSetAttribute;

#endif 	

#ifndef ___SetWin32ContextInIDispatchAttribute_FWD_DEFINED__
#define ___SetWin32ContextInIDispatchAttribute_FWD_DEFINED__
typedef interface _SetWin32ContextInIDispatchAttribute _SetWin32ContextInIDispatchAttribute;

#endif 	

#ifndef ___ExternalException_FWD_DEFINED__
#define ___ExternalException_FWD_DEFINED__
typedef interface _ExternalException _ExternalException;

#endif 	

#ifndef ___COMException_FWD_DEFINED__
#define ___COMException_FWD_DEFINED__
typedef interface _COMException _COMException;

#endif 	

#ifndef ___InvalidOleVariantTypeException_FWD_DEFINED__
#define ___InvalidOleVariantTypeException_FWD_DEFINED__
typedef interface _InvalidOleVariantTypeException _InvalidOleVariantTypeException;

#endif 	

#ifndef ___MarshalDirectiveException_FWD_DEFINED__
#define ___MarshalDirectiveException_FWD_DEFINED__
typedef interface _MarshalDirectiveException _MarshalDirectiveException;

#endif 	

#ifndef ___RuntimeEnvironment_FWD_DEFINED__
#define ___RuntimeEnvironment_FWD_DEFINED__
typedef interface _RuntimeEnvironment _RuntimeEnvironment;

#endif 	

#ifndef ___SEHException_FWD_DEFINED__
#define ___SEHException_FWD_DEFINED__
typedef interface _SEHException _SEHException;

#endif 	

#ifndef ___BStrWrapper_FWD_DEFINED__
#define ___BStrWrapper_FWD_DEFINED__
typedef interface _BStrWrapper _BStrWrapper;

#endif 	

#ifndef ___CurrencyWrapper_FWD_DEFINED__
#define ___CurrencyWrapper_FWD_DEFINED__
typedef interface _CurrencyWrapper _CurrencyWrapper;

#endif 	

#ifndef ___DispatchWrapper_FWD_DEFINED__
#define ___DispatchWrapper_FWD_DEFINED__
typedef interface _DispatchWrapper _DispatchWrapper;

#endif 	

#ifndef ___ErrorWrapper_FWD_DEFINED__
#define ___ErrorWrapper_FWD_DEFINED__
typedef interface _ErrorWrapper _ErrorWrapper;

#endif 	

#ifndef ___ExtensibleClassFactory_FWD_DEFINED__
#define ___ExtensibleClassFactory_FWD_DEFINED__
typedef interface _ExtensibleClassFactory _ExtensibleClassFactory;

#endif 	

#ifndef ___InvalidComObjectException_FWD_DEFINED__
#define ___InvalidComObjectException_FWD_DEFINED__
typedef interface _InvalidComObjectException _InvalidComObjectException;

#endif 	

#ifndef ___ObjectCreationDelegate_FWD_DEFINED__
#define ___ObjectCreationDelegate_FWD_DEFINED__
typedef interface _ObjectCreationDelegate _ObjectCreationDelegate;

#endif 	

#ifndef ___SafeArrayRankMismatchException_FWD_DEFINED__
#define ___SafeArrayRankMismatchException_FWD_DEFINED__
typedef interface _SafeArrayRankMismatchException _SafeArrayRankMismatchException;

#endif 	

#ifndef ___SafeArrayTypeMismatchException_FWD_DEFINED__
#define ___SafeArrayTypeMismatchException_FWD_DEFINED__
typedef interface _SafeArrayTypeMismatchException _SafeArrayTypeMismatchException;

#endif 	

#ifndef ___UnknownWrapper_FWD_DEFINED__
#define ___UnknownWrapper_FWD_DEFINED__
typedef interface _UnknownWrapper _UnknownWrapper;

#endif 	

#ifndef ___Stream_FWD_DEFINED__
#define ___Stream_FWD_DEFINED__
typedef interface _Stream _Stream;

#endif 	

#ifndef ___BinaryReader_FWD_DEFINED__
#define ___BinaryReader_FWD_DEFINED__
typedef interface _BinaryReader _BinaryReader;

#endif 	

#ifndef ___BinaryWriter_FWD_DEFINED__
#define ___BinaryWriter_FWD_DEFINED__
typedef interface _BinaryWriter _BinaryWriter;

#endif 	

#ifndef ___BufferedStream_FWD_DEFINED__
#define ___BufferedStream_FWD_DEFINED__
typedef interface _BufferedStream _BufferedStream;

#endif 	

#ifndef ___Directory_FWD_DEFINED__
#define ___Directory_FWD_DEFINED__
typedef interface _Directory _Directory;

#endif 	

#ifndef ___FileSystemInfo_FWD_DEFINED__
#define ___FileSystemInfo_FWD_DEFINED__
typedef interface _FileSystemInfo _FileSystemInfo;

#endif 	

#ifndef ___DirectoryInfo_FWD_DEFINED__
#define ___DirectoryInfo_FWD_DEFINED__
typedef interface _DirectoryInfo _DirectoryInfo;

#endif 	

#ifndef ___IOException_FWD_DEFINED__
#define ___IOException_FWD_DEFINED__
typedef interface _IOException _IOException;

#endif 	

#ifndef ___DirectoryNotFoundException_FWD_DEFINED__
#define ___DirectoryNotFoundException_FWD_DEFINED__
typedef interface _DirectoryNotFoundException _DirectoryNotFoundException;

#endif 	

#ifndef ___DriveInfo_FWD_DEFINED__
#define ___DriveInfo_FWD_DEFINED__
typedef interface _DriveInfo _DriveInfo;

#endif 	

#ifndef ___DriveNotFoundException_FWD_DEFINED__
#define ___DriveNotFoundException_FWD_DEFINED__
typedef interface _DriveNotFoundException _DriveNotFoundException;

#endif 	

#ifndef ___EndOfStreamException_FWD_DEFINED__
#define ___EndOfStreamException_FWD_DEFINED__
typedef interface _EndOfStreamException _EndOfStreamException;

#endif 	

#ifndef ___File_FWD_DEFINED__
#define ___File_FWD_DEFINED__
typedef interface _File _File;

#endif 	

#ifndef ___FileInfo_FWD_DEFINED__
#define ___FileInfo_FWD_DEFINED__
typedef interface _FileInfo _FileInfo;

#endif 	

#ifndef ___FileLoadException_FWD_DEFINED__
#define ___FileLoadException_FWD_DEFINED__
typedef interface _FileLoadException _FileLoadException;

#endif 	

#ifndef ___FileNotFoundException_FWD_DEFINED__
#define ___FileNotFoundException_FWD_DEFINED__
typedef interface _FileNotFoundException _FileNotFoundException;

#endif 	

#ifndef ___FileStream_FWD_DEFINED__
#define ___FileStream_FWD_DEFINED__
typedef interface _FileStream _FileStream;

#endif 	

#ifndef ___MemoryStream_FWD_DEFINED__
#define ___MemoryStream_FWD_DEFINED__
typedef interface _MemoryStream _MemoryStream;

#endif 	

#ifndef ___Path_FWD_DEFINED__
#define ___Path_FWD_DEFINED__
typedef interface _Path _Path;

#endif 	

#ifndef ___PathTooLongException_FWD_DEFINED__
#define ___PathTooLongException_FWD_DEFINED__
typedef interface _PathTooLongException _PathTooLongException;

#endif 	

#ifndef ___TextReader_FWD_DEFINED__
#define ___TextReader_FWD_DEFINED__
typedef interface _TextReader _TextReader;

#endif 	

#ifndef ___StreamReader_FWD_DEFINED__
#define ___StreamReader_FWD_DEFINED__
typedef interface _StreamReader _StreamReader;

#endif 	

#ifndef ___TextWriter_FWD_DEFINED__
#define ___TextWriter_FWD_DEFINED__
typedef interface _TextWriter _TextWriter;

#endif 	

#ifndef ___StreamWriter_FWD_DEFINED__
#define ___StreamWriter_FWD_DEFINED__
typedef interface _StreamWriter _StreamWriter;

#endif 	

#ifndef ___StringReader_FWD_DEFINED__
#define ___StringReader_FWD_DEFINED__
typedef interface _StringReader _StringReader;

#endif 	

#ifndef ___StringWriter_FWD_DEFINED__
#define ___StringWriter_FWD_DEFINED__
typedef interface _StringWriter _StringWriter;

#endif 	

#ifndef ___AccessedThroughPropertyAttribute_FWD_DEFINED__
#define ___AccessedThroughPropertyAttribute_FWD_DEFINED__
typedef interface _AccessedThroughPropertyAttribute _AccessedThroughPropertyAttribute;

#endif 	

#ifndef ___CallConvCdecl_FWD_DEFINED__
#define ___CallConvCdecl_FWD_DEFINED__
typedef interface _CallConvCdecl _CallConvCdecl;

#endif 	

#ifndef ___CallConvStdcall_FWD_DEFINED__
#define ___CallConvStdcall_FWD_DEFINED__
typedef interface _CallConvStdcall _CallConvStdcall;

#endif 	

#ifndef ___CallConvThiscall_FWD_DEFINED__
#define ___CallConvThiscall_FWD_DEFINED__
typedef interface _CallConvThiscall _CallConvThiscall;

#endif 	

#ifndef ___CallConvFastcall_FWD_DEFINED__
#define ___CallConvFastcall_FWD_DEFINED__
typedef interface _CallConvFastcall _CallConvFastcall;

#endif 	

#ifndef ___CustomConstantAttribute_FWD_DEFINED__
#define ___CustomConstantAttribute_FWD_DEFINED__
typedef interface _CustomConstantAttribute _CustomConstantAttribute;

#endif 	

#ifndef ___DateTimeConstantAttribute_FWD_DEFINED__
#define ___DateTimeConstantAttribute_FWD_DEFINED__
typedef interface _DateTimeConstantAttribute _DateTimeConstantAttribute;

#endif 	

#ifndef ___DiscardableAttribute_FWD_DEFINED__
#define ___DiscardableAttribute_FWD_DEFINED__
typedef interface _DiscardableAttribute _DiscardableAttribute;

#endif 	

#ifndef ___DecimalConstantAttribute_FWD_DEFINED__
#define ___DecimalConstantAttribute_FWD_DEFINED__
typedef interface _DecimalConstantAttribute _DecimalConstantAttribute;

#endif 	

#ifndef ___CompilationRelaxationsAttribute_FWD_DEFINED__
#define ___CompilationRelaxationsAttribute_FWD_DEFINED__
typedef interface _CompilationRelaxationsAttribute _CompilationRelaxationsAttribute;

#endif 	

#ifndef ___CompilerGlobalScopeAttribute_FWD_DEFINED__
#define ___CompilerGlobalScopeAttribute_FWD_DEFINED__
typedef interface _CompilerGlobalScopeAttribute _CompilerGlobalScopeAttribute;

#endif 	

#ifndef ___IndexerNameAttribute_FWD_DEFINED__
#define ___IndexerNameAttribute_FWD_DEFINED__
typedef interface _IndexerNameAttribute _IndexerNameAttribute;

#endif 	

#ifndef ___IsVolatile_FWD_DEFINED__
#define ___IsVolatile_FWD_DEFINED__
typedef interface _IsVolatile _IsVolatile;

#endif 	

#ifndef ___MethodImplAttribute_FWD_DEFINED__
#define ___MethodImplAttribute_FWD_DEFINED__
typedef interface _MethodImplAttribute _MethodImplAttribute;

#endif 	

#ifndef ___RequiredAttributeAttribute_FWD_DEFINED__
#define ___RequiredAttributeAttribute_FWD_DEFINED__
typedef interface _RequiredAttributeAttribute _RequiredAttributeAttribute;

#endif 	

#ifndef ___IsCopyConstructed_FWD_DEFINED__
#define ___IsCopyConstructed_FWD_DEFINED__
typedef interface _IsCopyConstructed _IsCopyConstructed;

#endif 	

#ifndef ___NativeCppClassAttribute_FWD_DEFINED__
#define ___NativeCppClassAttribute_FWD_DEFINED__
typedef interface _NativeCppClassAttribute _NativeCppClassAttribute;

#endif 	

#ifndef ___IDispatchConstantAttribute_FWD_DEFINED__
#define ___IDispatchConstantAttribute_FWD_DEFINED__
typedef interface _IDispatchConstantAttribute _IDispatchConstantAttribute;

#endif 	

#ifndef ___IUnknownConstantAttribute_FWD_DEFINED__
#define ___IUnknownConstantAttribute_FWD_DEFINED__
typedef interface _IUnknownConstantAttribute _IUnknownConstantAttribute;

#endif 	

#ifndef ___SecurityElement_FWD_DEFINED__
#define ___SecurityElement_FWD_DEFINED__
typedef interface _SecurityElement _SecurityElement;

#endif 	

#ifndef ___XmlSyntaxException_FWD_DEFINED__
#define ___XmlSyntaxException_FWD_DEFINED__
typedef interface _XmlSyntaxException _XmlSyntaxException;

#endif 	

#ifndef ___CodeAccessPermission_FWD_DEFINED__
#define ___CodeAccessPermission_FWD_DEFINED__
typedef interface _CodeAccessPermission _CodeAccessPermission;

#endif 	

#ifndef ___EnvironmentPermission_FWD_DEFINED__
#define ___EnvironmentPermission_FWD_DEFINED__
typedef interface _EnvironmentPermission _EnvironmentPermission;

#endif 	

#ifndef ___FileDialogPermission_FWD_DEFINED__
#define ___FileDialogPermission_FWD_DEFINED__
typedef interface _FileDialogPermission _FileDialogPermission;

#endif 	

#ifndef ___FileIOPermission_FWD_DEFINED__
#define ___FileIOPermission_FWD_DEFINED__
typedef interface _FileIOPermission _FileIOPermission;

#endif 	

#ifndef ___SecurityAttribute_FWD_DEFINED__
#define ___SecurityAttribute_FWD_DEFINED__
typedef interface _SecurityAttribute _SecurityAttribute;

#endif 	

#ifndef ___CodeAccessSecurityAttribute_FWD_DEFINED__
#define ___CodeAccessSecurityAttribute_FWD_DEFINED__
typedef interface _CodeAccessSecurityAttribute _CodeAccessSecurityAttribute;

#endif 	

#ifndef ___HostProtectionAttribute_FWD_DEFINED__
#define ___HostProtectionAttribute_FWD_DEFINED__
typedef interface _HostProtectionAttribute _HostProtectionAttribute;

#endif 	

#ifndef ___IsolatedStoragePermission_FWD_DEFINED__
#define ___IsolatedStoragePermission_FWD_DEFINED__
typedef interface _IsolatedStoragePermission _IsolatedStoragePermission;

#endif 	

#ifndef ___IsolatedStorageFilePermission_FWD_DEFINED__
#define ___IsolatedStorageFilePermission_FWD_DEFINED__
typedef interface _IsolatedStorageFilePermission _IsolatedStorageFilePermission;

#endif 	

#ifndef ___EnvironmentPermissionAttribute_FWD_DEFINED__
#define ___EnvironmentPermissionAttribute_FWD_DEFINED__
typedef interface _EnvironmentPermissionAttribute _EnvironmentPermissionAttribute;

#endif 	

#ifndef ___FileDialogPermissionAttribute_FWD_DEFINED__
#define ___FileDialogPermissionAttribute_FWD_DEFINED__
typedef interface _FileDialogPermissionAttribute _FileDialogPermissionAttribute;

#endif 	

#ifndef ___FileIOPermissionAttribute_FWD_DEFINED__
#define ___FileIOPermissionAttribute_FWD_DEFINED__
typedef interface _FileIOPermissionAttribute _FileIOPermissionAttribute;

#endif 	

#ifndef ___KeyContainerPermissionAttribute_FWD_DEFINED__
#define ___KeyContainerPermissionAttribute_FWD_DEFINED__
typedef interface _KeyContainerPermissionAttribute _KeyContainerPermissionAttribute;

#endif 	

#ifndef ___PrincipalPermissionAttribute_FWD_DEFINED__
#define ___PrincipalPermissionAttribute_FWD_DEFINED__
typedef interface _PrincipalPermissionAttribute _PrincipalPermissionAttribute;

#endif 	

#ifndef ___ReflectionPermissionAttribute_FWD_DEFINED__
#define ___ReflectionPermissionAttribute_FWD_DEFINED__
typedef interface _ReflectionPermissionAttribute _ReflectionPermissionAttribute;

#endif 	

#ifndef ___RegistryPermissionAttribute_FWD_DEFINED__
#define ___RegistryPermissionAttribute_FWD_DEFINED__
typedef interface _RegistryPermissionAttribute _RegistryPermissionAttribute;

#endif 	

#ifndef ___SecurityPermissionAttribute_FWD_DEFINED__
#define ___SecurityPermissionAttribute_FWD_DEFINED__
typedef interface _SecurityPermissionAttribute _SecurityPermissionAttribute;

#endif 	

#ifndef ___UIPermissionAttribute_FWD_DEFINED__
#define ___UIPermissionAttribute_FWD_DEFINED__
typedef interface _UIPermissionAttribute _UIPermissionAttribute;

#endif 	

#ifndef ___ZoneIdentityPermissionAttribute_FWD_DEFINED__
#define ___ZoneIdentityPermissionAttribute_FWD_DEFINED__
typedef interface _ZoneIdentityPermissionAttribute _ZoneIdentityPermissionAttribute;

#endif 	

#ifndef ___StrongNameIdentityPermissionAttribute_FWD_DEFINED__
#define ___StrongNameIdentityPermissionAttribute_FWD_DEFINED__
typedef interface _StrongNameIdentityPermissionAttribute _StrongNameIdentityPermissionAttribute;

#endif 	

#ifndef ___SiteIdentityPermissionAttribute_FWD_DEFINED__
#define ___SiteIdentityPermissionAttribute_FWD_DEFINED__
typedef interface _SiteIdentityPermissionAttribute _SiteIdentityPermissionAttribute;

#endif 	

#ifndef ___UrlIdentityPermissionAttribute_FWD_DEFINED__
#define ___UrlIdentityPermissionAttribute_FWD_DEFINED__
typedef interface _UrlIdentityPermissionAttribute _UrlIdentityPermissionAttribute;

#endif 	

#ifndef ___PublisherIdentityPermissionAttribute_FWD_DEFINED__
#define ___PublisherIdentityPermissionAttribute_FWD_DEFINED__
typedef interface _PublisherIdentityPermissionAttribute _PublisherIdentityPermissionAttribute;

#endif 	

#ifndef ___IsolatedStoragePermissionAttribute_FWD_DEFINED__
#define ___IsolatedStoragePermissionAttribute_FWD_DEFINED__
typedef interface _IsolatedStoragePermissionAttribute _IsolatedStoragePermissionAttribute;

#endif 	

#ifndef ___IsolatedStorageFilePermissionAttribute_FWD_DEFINED__
#define ___IsolatedStorageFilePermissionAttribute_FWD_DEFINED__
typedef interface _IsolatedStorageFilePermissionAttribute _IsolatedStorageFilePermissionAttribute;

#endif 	

#ifndef ___PermissionSetAttribute_FWD_DEFINED__
#define ___PermissionSetAttribute_FWD_DEFINED__
typedef interface _PermissionSetAttribute _PermissionSetAttribute;

#endif 	

#ifndef ___ReflectionPermission_FWD_DEFINED__
#define ___ReflectionPermission_FWD_DEFINED__
typedef interface _ReflectionPermission _ReflectionPermission;

#endif 	

#ifndef ___PrincipalPermission_FWD_DEFINED__
#define ___PrincipalPermission_FWD_DEFINED__
typedef interface _PrincipalPermission _PrincipalPermission;

#endif 	

#ifndef ___SecurityPermission_FWD_DEFINED__
#define ___SecurityPermission_FWD_DEFINED__
typedef interface _SecurityPermission _SecurityPermission;

#endif 	

#ifndef ___SiteIdentityPermission_FWD_DEFINED__
#define ___SiteIdentityPermission_FWD_DEFINED__
typedef interface _SiteIdentityPermission _SiteIdentityPermission;

#endif 	

#ifndef ___StrongNameIdentityPermission_FWD_DEFINED__
#define ___StrongNameIdentityPermission_FWD_DEFINED__
typedef interface _StrongNameIdentityPermission _StrongNameIdentityPermission;

#endif 	

#ifndef ___StrongNamePublicKeyBlob_FWD_DEFINED__
#define ___StrongNamePublicKeyBlob_FWD_DEFINED__
typedef interface _StrongNamePublicKeyBlob _StrongNamePublicKeyBlob;

#endif 	

#ifndef ___UIPermission_FWD_DEFINED__
#define ___UIPermission_FWD_DEFINED__
typedef interface _UIPermission _UIPermission;

#endif 	

#ifndef ___UrlIdentityPermission_FWD_DEFINED__
#define ___UrlIdentityPermission_FWD_DEFINED__
typedef interface _UrlIdentityPermission _UrlIdentityPermission;

#endif 	

#ifndef ___ZoneIdentityPermission_FWD_DEFINED__
#define ___ZoneIdentityPermission_FWD_DEFINED__
typedef interface _ZoneIdentityPermission _ZoneIdentityPermission;

#endif 	

#ifndef ___GacIdentityPermissionAttribute_FWD_DEFINED__
#define ___GacIdentityPermissionAttribute_FWD_DEFINED__
typedef interface _GacIdentityPermissionAttribute _GacIdentityPermissionAttribute;

#endif 	

#ifndef ___GacIdentityPermission_FWD_DEFINED__
#define ___GacIdentityPermission_FWD_DEFINED__
typedef interface _GacIdentityPermission _GacIdentityPermission;

#endif 	

#ifndef ___KeyContainerPermissionAccessEntry_FWD_DEFINED__
#define ___KeyContainerPermissionAccessEntry_FWD_DEFINED__
typedef interface _KeyContainerPermissionAccessEntry _KeyContainerPermissionAccessEntry;

#endif 	

#ifndef ___KeyContainerPermissionAccessEntryCollection_FWD_DEFINED__
#define ___KeyContainerPermissionAccessEntryCollection_FWD_DEFINED__
typedef interface _KeyContainerPermissionAccessEntryCollection _KeyContainerPermissionAccessEntryCollection;

#endif 	

#ifndef ___KeyContainerPermissionAccessEntryEnumerator_FWD_DEFINED__
#define ___KeyContainerPermissionAccessEntryEnumerator_FWD_DEFINED__
typedef interface _KeyContainerPermissionAccessEntryEnumerator _KeyContainerPermissionAccessEntryEnumerator;

#endif 	

#ifndef ___KeyContainerPermission_FWD_DEFINED__
#define ___KeyContainerPermission_FWD_DEFINED__
typedef interface _KeyContainerPermission _KeyContainerPermission;

#endif 	

#ifndef ___PublisherIdentityPermission_FWD_DEFINED__
#define ___PublisherIdentityPermission_FWD_DEFINED__
typedef interface _PublisherIdentityPermission _PublisherIdentityPermission;

#endif 	

#ifndef ___RegistryPermission_FWD_DEFINED__
#define ___RegistryPermission_FWD_DEFINED__
typedef interface _RegistryPermission _RegistryPermission;

#endif 	

#ifndef ___SuppressUnmanagedCodeSecurityAttribute_FWD_DEFINED__
#define ___SuppressUnmanagedCodeSecurityAttribute_FWD_DEFINED__
typedef interface _SuppressUnmanagedCodeSecurityAttribute _SuppressUnmanagedCodeSecurityAttribute;

#endif 	

#ifndef ___UnverifiableCodeAttribute_FWD_DEFINED__
#define ___UnverifiableCodeAttribute_FWD_DEFINED__
typedef interface _UnverifiableCodeAttribute _UnverifiableCodeAttribute;

#endif 	

#ifndef ___AllowPartiallyTrustedCallersAttribute_FWD_DEFINED__
#define ___AllowPartiallyTrustedCallersAttribute_FWD_DEFINED__
typedef interface _AllowPartiallyTrustedCallersAttribute _AllowPartiallyTrustedCallersAttribute;

#endif 	

#ifndef ___HostSecurityManager_FWD_DEFINED__
#define ___HostSecurityManager_FWD_DEFINED__
typedef interface _HostSecurityManager _HostSecurityManager;

#endif 	

#ifndef ___PermissionSet_FWD_DEFINED__
#define ___PermissionSet_FWD_DEFINED__
typedef interface _PermissionSet _PermissionSet;

#endif 	

#ifndef ___NamedPermissionSet_FWD_DEFINED__
#define ___NamedPermissionSet_FWD_DEFINED__
typedef interface _NamedPermissionSet _NamedPermissionSet;

#endif 	

#ifndef ___SecurityException_FWD_DEFINED__
#define ___SecurityException_FWD_DEFINED__
typedef interface _SecurityException _SecurityException;

#endif 	

#ifndef ___HostProtectionException_FWD_DEFINED__
#define ___HostProtectionException_FWD_DEFINED__
typedef interface _HostProtectionException _HostProtectionException;

#endif 	

#ifndef ___SecurityManager_FWD_DEFINED__
#define ___SecurityManager_FWD_DEFINED__
typedef interface _SecurityManager _SecurityManager;

#endif 	

#ifndef ___VerificationException_FWD_DEFINED__
#define ___VerificationException_FWD_DEFINED__
typedef interface _VerificationException _VerificationException;

#endif 	

#ifndef ___ContextAttribute_FWD_DEFINED__
#define ___ContextAttribute_FWD_DEFINED__
typedef interface _ContextAttribute _ContextAttribute;

#endif 	

#ifndef ___AsyncResult_FWD_DEFINED__
#define ___AsyncResult_FWD_DEFINED__
typedef interface _AsyncResult _AsyncResult;

#endif 	

#ifndef ___CallContext_FWD_DEFINED__
#define ___CallContext_FWD_DEFINED__
typedef interface _CallContext _CallContext;

#endif 	

#ifndef ___LogicalCallContext_FWD_DEFINED__
#define ___LogicalCallContext_FWD_DEFINED__
typedef interface _LogicalCallContext _LogicalCallContext;

#endif 	

#ifndef ___ChannelServices_FWD_DEFINED__
#define ___ChannelServices_FWD_DEFINED__
typedef interface _ChannelServices _ChannelServices;

#endif 	

#ifndef ___ClientChannelSinkStack_FWD_DEFINED__
#define ___ClientChannelSinkStack_FWD_DEFINED__
typedef interface _ClientChannelSinkStack _ClientChannelSinkStack;

#endif 	

#ifndef ___ServerChannelSinkStack_FWD_DEFINED__
#define ___ServerChannelSinkStack_FWD_DEFINED__
typedef interface _ServerChannelSinkStack _ServerChannelSinkStack;

#endif 	

#ifndef ___ClientSponsor_FWD_DEFINED__
#define ___ClientSponsor_FWD_DEFINED__
typedef interface _ClientSponsor _ClientSponsor;

#endif 	

#ifndef ___CrossContextDelegate_FWD_DEFINED__
#define ___CrossContextDelegate_FWD_DEFINED__
typedef interface _CrossContextDelegate _CrossContextDelegate;

#endif 	

#ifndef ___Context_FWD_DEFINED__
#define ___Context_FWD_DEFINED__
typedef interface _Context _Context;

#endif 	

#ifndef ___ContextProperty_FWD_DEFINED__
#define ___ContextProperty_FWD_DEFINED__
typedef interface _ContextProperty _ContextProperty;

#endif 	

#ifndef ___EnterpriseServicesHelper_FWD_DEFINED__
#define ___EnterpriseServicesHelper_FWD_DEFINED__
typedef interface _EnterpriseServicesHelper _EnterpriseServicesHelper;

#endif 	

#ifndef ___Header_FWD_DEFINED__
#define ___Header_FWD_DEFINED__
typedef interface _Header _Header;

#endif 	

#ifndef ___HeaderHandler_FWD_DEFINED__
#define ___HeaderHandler_FWD_DEFINED__
typedef interface _HeaderHandler _HeaderHandler;

#endif 	

#ifndef ___ChannelDataStore_FWD_DEFINED__
#define ___ChannelDataStore_FWD_DEFINED__
typedef interface _ChannelDataStore _ChannelDataStore;

#endif 	

#ifndef ___TransportHeaders_FWD_DEFINED__
#define ___TransportHeaders_FWD_DEFINED__
typedef interface _TransportHeaders _TransportHeaders;

#endif 	

#ifndef ___SinkProviderData_FWD_DEFINED__
#define ___SinkProviderData_FWD_DEFINED__
typedef interface _SinkProviderData _SinkProviderData;

#endif 	

#ifndef ___BaseChannelObjectWithProperties_FWD_DEFINED__
#define ___BaseChannelObjectWithProperties_FWD_DEFINED__
typedef interface _BaseChannelObjectWithProperties _BaseChannelObjectWithProperties;

#endif 	

#ifndef ___BaseChannelSinkWithProperties_FWD_DEFINED__
#define ___BaseChannelSinkWithProperties_FWD_DEFINED__
typedef interface _BaseChannelSinkWithProperties _BaseChannelSinkWithProperties;

#endif 	

#ifndef ___BaseChannelWithProperties_FWD_DEFINED__
#define ___BaseChannelWithProperties_FWD_DEFINED__
typedef interface _BaseChannelWithProperties _BaseChannelWithProperties;

#endif 	

#ifndef ___LifetimeServices_FWD_DEFINED__
#define ___LifetimeServices_FWD_DEFINED__
typedef interface _LifetimeServices _LifetimeServices;

#endif 	

#ifndef ___ReturnMessage_FWD_DEFINED__
#define ___ReturnMessage_FWD_DEFINED__
typedef interface _ReturnMessage _ReturnMessage;

#endif 	

#ifndef ___MethodCall_FWD_DEFINED__
#define ___MethodCall_FWD_DEFINED__
typedef interface _MethodCall _MethodCall;

#endif 	

#ifndef ___ConstructionCall_FWD_DEFINED__
#define ___ConstructionCall_FWD_DEFINED__
typedef interface _ConstructionCall _ConstructionCall;

#endif 	

#ifndef ___MethodResponse_FWD_DEFINED__
#define ___MethodResponse_FWD_DEFINED__
typedef interface _MethodResponse _MethodResponse;

#endif 	

#ifndef ___ConstructionResponse_FWD_DEFINED__
#define ___ConstructionResponse_FWD_DEFINED__
typedef interface _ConstructionResponse _ConstructionResponse;

#endif 	

#ifndef ___InternalMessageWrapper_FWD_DEFINED__
#define ___InternalMessageWrapper_FWD_DEFINED__
typedef interface _InternalMessageWrapper _InternalMessageWrapper;

#endif 	

#ifndef ___MethodCallMessageWrapper_FWD_DEFINED__
#define ___MethodCallMessageWrapper_FWD_DEFINED__
typedef interface _MethodCallMessageWrapper _MethodCallMessageWrapper;

#endif 	

#ifndef ___MethodReturnMessageWrapper_FWD_DEFINED__
#define ___MethodReturnMessageWrapper_FWD_DEFINED__
typedef interface _MethodReturnMessageWrapper _MethodReturnMessageWrapper;

#endif 	

#ifndef ___ObjectHandle_FWD_DEFINED__
#define ___ObjectHandle_FWD_DEFINED__
typedef interface _ObjectHandle _ObjectHandle;

#endif 	

#ifndef ___ObjRef_FWD_DEFINED__
#define ___ObjRef_FWD_DEFINED__
typedef interface _ObjRef _ObjRef;

#endif 	

#ifndef ___OneWayAttribute_FWD_DEFINED__
#define ___OneWayAttribute_FWD_DEFINED__
typedef interface _OneWayAttribute _OneWayAttribute;

#endif 	

#ifndef ___ProxyAttribute_FWD_DEFINED__
#define ___ProxyAttribute_FWD_DEFINED__
typedef interface _ProxyAttribute _ProxyAttribute;

#endif 	

#ifndef ___RealProxy_FWD_DEFINED__
#define ___RealProxy_FWD_DEFINED__
typedef interface _RealProxy _RealProxy;

#endif 	

#ifndef ___SoapAttribute_FWD_DEFINED__
#define ___SoapAttribute_FWD_DEFINED__
typedef interface _SoapAttribute _SoapAttribute;

#endif 	

#ifndef ___SoapTypeAttribute_FWD_DEFINED__
#define ___SoapTypeAttribute_FWD_DEFINED__
typedef interface _SoapTypeAttribute _SoapTypeAttribute;

#endif 	

#ifndef ___SoapMethodAttribute_FWD_DEFINED__
#define ___SoapMethodAttribute_FWD_DEFINED__
typedef interface _SoapMethodAttribute _SoapMethodAttribute;

#endif 	

#ifndef ___SoapFieldAttribute_FWD_DEFINED__
#define ___SoapFieldAttribute_FWD_DEFINED__
typedef interface _SoapFieldAttribute _SoapFieldAttribute;

#endif 	

#ifndef ___SoapParameterAttribute_FWD_DEFINED__
#define ___SoapParameterAttribute_FWD_DEFINED__
typedef interface _SoapParameterAttribute _SoapParameterAttribute;

#endif 	

#ifndef ___RemotingConfiguration_FWD_DEFINED__
#define ___RemotingConfiguration_FWD_DEFINED__
typedef interface _RemotingConfiguration _RemotingConfiguration;

#endif 	

#ifndef ___TypeEntry_FWD_DEFINED__
#define ___TypeEntry_FWD_DEFINED__
typedef interface _TypeEntry _TypeEntry;

#endif 	

#ifndef ___ActivatedClientTypeEntry_FWD_DEFINED__
#define ___ActivatedClientTypeEntry_FWD_DEFINED__
typedef interface _ActivatedClientTypeEntry _ActivatedClientTypeEntry;

#endif 	

#ifndef ___ActivatedServiceTypeEntry_FWD_DEFINED__
#define ___ActivatedServiceTypeEntry_FWD_DEFINED__
typedef interface _ActivatedServiceTypeEntry _ActivatedServiceTypeEntry;

#endif 	

#ifndef ___WellKnownClientTypeEntry_FWD_DEFINED__
#define ___WellKnownClientTypeEntry_FWD_DEFINED__
typedef interface _WellKnownClientTypeEntry _WellKnownClientTypeEntry;

#endif 	

#ifndef ___WellKnownServiceTypeEntry_FWD_DEFINED__
#define ___WellKnownServiceTypeEntry_FWD_DEFINED__
typedef interface _WellKnownServiceTypeEntry _WellKnownServiceTypeEntry;

#endif 	

#ifndef ___RemotingException_FWD_DEFINED__
#define ___RemotingException_FWD_DEFINED__
typedef interface _RemotingException _RemotingException;

#endif 	

#ifndef ___ServerException_FWD_DEFINED__
#define ___ServerException_FWD_DEFINED__
typedef interface _ServerException _ServerException;

#endif 	

#ifndef ___RemotingTimeoutException_FWD_DEFINED__
#define ___RemotingTimeoutException_FWD_DEFINED__
typedef interface _RemotingTimeoutException _RemotingTimeoutException;

#endif 	

#ifndef ___RemotingServices_FWD_DEFINED__
#define ___RemotingServices_FWD_DEFINED__
typedef interface _RemotingServices _RemotingServices;

#endif 	

#ifndef ___InternalRemotingServices_FWD_DEFINED__
#define ___InternalRemotingServices_FWD_DEFINED__
typedef interface _InternalRemotingServices _InternalRemotingServices;

#endif 	

#ifndef ___MessageSurrogateFilter_FWD_DEFINED__
#define ___MessageSurrogateFilter_FWD_DEFINED__
typedef interface _MessageSurrogateFilter _MessageSurrogateFilter;

#endif 	

#ifndef ___RemotingSurrogateSelector_FWD_DEFINED__
#define ___RemotingSurrogateSelector_FWD_DEFINED__
typedef interface _RemotingSurrogateSelector _RemotingSurrogateSelector;

#endif 	

#ifndef ___SoapServices_FWD_DEFINED__
#define ___SoapServices_FWD_DEFINED__
typedef interface _SoapServices _SoapServices;

#endif 	

#ifndef ___SoapDateTime_FWD_DEFINED__
#define ___SoapDateTime_FWD_DEFINED__
typedef interface _SoapDateTime _SoapDateTime;

#endif 	

#ifndef ___SoapDuration_FWD_DEFINED__
#define ___SoapDuration_FWD_DEFINED__
typedef interface _SoapDuration _SoapDuration;

#endif 	

#ifndef ___SoapTime_FWD_DEFINED__
#define ___SoapTime_FWD_DEFINED__
typedef interface _SoapTime _SoapTime;

#endif 	

#ifndef ___SoapDate_FWD_DEFINED__
#define ___SoapDate_FWD_DEFINED__
typedef interface _SoapDate _SoapDate;

#endif 	

#ifndef ___SoapYearMonth_FWD_DEFINED__
#define ___SoapYearMonth_FWD_DEFINED__
typedef interface _SoapYearMonth _SoapYearMonth;

#endif 	

#ifndef ___SoapYear_FWD_DEFINED__
#define ___SoapYear_FWD_DEFINED__
typedef interface _SoapYear _SoapYear;

#endif 	

#ifndef ___SoapMonthDay_FWD_DEFINED__
#define ___SoapMonthDay_FWD_DEFINED__
typedef interface _SoapMonthDay _SoapMonthDay;

#endif 	

#ifndef ___SoapDay_FWD_DEFINED__
#define ___SoapDay_FWD_DEFINED__
typedef interface _SoapDay _SoapDay;

#endif 	

#ifndef ___SoapMonth_FWD_DEFINED__
#define ___SoapMonth_FWD_DEFINED__
typedef interface _SoapMonth _SoapMonth;

#endif 	

#ifndef ___SoapHexBinary_FWD_DEFINED__
#define ___SoapHexBinary_FWD_DEFINED__
typedef interface _SoapHexBinary _SoapHexBinary;

#endif 	

#ifndef ___SoapBase64Binary_FWD_DEFINED__
#define ___SoapBase64Binary_FWD_DEFINED__
typedef interface _SoapBase64Binary _SoapBase64Binary;

#endif 	

#ifndef ___SoapInteger_FWD_DEFINED__
#define ___SoapInteger_FWD_DEFINED__
typedef interface _SoapInteger _SoapInteger;

#endif 	

#ifndef ___SoapPositiveInteger_FWD_DEFINED__
#define ___SoapPositiveInteger_FWD_DEFINED__
typedef interface _SoapPositiveInteger _SoapPositiveInteger;

#endif 	

#ifndef ___SoapNonPositiveInteger_FWD_DEFINED__
#define ___SoapNonPositiveInteger_FWD_DEFINED__
typedef interface _SoapNonPositiveInteger _SoapNonPositiveInteger;

#endif 	

#ifndef ___SoapNonNegativeInteger_FWD_DEFINED__
#define ___SoapNonNegativeInteger_FWD_DEFINED__
typedef interface _SoapNonNegativeInteger _SoapNonNegativeInteger;

#endif 	

#ifndef ___SoapNegativeInteger_FWD_DEFINED__
#define ___SoapNegativeInteger_FWD_DEFINED__
typedef interface _SoapNegativeInteger _SoapNegativeInteger;

#endif 	

#ifndef ___SoapAnyUri_FWD_DEFINED__
#define ___SoapAnyUri_FWD_DEFINED__
typedef interface _SoapAnyUri _SoapAnyUri;

#endif 	

#ifndef ___SoapQName_FWD_DEFINED__
#define ___SoapQName_FWD_DEFINED__
typedef interface _SoapQName _SoapQName;

#endif 	

#ifndef ___SoapNotation_FWD_DEFINED__
#define ___SoapNotation_FWD_DEFINED__
typedef interface _SoapNotation _SoapNotation;

#endif 	

#ifndef ___SoapNormalizedString_FWD_DEFINED__
#define ___SoapNormalizedString_FWD_DEFINED__
typedef interface _SoapNormalizedString _SoapNormalizedString;

#endif 	

#ifndef ___SoapToken_FWD_DEFINED__
#define ___SoapToken_FWD_DEFINED__
typedef interface _SoapToken _SoapToken;

#endif 	

#ifndef ___SoapLanguage_FWD_DEFINED__
#define ___SoapLanguage_FWD_DEFINED__
typedef interface _SoapLanguage _SoapLanguage;

#endif 	

#ifndef ___SoapName_FWD_DEFINED__
#define ___SoapName_FWD_DEFINED__
typedef interface _SoapName _SoapName;

#endif 	

#ifndef ___SoapIdrefs_FWD_DEFINED__
#define ___SoapIdrefs_FWD_DEFINED__
typedef interface _SoapIdrefs _SoapIdrefs;

#endif 	

#ifndef ___SoapEntities_FWD_DEFINED__
#define ___SoapEntities_FWD_DEFINED__
typedef interface _SoapEntities _SoapEntities;

#endif 	

#ifndef ___SoapNmtoken_FWD_DEFINED__
#define ___SoapNmtoken_FWD_DEFINED__
typedef interface _SoapNmtoken _SoapNmtoken;

#endif 	

#ifndef ___SoapNmtokens_FWD_DEFINED__
#define ___SoapNmtokens_FWD_DEFINED__
typedef interface _SoapNmtokens _SoapNmtokens;

#endif 	

#ifndef ___SoapNcName_FWD_DEFINED__
#define ___SoapNcName_FWD_DEFINED__
typedef interface _SoapNcName _SoapNcName;

#endif 	

#ifndef ___SoapId_FWD_DEFINED__
#define ___SoapId_FWD_DEFINED__
typedef interface _SoapId _SoapId;

#endif 	

#ifndef ___SoapIdref_FWD_DEFINED__
#define ___SoapIdref_FWD_DEFINED__
typedef interface _SoapIdref _SoapIdref;

#endif 	

#ifndef ___SoapEntity_FWD_DEFINED__
#define ___SoapEntity_FWD_DEFINED__
typedef interface _SoapEntity _SoapEntity;

#endif 	

#ifndef ___SynchronizationAttribute_FWD_DEFINED__
#define ___SynchronizationAttribute_FWD_DEFINED__
typedef interface _SynchronizationAttribute _SynchronizationAttribute;

#endif 	

#ifndef ___TrackingServices_FWD_DEFINED__
#define ___TrackingServices_FWD_DEFINED__
typedef interface _TrackingServices _TrackingServices;

#endif 	

#ifndef ___UrlAttribute_FWD_DEFINED__
#define ___UrlAttribute_FWD_DEFINED__
typedef interface _UrlAttribute _UrlAttribute;

#endif 	

#ifndef ___IsolatedStorage_FWD_DEFINED__
#define ___IsolatedStorage_FWD_DEFINED__
typedef interface _IsolatedStorage _IsolatedStorage;

#endif 	

#ifndef ___IsolatedStorageFile_FWD_DEFINED__
#define ___IsolatedStorageFile_FWD_DEFINED__
typedef interface _IsolatedStorageFile _IsolatedStorageFile;

#endif 	

#ifndef ___IsolatedStorageFileStream_FWD_DEFINED__
#define ___IsolatedStorageFileStream_FWD_DEFINED__
typedef interface _IsolatedStorageFileStream _IsolatedStorageFileStream;

#endif 	

#ifndef ___IsolatedStorageException_FWD_DEFINED__
#define ___IsolatedStorageException_FWD_DEFINED__
typedef interface _IsolatedStorageException _IsolatedStorageException;

#endif 	

#ifndef ___InternalRM_FWD_DEFINED__
#define ___InternalRM_FWD_DEFINED__
typedef interface _InternalRM _InternalRM;

#endif 	

#ifndef ___InternalST_FWD_DEFINED__
#define ___InternalST_FWD_DEFINED__
typedef interface _InternalST _InternalST;

#endif 	

#ifndef ___SoapMessage_FWD_DEFINED__
#define ___SoapMessage_FWD_DEFINED__
typedef interface _SoapMessage _SoapMessage;

#endif 	

#ifndef ___SoapFault_FWD_DEFINED__
#define ___SoapFault_FWD_DEFINED__
typedef interface _SoapFault _SoapFault;

#endif 	

#ifndef ___ServerFault_FWD_DEFINED__
#define ___ServerFault_FWD_DEFINED__
typedef interface _ServerFault _ServerFault;

#endif 	

#ifndef ___BinaryFormatter_FWD_DEFINED__
#define ___BinaryFormatter_FWD_DEFINED__
typedef interface _BinaryFormatter _BinaryFormatter;

#endif 	

#ifndef ___DynamicILInfo_FWD_DEFINED__
#define ___DynamicILInfo_FWD_DEFINED__
typedef interface _DynamicILInfo _DynamicILInfo;

#endif 	

#ifndef ___DynamicMethod_FWD_DEFINED__
#define ___DynamicMethod_FWD_DEFINED__
typedef interface _DynamicMethod _DynamicMethod;

#endif 	

#ifndef ___OpCodes_FWD_DEFINED__
#define ___OpCodes_FWD_DEFINED__
typedef interface _OpCodes _OpCodes;

#endif 	

#ifndef ___GenericTypeParameterBuilder_FWD_DEFINED__
#define ___GenericTypeParameterBuilder_FWD_DEFINED__
typedef interface _GenericTypeParameterBuilder _GenericTypeParameterBuilder;

#endif 	

#ifndef ___UnmanagedMarshal_FWD_DEFINED__
#define ___UnmanagedMarshal_FWD_DEFINED__
typedef interface _UnmanagedMarshal _UnmanagedMarshal;

#endif 	

#ifndef ___KeySizes_FWD_DEFINED__
#define ___KeySizes_FWD_DEFINED__
typedef interface _KeySizes _KeySizes;

#endif 	

#ifndef ___CryptographicException_FWD_DEFINED__
#define ___CryptographicException_FWD_DEFINED__
typedef interface _CryptographicException _CryptographicException;

#endif 	

#ifndef ___CryptographicUnexpectedOperationException_FWD_DEFINED__
#define ___CryptographicUnexpectedOperationException_FWD_DEFINED__
typedef interface _CryptographicUnexpectedOperationException _CryptographicUnexpectedOperationException;

#endif 	

#ifndef ___RandomNumberGenerator_FWD_DEFINED__
#define ___RandomNumberGenerator_FWD_DEFINED__
typedef interface _RandomNumberGenerator _RandomNumberGenerator;

#endif 	

#ifndef ___RNGCryptoServiceProvider_FWD_DEFINED__
#define ___RNGCryptoServiceProvider_FWD_DEFINED__
typedef interface _RNGCryptoServiceProvider _RNGCryptoServiceProvider;

#endif 	

#ifndef ___AsymmetricAlgorithm_FWD_DEFINED__
#define ___AsymmetricAlgorithm_FWD_DEFINED__
typedef interface _AsymmetricAlgorithm _AsymmetricAlgorithm;

#endif 	

#ifndef ___AsymmetricKeyExchangeDeformatter_FWD_DEFINED__
#define ___AsymmetricKeyExchangeDeformatter_FWD_DEFINED__
typedef interface _AsymmetricKeyExchangeDeformatter _AsymmetricKeyExchangeDeformatter;

#endif 	

#ifndef ___AsymmetricKeyExchangeFormatter_FWD_DEFINED__
#define ___AsymmetricKeyExchangeFormatter_FWD_DEFINED__
typedef interface _AsymmetricKeyExchangeFormatter _AsymmetricKeyExchangeFormatter;

#endif 	

#ifndef ___AsymmetricSignatureDeformatter_FWD_DEFINED__
#define ___AsymmetricSignatureDeformatter_FWD_DEFINED__
typedef interface _AsymmetricSignatureDeformatter _AsymmetricSignatureDeformatter;

#endif 	

#ifndef ___AsymmetricSignatureFormatter_FWD_DEFINED__
#define ___AsymmetricSignatureFormatter_FWD_DEFINED__
typedef interface _AsymmetricSignatureFormatter _AsymmetricSignatureFormatter;

#endif 	

#ifndef ___ToBase64Transform_FWD_DEFINED__
#define ___ToBase64Transform_FWD_DEFINED__
typedef interface _ToBase64Transform _ToBase64Transform;

#endif 	

#ifndef ___FromBase64Transform_FWD_DEFINED__
#define ___FromBase64Transform_FWD_DEFINED__
typedef interface _FromBase64Transform _FromBase64Transform;

#endif 	

#ifndef ___CryptoAPITransform_FWD_DEFINED__
#define ___CryptoAPITransform_FWD_DEFINED__
typedef interface _CryptoAPITransform _CryptoAPITransform;

#endif 	

#ifndef ___CspParameters_FWD_DEFINED__
#define ___CspParameters_FWD_DEFINED__
typedef interface _CspParameters _CspParameters;

#endif 	

#ifndef ___CryptoConfig_FWD_DEFINED__
#define ___CryptoConfig_FWD_DEFINED__
typedef interface _CryptoConfig _CryptoConfig;

#endif 	

#ifndef ___CryptoStream_FWD_DEFINED__
#define ___CryptoStream_FWD_DEFINED__
typedef interface _CryptoStream _CryptoStream;

#endif 	

#ifndef ___SymmetricAlgorithm_FWD_DEFINED__
#define ___SymmetricAlgorithm_FWD_DEFINED__
typedef interface _SymmetricAlgorithm _SymmetricAlgorithm;

#endif 	

#ifndef ___DES_FWD_DEFINED__
#define ___DES_FWD_DEFINED__
typedef interface _DES _DES;

#endif 	

#ifndef ___DESCryptoServiceProvider_FWD_DEFINED__
#define ___DESCryptoServiceProvider_FWD_DEFINED__
typedef interface _DESCryptoServiceProvider _DESCryptoServiceProvider;

#endif 	

#ifndef ___DeriveBytes_FWD_DEFINED__
#define ___DeriveBytes_FWD_DEFINED__
typedef interface _DeriveBytes _DeriveBytes;

#endif 	

#ifndef ___DSA_FWD_DEFINED__
#define ___DSA_FWD_DEFINED__
typedef interface _DSA _DSA;

#endif 	

#ifndef ___DSACryptoServiceProvider_FWD_DEFINED__
#define ___DSACryptoServiceProvider_FWD_DEFINED__
typedef interface _DSACryptoServiceProvider _DSACryptoServiceProvider;

#endif 	

#ifndef ___DSASignatureDeformatter_FWD_DEFINED__
#define ___DSASignatureDeformatter_FWD_DEFINED__
typedef interface _DSASignatureDeformatter _DSASignatureDeformatter;

#endif 	

#ifndef ___DSASignatureFormatter_FWD_DEFINED__
#define ___DSASignatureFormatter_FWD_DEFINED__
typedef interface _DSASignatureFormatter _DSASignatureFormatter;

#endif 	

#ifndef ___HashAlgorithm_FWD_DEFINED__
#define ___HashAlgorithm_FWD_DEFINED__
typedef interface _HashAlgorithm _HashAlgorithm;

#endif 	

#ifndef ___KeyedHashAlgorithm_FWD_DEFINED__
#define ___KeyedHashAlgorithm_FWD_DEFINED__
typedef interface _KeyedHashAlgorithm _KeyedHashAlgorithm;

#endif 	

#ifndef ___HMAC_FWD_DEFINED__
#define ___HMAC_FWD_DEFINED__
typedef interface _HMAC _HMAC;

#endif 	

#ifndef ___HMACMD5_FWD_DEFINED__
#define ___HMACMD5_FWD_DEFINED__
typedef interface _HMACMD5 _HMACMD5;

#endif 	

#ifndef ___HMACRIPEMD160_FWD_DEFINED__
#define ___HMACRIPEMD160_FWD_DEFINED__
typedef interface _HMACRIPEMD160 _HMACRIPEMD160;

#endif 	

#ifndef ___HMACSHA1_FWD_DEFINED__
#define ___HMACSHA1_FWD_DEFINED__
typedef interface _HMACSHA1 _HMACSHA1;

#endif 	

#ifndef ___HMACSHA256_FWD_DEFINED__
#define ___HMACSHA256_FWD_DEFINED__
typedef interface _HMACSHA256 _HMACSHA256;

#endif 	

#ifndef ___HMACSHA384_FWD_DEFINED__
#define ___HMACSHA384_FWD_DEFINED__
typedef interface _HMACSHA384 _HMACSHA384;

#endif 	

#ifndef ___HMACSHA512_FWD_DEFINED__
#define ___HMACSHA512_FWD_DEFINED__
typedef interface _HMACSHA512 _HMACSHA512;

#endif 	

#ifndef ___CspKeyContainerInfo_FWD_DEFINED__
#define ___CspKeyContainerInfo_FWD_DEFINED__
typedef interface _CspKeyContainerInfo _CspKeyContainerInfo;

#endif 	

#ifndef ___MACTripleDES_FWD_DEFINED__
#define ___MACTripleDES_FWD_DEFINED__
typedef interface _MACTripleDES _MACTripleDES;

#endif 	

#ifndef ___MD5_FWD_DEFINED__
#define ___MD5_FWD_DEFINED__
typedef interface _MD5 _MD5;

#endif 	

#ifndef ___MD5CryptoServiceProvider_FWD_DEFINED__
#define ___MD5CryptoServiceProvider_FWD_DEFINED__
typedef interface _MD5CryptoServiceProvider _MD5CryptoServiceProvider;

#endif 	

#ifndef ___MaskGenerationMethod_FWD_DEFINED__
#define ___MaskGenerationMethod_FWD_DEFINED__
typedef interface _MaskGenerationMethod _MaskGenerationMethod;

#endif 	

#ifndef ___PasswordDeriveBytes_FWD_DEFINED__
#define ___PasswordDeriveBytes_FWD_DEFINED__
typedef interface _PasswordDeriveBytes _PasswordDeriveBytes;

#endif 	

#ifndef ___PKCS1MaskGenerationMethod_FWD_DEFINED__
#define ___PKCS1MaskGenerationMethod_FWD_DEFINED__
typedef interface _PKCS1MaskGenerationMethod _PKCS1MaskGenerationMethod;

#endif 	

#ifndef ___RC2_FWD_DEFINED__
#define ___RC2_FWD_DEFINED__
typedef interface _RC2 _RC2;

#endif 	

#ifndef ___RC2CryptoServiceProvider_FWD_DEFINED__
#define ___RC2CryptoServiceProvider_FWD_DEFINED__
typedef interface _RC2CryptoServiceProvider _RC2CryptoServiceProvider;

#endif 	

#ifndef ___Rfc2898DeriveBytes_FWD_DEFINED__
#define ___Rfc2898DeriveBytes_FWD_DEFINED__
typedef interface _Rfc2898DeriveBytes _Rfc2898DeriveBytes;

#endif 	

#ifndef ___RIPEMD160_FWD_DEFINED__
#define ___RIPEMD160_FWD_DEFINED__
typedef interface _RIPEMD160 _RIPEMD160;

#endif 	

#ifndef ___RIPEMD160Managed_FWD_DEFINED__
#define ___RIPEMD160Managed_FWD_DEFINED__
typedef interface _RIPEMD160Managed _RIPEMD160Managed;

#endif 	

#ifndef ___RSA_FWD_DEFINED__
#define ___RSA_FWD_DEFINED__
typedef interface _RSA _RSA;

#endif 	

#ifndef ___RSACryptoServiceProvider_FWD_DEFINED__
#define ___RSACryptoServiceProvider_FWD_DEFINED__
typedef interface _RSACryptoServiceProvider _RSACryptoServiceProvider;

#endif 	

#ifndef ___RSAOAEPKeyExchangeDeformatter_FWD_DEFINED__
#define ___RSAOAEPKeyExchangeDeformatter_FWD_DEFINED__
typedef interface _RSAOAEPKeyExchangeDeformatter _RSAOAEPKeyExchangeDeformatter;

#endif 	

#ifndef ___RSAOAEPKeyExchangeFormatter_FWD_DEFINED__
#define ___RSAOAEPKeyExchangeFormatter_FWD_DEFINED__
typedef interface _RSAOAEPKeyExchangeFormatter _RSAOAEPKeyExchangeFormatter;

#endif 	

#ifndef ___RSAPKCS1KeyExchangeDeformatter_FWD_DEFINED__
#define ___RSAPKCS1KeyExchangeDeformatter_FWD_DEFINED__
typedef interface _RSAPKCS1KeyExchangeDeformatter _RSAPKCS1KeyExchangeDeformatter;

#endif 	

#ifndef ___RSAPKCS1KeyExchangeFormatter_FWD_DEFINED__
#define ___RSAPKCS1KeyExchangeFormatter_FWD_DEFINED__
typedef interface _RSAPKCS1KeyExchangeFormatter _RSAPKCS1KeyExchangeFormatter;

#endif 	

#ifndef ___RSAPKCS1SignatureDeformatter_FWD_DEFINED__
#define ___RSAPKCS1SignatureDeformatter_FWD_DEFINED__
typedef interface _RSAPKCS1SignatureDeformatter _RSAPKCS1SignatureDeformatter;

#endif 	

#ifndef ___RSAPKCS1SignatureFormatter_FWD_DEFINED__
#define ___RSAPKCS1SignatureFormatter_FWD_DEFINED__
typedef interface _RSAPKCS1SignatureFormatter _RSAPKCS1SignatureFormatter;

#endif 	

#ifndef ___Rijndael_FWD_DEFINED__
#define ___Rijndael_FWD_DEFINED__
typedef interface _Rijndael _Rijndael;

#endif 	

#ifndef ___RijndaelManaged_FWD_DEFINED__
#define ___RijndaelManaged_FWD_DEFINED__
typedef interface _RijndaelManaged _RijndaelManaged;

#endif 	

#ifndef ___RijndaelManagedTransform_FWD_DEFINED__
#define ___RijndaelManagedTransform_FWD_DEFINED__
typedef interface _RijndaelManagedTransform _RijndaelManagedTransform;

#endif 	

#ifndef ___SHA1_FWD_DEFINED__
#define ___SHA1_FWD_DEFINED__
typedef interface _SHA1 _SHA1;

#endif 	

#ifndef ___SHA1CryptoServiceProvider_FWD_DEFINED__
#define ___SHA1CryptoServiceProvider_FWD_DEFINED__
typedef interface _SHA1CryptoServiceProvider _SHA1CryptoServiceProvider;

#endif 	

#ifndef ___SHA1Managed_FWD_DEFINED__
#define ___SHA1Managed_FWD_DEFINED__
typedef interface _SHA1Managed _SHA1Managed;

#endif 	

#ifndef ___SHA256_FWD_DEFINED__
#define ___SHA256_FWD_DEFINED__
typedef interface _SHA256 _SHA256;

#endif 	

#ifndef ___SHA256Managed_FWD_DEFINED__
#define ___SHA256Managed_FWD_DEFINED__
typedef interface _SHA256Managed _SHA256Managed;

#endif 	

#ifndef ___SHA384_FWD_DEFINED__
#define ___SHA384_FWD_DEFINED__
typedef interface _SHA384 _SHA384;

#endif 	

#ifndef ___SHA384Managed_FWD_DEFINED__
#define ___SHA384Managed_FWD_DEFINED__
typedef interface _SHA384Managed _SHA384Managed;

#endif 	

#ifndef ___SHA512_FWD_DEFINED__
#define ___SHA512_FWD_DEFINED__
typedef interface _SHA512 _SHA512;

#endif 	

#ifndef ___SHA512Managed_FWD_DEFINED__
#define ___SHA512Managed_FWD_DEFINED__
typedef interface _SHA512Managed _SHA512Managed;

#endif 	

#ifndef ___SignatureDescription_FWD_DEFINED__
#define ___SignatureDescription_FWD_DEFINED__
typedef interface _SignatureDescription _SignatureDescription;

#endif 	

#ifndef ___TripleDES_FWD_DEFINED__
#define ___TripleDES_FWD_DEFINED__
typedef interface _TripleDES _TripleDES;

#endif 	

#ifndef ___TripleDESCryptoServiceProvider_FWD_DEFINED__
#define ___TripleDESCryptoServiceProvider_FWD_DEFINED__
typedef interface _TripleDESCryptoServiceProvider _TripleDESCryptoServiceProvider;

#endif 	

#ifndef ___X509Certificate_FWD_DEFINED__
#define ___X509Certificate_FWD_DEFINED__
typedef interface _X509Certificate _X509Certificate;

#endif 	

#ifndef __Object_FWD_DEFINED__
#define __Object_FWD_DEFINED__

typedef struct Object Object;

#endif 	

#ifndef __Array_FWD_DEFINED__
#define __Array_FWD_DEFINED__

typedef struct Array Array;

#endif 	

#ifndef __ValueType_FWD_DEFINED__
#define __ValueType_FWD_DEFINED__

typedef struct ValueType ValueType;

#endif 	

#ifndef __Enum_FWD_DEFINED__
#define __Enum_FWD_DEFINED__

typedef struct Enum Enum;

#endif 	

#ifndef __String_FWD_DEFINED__
#define __String_FWD_DEFINED__

typedef struct String String;

#endif 	

#ifndef __StringComparer_FWD_DEFINED__
#define __StringComparer_FWD_DEFINED__

typedef struct StringComparer StringComparer;

#endif 	

#ifndef __StringBuilder_FWD_DEFINED__
#define __StringBuilder_FWD_DEFINED__

typedef struct StringBuilder StringBuilder;

#endif 	

#ifndef __Exception_FWD_DEFINED__
#define __Exception_FWD_DEFINED__

typedef struct Exception Exception;

#endif 	

#ifndef __SystemException_FWD_DEFINED__
#define __SystemException_FWD_DEFINED__

typedef struct SystemException SystemException;

#endif 	

#ifndef __OutOfMemoryException_FWD_DEFINED__
#define __OutOfMemoryException_FWD_DEFINED__

typedef struct OutOfMemoryException OutOfMemoryException;

#endif 	

#ifndef __StackOverflowException_FWD_DEFINED__
#define __StackOverflowException_FWD_DEFINED__

typedef struct StackOverflowException StackOverflowException;

#endif 	

#ifndef __DataMisalignedException_FWD_DEFINED__
#define __DataMisalignedException_FWD_DEFINED__

typedef struct DataMisalignedException DataMisalignedException;

#endif 	

#ifndef __ExecutionEngineException_FWD_DEFINED__
#define __ExecutionEngineException_FWD_DEFINED__

typedef struct ExecutionEngineException ExecutionEngineException;

#endif 	

#ifndef __Delegate_FWD_DEFINED__
#define __Delegate_FWD_DEFINED__

typedef struct Delegate Delegate;

#endif 	

#ifndef __MulticastDelegate_FWD_DEFINED__
#define __MulticastDelegate_FWD_DEFINED__

typedef struct MulticastDelegate MulticastDelegate;

#endif 	

#ifndef __MemberAccessException_FWD_DEFINED__
#define __MemberAccessException_FWD_DEFINED__

typedef struct MemberAccessException MemberAccessException;

#endif 	

#ifndef __Activator_FWD_DEFINED__
#define __Activator_FWD_DEFINED__

typedef struct Activator Activator;

#endif 	

#ifndef __AccessViolationException_FWD_DEFINED__
#define __AccessViolationException_FWD_DEFINED__

typedef struct AccessViolationException AccessViolationException;

#endif 	

#ifndef __ApplicationActivator_FWD_DEFINED__
#define __ApplicationActivator_FWD_DEFINED__

typedef struct ApplicationActivator ApplicationActivator;

#endif 	

#ifndef __ApplicationException_FWD_DEFINED__
#define __ApplicationException_FWD_DEFINED__

typedef struct ApplicationException ApplicationException;

#endif 	

#ifndef __EventArgs_FWD_DEFINED__
#define __EventArgs_FWD_DEFINED__

typedef struct EventArgs EventArgs;

#endif 	

#ifndef __ResolveEventArgs_FWD_DEFINED__
#define __ResolveEventArgs_FWD_DEFINED__

typedef struct ResolveEventArgs ResolveEventArgs;

#endif 	

#ifndef __AssemblyLoadEventArgs_FWD_DEFINED__
#define __AssemblyLoadEventArgs_FWD_DEFINED__

typedef struct AssemblyLoadEventArgs AssemblyLoadEventArgs;

#endif 	

#ifndef __ResolveEventHandler_FWD_DEFINED__
#define __ResolveEventHandler_FWD_DEFINED__

typedef struct ResolveEventHandler ResolveEventHandler;

#endif 	

#ifndef __AssemblyLoadEventHandler_FWD_DEFINED__
#define __AssemblyLoadEventHandler_FWD_DEFINED__

typedef struct AssemblyLoadEventHandler AssemblyLoadEventHandler;

#endif 	

#ifndef __AppDomainInitializer_FWD_DEFINED__
#define __AppDomainInitializer_FWD_DEFINED__

typedef struct AppDomainInitializer AppDomainInitializer;

#endif 	

#ifndef __MarshalByRefObject_FWD_DEFINED__
#define __MarshalByRefObject_FWD_DEFINED__

typedef struct MarshalByRefObject MarshalByRefObject;

#endif 	

#ifndef __AppDomain_FWD_DEFINED__
#define __AppDomain_FWD_DEFINED__

typedef struct AppDomain AppDomain;

#endif 	

#ifndef __CrossAppDomainDelegate_FWD_DEFINED__
#define __CrossAppDomainDelegate_FWD_DEFINED__

typedef struct CrossAppDomainDelegate CrossAppDomainDelegate;

#endif 	

#ifndef __AppDomainManager_FWD_DEFINED__
#define __AppDomainManager_FWD_DEFINED__

typedef struct AppDomainManager AppDomainManager;

#endif 	

#ifndef __AppDomainSetup_FWD_DEFINED__
#define __AppDomainSetup_FWD_DEFINED__

typedef struct AppDomainSetup AppDomainSetup;

#endif 	

#ifndef __Attribute_FWD_DEFINED__
#define __Attribute_FWD_DEFINED__

typedef struct Attribute Attribute;

#endif 	

#ifndef __LoaderOptimizationAttribute_FWD_DEFINED__
#define __LoaderOptimizationAttribute_FWD_DEFINED__

typedef struct LoaderOptimizationAttribute LoaderOptimizationAttribute;

#endif 	

#ifndef __AppDomainUnloadedException_FWD_DEFINED__
#define __AppDomainUnloadedException_FWD_DEFINED__

typedef struct AppDomainUnloadedException AppDomainUnloadedException;

#endif 	

#ifndef __ActivationArguments_FWD_DEFINED__
#define __ActivationArguments_FWD_DEFINED__

typedef struct ActivationArguments ActivationArguments;

#endif 	

#ifndef __ApplicationId_FWD_DEFINED__
#define __ApplicationId_FWD_DEFINED__

typedef struct ApplicationId ApplicationId;

#endif 	

#ifndef __ArgumentException_FWD_DEFINED__
#define __ArgumentException_FWD_DEFINED__

typedef struct ArgumentException ArgumentException;

#endif 	

#ifndef __ArgumentNullException_FWD_DEFINED__
#define __ArgumentNullException_FWD_DEFINED__

typedef struct ArgumentNullException ArgumentNullException;

#endif 	

#ifndef __ArgumentOutOfRangeException_FWD_DEFINED__
#define __ArgumentOutOfRangeException_FWD_DEFINED__

typedef struct ArgumentOutOfRangeException ArgumentOutOfRangeException;

#endif 	

#ifndef __ArithmeticException_FWD_DEFINED__
#define __ArithmeticException_FWD_DEFINED__

typedef struct ArithmeticException ArithmeticException;

#endif 	

#ifndef __ArrayTypeMismatchException_FWD_DEFINED__
#define __ArrayTypeMismatchException_FWD_DEFINED__

typedef struct ArrayTypeMismatchException ArrayTypeMismatchException;

#endif 	

#ifndef __AsyncCallback_FWD_DEFINED__
#define __AsyncCallback_FWD_DEFINED__

typedef struct AsyncCallback AsyncCallback;

#endif 	

#ifndef __AttributeUsageAttribute_FWD_DEFINED__
#define __AttributeUsageAttribute_FWD_DEFINED__

typedef struct AttributeUsageAttribute AttributeUsageAttribute;

#endif 	

#ifndef __BadImageFormatException_FWD_DEFINED__
#define __BadImageFormatException_FWD_DEFINED__

typedef struct BadImageFormatException BadImageFormatException;

#endif 	

#ifndef __Buffer_FWD_DEFINED__
#define __Buffer_FWD_DEFINED__

typedef struct Buffer Buffer;

#endif 	

#ifndef __CannotUnloadAppDomainException_FWD_DEFINED__
#define __CannotUnloadAppDomainException_FWD_DEFINED__

typedef struct CannotUnloadAppDomainException CannotUnloadAppDomainException;

#endif 	

#ifndef __CharEnumerator_FWD_DEFINED__
#define __CharEnumerator_FWD_DEFINED__

typedef struct CharEnumerator CharEnumerator;

#endif 	

#ifndef __CLSCompliantAttribute_FWD_DEFINED__
#define __CLSCompliantAttribute_FWD_DEFINED__

typedef struct CLSCompliantAttribute CLSCompliantAttribute;

#endif 	

#ifndef __TypeUnloadedException_FWD_DEFINED__
#define __TypeUnloadedException_FWD_DEFINED__

typedef struct TypeUnloadedException TypeUnloadedException;

#endif 	

#ifndef __CriticalFinalizerObject_FWD_DEFINED__
#define __CriticalFinalizerObject_FWD_DEFINED__

typedef struct CriticalFinalizerObject CriticalFinalizerObject;

#endif 	

#ifndef __ContextMarshalException_FWD_DEFINED__
#define __ContextMarshalException_FWD_DEFINED__

typedef struct ContextMarshalException ContextMarshalException;

#endif 	

#ifndef __ContextBoundObject_FWD_DEFINED__
#define __ContextBoundObject_FWD_DEFINED__

typedef struct ContextBoundObject ContextBoundObject;

#endif 	

#ifndef __ContextStaticAttribute_FWD_DEFINED__
#define __ContextStaticAttribute_FWD_DEFINED__

typedef struct ContextStaticAttribute ContextStaticAttribute;

#endif 	

#ifndef __TimeZone_FWD_DEFINED__
#define __TimeZone_FWD_DEFINED__

typedef struct TimeZone TimeZone;

#endif 	

#ifndef __DBNull_FWD_DEFINED__
#define __DBNull_FWD_DEFINED__

typedef struct DBNull DBNull;

#endif 	

#ifndef __Binder_FWD_DEFINED__
#define __Binder_FWD_DEFINED__

typedef struct Binder Binder;

#endif 	

#ifndef __DivideByZeroException_FWD_DEFINED__
#define __DivideByZeroException_FWD_DEFINED__

typedef struct DivideByZeroException DivideByZeroException;

#endif 	

#ifndef __DuplicateWaitObjectException_FWD_DEFINED__
#define __DuplicateWaitObjectException_FWD_DEFINED__

typedef struct DuplicateWaitObjectException DuplicateWaitObjectException;

#endif 	

#ifndef __TypeLoadException_FWD_DEFINED__
#define __TypeLoadException_FWD_DEFINED__

typedef struct TypeLoadException TypeLoadException;

#endif 	

#ifndef __EntryPointNotFoundException_FWD_DEFINED__
#define __EntryPointNotFoundException_FWD_DEFINED__

typedef struct EntryPointNotFoundException EntryPointNotFoundException;

#endif 	

#ifndef __DllNotFoundException_FWD_DEFINED__
#define __DllNotFoundException_FWD_DEFINED__

typedef struct DllNotFoundException DllNotFoundException;

#endif 	

#ifndef __Environment_FWD_DEFINED__
#define __Environment_FWD_DEFINED__

typedef struct Environment Environment;

#endif 	

#ifndef __EventHandler_FWD_DEFINED__
#define __EventHandler_FWD_DEFINED__

typedef struct EventHandler EventHandler;

#endif 	

#ifndef __FieldAccessException_FWD_DEFINED__
#define __FieldAccessException_FWD_DEFINED__

typedef struct FieldAccessException FieldAccessException;

#endif 	

#ifndef __FlagsAttribute_FWD_DEFINED__
#define __FlagsAttribute_FWD_DEFINED__

typedef struct FlagsAttribute FlagsAttribute;

#endif 	

#ifndef __FormatException_FWD_DEFINED__
#define __FormatException_FWD_DEFINED__

typedef struct FormatException FormatException;

#endif 	

#ifndef __IndexOutOfRangeException_FWD_DEFINED__
#define __IndexOutOfRangeException_FWD_DEFINED__

typedef struct IndexOutOfRangeException IndexOutOfRangeException;

#endif 	

#ifndef __InvalidCastException_FWD_DEFINED__
#define __InvalidCastException_FWD_DEFINED__

typedef struct InvalidCastException InvalidCastException;

#endif 	

#ifndef __InvalidOperationException_FWD_DEFINED__
#define __InvalidOperationException_FWD_DEFINED__

typedef struct InvalidOperationException InvalidOperationException;

#endif 	

#ifndef __InvalidProgramException_FWD_DEFINED__
#define __InvalidProgramException_FWD_DEFINED__

typedef struct InvalidProgramException InvalidProgramException;

#endif 	

#ifndef __LocalDataStoreSlot_FWD_DEFINED__
#define __LocalDataStoreSlot_FWD_DEFINED__

typedef struct LocalDataStoreSlot LocalDataStoreSlot;

#endif 	

#ifndef __MethodAccessException_FWD_DEFINED__
#define __MethodAccessException_FWD_DEFINED__

typedef struct MethodAccessException MethodAccessException;

#endif 	

#ifndef __MissingMemberException_FWD_DEFINED__
#define __MissingMemberException_FWD_DEFINED__

typedef struct MissingMemberException MissingMemberException;

#endif 	

#ifndef __MissingFieldException_FWD_DEFINED__
#define __MissingFieldException_FWD_DEFINED__

typedef struct MissingFieldException MissingFieldException;

#endif 	

#ifndef __MissingMethodException_FWD_DEFINED__
#define __MissingMethodException_FWD_DEFINED__

typedef struct MissingMethodException MissingMethodException;

#endif 	

#ifndef __MulticastNotSupportedException_FWD_DEFINED__
#define __MulticastNotSupportedException_FWD_DEFINED__

typedef struct MulticastNotSupportedException MulticastNotSupportedException;

#endif 	

#ifndef __NonSerializedAttribute_FWD_DEFINED__
#define __NonSerializedAttribute_FWD_DEFINED__

typedef struct NonSerializedAttribute NonSerializedAttribute;

#endif 	

#ifndef __NotFiniteNumberException_FWD_DEFINED__
#define __NotFiniteNumberException_FWD_DEFINED__

typedef struct NotFiniteNumberException NotFiniteNumberException;

#endif 	

#ifndef __NotImplementedException_FWD_DEFINED__
#define __NotImplementedException_FWD_DEFINED__

typedef struct NotImplementedException NotImplementedException;

#endif 	

#ifndef __NotSupportedException_FWD_DEFINED__
#define __NotSupportedException_FWD_DEFINED__

typedef struct NotSupportedException NotSupportedException;

#endif 	

#ifndef __NullReferenceException_FWD_DEFINED__
#define __NullReferenceException_FWD_DEFINED__

typedef struct NullReferenceException NullReferenceException;

#endif 	

#ifndef __ObjectDisposedException_FWD_DEFINED__
#define __ObjectDisposedException_FWD_DEFINED__

typedef struct ObjectDisposedException ObjectDisposedException;

#endif 	

#ifndef __ObsoleteAttribute_FWD_DEFINED__
#define __ObsoleteAttribute_FWD_DEFINED__

typedef struct ObsoleteAttribute ObsoleteAttribute;

#endif 	

#ifndef __OperatingSystem_FWD_DEFINED__
#define __OperatingSystem_FWD_DEFINED__

typedef struct OperatingSystem OperatingSystem;

#endif 	

#ifndef __OperationCanceledException_FWD_DEFINED__
#define __OperationCanceledException_FWD_DEFINED__

typedef struct OperationCanceledException OperationCanceledException;

#endif 	

#ifndef __OverflowException_FWD_DEFINED__
#define __OverflowException_FWD_DEFINED__

typedef struct OverflowException OverflowException;

#endif 	

#ifndef __ParamArrayAttribute_FWD_DEFINED__
#define __ParamArrayAttribute_FWD_DEFINED__

typedef struct ParamArrayAttribute ParamArrayAttribute;

#endif 	

#ifndef __PlatformNotSupportedException_FWD_DEFINED__
#define __PlatformNotSupportedException_FWD_DEFINED__

typedef struct PlatformNotSupportedException PlatformNotSupportedException;

#endif 	

#ifndef __Random_FWD_DEFINED__
#define __Random_FWD_DEFINED__

typedef struct Random Random;

#endif 	

#ifndef __RankException_FWD_DEFINED__
#define __RankException_FWD_DEFINED__

typedef struct RankException RankException;

#endif 	

#ifndef __MemberInfo_FWD_DEFINED__
#define __MemberInfo_FWD_DEFINED__

typedef struct MemberInfo MemberInfo;

#endif 	

#ifndef __Type_FWD_DEFINED__
#define __Type_FWD_DEFINED__

typedef struct Type Type;

#endif 	

#ifndef __SerializableAttribute_FWD_DEFINED__
#define __SerializableAttribute_FWD_DEFINED__

typedef struct SerializableAttribute SerializableAttribute;

#endif 	

#ifndef __TimeoutException_FWD_DEFINED__
#define __TimeoutException_FWD_DEFINED__

typedef struct TimeoutException TimeoutException;

#endif 	

#ifndef __TypeInitializationException_FWD_DEFINED__
#define __TypeInitializationException_FWD_DEFINED__

typedef struct TypeInitializationException TypeInitializationException;

#endif 	

#ifndef __UnauthorizedAccessException_FWD_DEFINED__
#define __UnauthorizedAccessException_FWD_DEFINED__

typedef struct UnauthorizedAccessException UnauthorizedAccessException;
#endif 	

#ifndef __UnhandledExceptionEventArgs_FWD_DEFINED__
#define __UnhandledExceptionEventArgs_FWD_DEFINED__

typedef struct UnhandledExceptionEventArgs UnhandledExceptionEventArgs;

#endif 	

#ifndef __UnhandledExceptionEventHandler_FWD_DEFINED__
#define __UnhandledExceptionEventHandler_FWD_DEFINED__

typedef struct UnhandledExceptionEventHandler UnhandledExceptionEventHandler;

#endif 	

#ifndef __Version_FWD_DEFINED__
#define __Version_FWD_DEFINED__

typedef struct Version Version;

#endif 	

#ifndef __WeakReference_FWD_DEFINED__
#define __WeakReference_FWD_DEFINED__

typedef struct WeakReference WeakReference;

#endif 	

#ifndef __WaitHandle_FWD_DEFINED__
#define __WaitHandle_FWD_DEFINED__

typedef struct WaitHandle WaitHandle;

#endif 	

#ifndef __EventWaitHandle_FWD_DEFINED__
#define __EventWaitHandle_FWD_DEFINED__

typedef struct EventWaitHandle EventWaitHandle;

#endif 	

#ifndef __AutoResetEvent_FWD_DEFINED__
#define __AutoResetEvent_FWD_DEFINED__

typedef struct AutoResetEvent AutoResetEvent;

#endif 	

#ifndef __ContextCallback_FWD_DEFINED__
#define __ContextCallback_FWD_DEFINED__

typedef struct ContextCallback ContextCallback;

#endif 	

#ifndef __ManualResetEvent_FWD_DEFINED__
#define __ManualResetEvent_FWD_DEFINED__

typedef struct ManualResetEvent ManualResetEvent;

#endif 	

#ifndef __Monitor_FWD_DEFINED__
#define __Monitor_FWD_DEFINED__

typedef struct Monitor Monitor;

#endif 	

#ifndef __Mutex_FWD_DEFINED__
#define __Mutex_FWD_DEFINED__

typedef struct Mutex Mutex;

#endif 	

#ifndef __Overlapped_FWD_DEFINED__
#define __Overlapped_FWD_DEFINED__

typedef struct Overlapped Overlapped;

#endif 	

#ifndef __ReaderWriterLock_FWD_DEFINED__
#define __ReaderWriterLock_FWD_DEFINED__

typedef struct ReaderWriterLock ReaderWriterLock;

#endif 	

#ifndef __SynchronizationLockException_FWD_DEFINED__
#define __SynchronizationLockException_FWD_DEFINED__

typedef struct SynchronizationLockException SynchronizationLockException;

#endif 	

#ifndef __Thread_FWD_DEFINED__
#define __Thread_FWD_DEFINED__

typedef struct Thread Thread;

#endif 	

#ifndef __ThreadAbortException_FWD_DEFINED__
#define __ThreadAbortException_FWD_DEFINED__

typedef struct ThreadAbortException ThreadAbortException;

#endif 	

#ifndef __ThreadInterruptedException_FWD_DEFINED__
#define __ThreadInterruptedException_FWD_DEFINED__

typedef struct ThreadInterruptedException ThreadInterruptedException;

#endif 	

#ifndef __RegisteredWaitHandle_FWD_DEFINED__
#define __RegisteredWaitHandle_FWD_DEFINED__

typedef struct RegisteredWaitHandle RegisteredWaitHandle;

#endif 	

#ifndef __WaitCallback_FWD_DEFINED__
#define __WaitCallback_FWD_DEFINED__

typedef struct WaitCallback WaitCallback;

#endif 	

#ifndef __WaitOrTimerCallback_FWD_DEFINED__
#define __WaitOrTimerCallback_FWD_DEFINED__

typedef struct WaitOrTimerCallback WaitOrTimerCallback;

#endif 	

#ifndef __IOCompletionCallback_FWD_DEFINED__
#define __IOCompletionCallback_FWD_DEFINED__

typedef struct IOCompletionCallback IOCompletionCallback;

#endif 	

#ifndef __ThreadStart_FWD_DEFINED__
#define __ThreadStart_FWD_DEFINED__

typedef struct ThreadStart ThreadStart;

#endif 	

#ifndef __ThreadStateException_FWD_DEFINED__
#define __ThreadStateException_FWD_DEFINED__

typedef struct ThreadStateException ThreadStateException;

#endif 	

#ifndef __ThreadStaticAttribute_FWD_DEFINED__
#define __ThreadStaticAttribute_FWD_DEFINED__

typedef struct ThreadStaticAttribute ThreadStaticAttribute;

#endif 	

#ifndef __Timeout_FWD_DEFINED__
#define __Timeout_FWD_DEFINED__

typedef struct Timeout Timeout;

#endif 	

#ifndef __TimerCallback_FWD_DEFINED__
#define __TimerCallback_FWD_DEFINED__

typedef struct TimerCallback TimerCallback;

#endif 	

#ifndef __Timer_FWD_DEFINED__
#define __Timer_FWD_DEFINED__

typedef struct Timer Timer;

#endif 	

#ifndef __STAThreadAttribute_FWD_DEFINED__
#define __STAThreadAttribute_FWD_DEFINED__

typedef struct STAThreadAttribute STAThreadAttribute;

#endif 	

#ifndef __MTAThreadAttribute_FWD_DEFINED__
#define __MTAThreadAttribute_FWD_DEFINED__

typedef struct MTAThreadAttribute MTAThreadAttribute;

#endif 	

#ifndef __ArrayList_FWD_DEFINED__
#define __ArrayList_FWD_DEFINED__

typedef struct ArrayList ArrayList;

#endif 	

#ifndef __BitArray_FWD_DEFINED__
#define __BitArray_FWD_DEFINED__

typedef struct BitArray BitArray;

#endif 	

#ifndef __CaseInsensitiveComparer_FWD_DEFINED__
#define __CaseInsensitiveComparer_FWD_DEFINED__

typedef struct CaseInsensitiveComparer CaseInsensitiveComparer;

#endif 	

#ifndef __CaseInsensitiveHashCodeProvider_FWD_DEFINED__
#define __CaseInsensitiveHashCodeProvider_FWD_DEFINED__

typedef struct CaseInsensitiveHashCodeProvider CaseInsensitiveHashCodeProvider;

#endif 	

#ifndef __CollectionBase_FWD_DEFINED__
#define __CollectionBase_FWD_DEFINED__

typedef struct CollectionBase CollectionBase;

#endif 	

#ifndef __Comparer_FWD_DEFINED__
#define __Comparer_FWD_DEFINED__

typedef struct Comparer Comparer;

#endif 	

#ifndef __DictionaryBase_FWD_DEFINED__
#define __DictionaryBase_FWD_DEFINED__

typedef struct DictionaryBase DictionaryBase;

#endif 	

#ifndef __Hashtable_FWD_DEFINED__
#define __Hashtable_FWD_DEFINED__

typedef struct Hashtable Hashtable;

#endif 	

#ifndef __Queue_FWD_DEFINED__
#define __Queue_FWD_DEFINED__

typedef struct Queue Queue;

#endif 	

#ifndef __ReadOnlyCollectionBase_FWD_DEFINED__
#define __ReadOnlyCollectionBase_FWD_DEFINED__

typedef struct ReadOnlyCollectionBase ReadOnlyCollectionBase;

#endif 	

#ifndef __SortedList_FWD_DEFINED__
#define __SortedList_FWD_DEFINED__

typedef struct SortedList SortedList;

#endif 	

#ifndef __Stack_FWD_DEFINED__
#define __Stack_FWD_DEFINED__

typedef struct Stack Stack;

#endif 	

#ifndef __Nullable_FWD_DEFINED__
#define __Nullable_FWD_DEFINED__

typedef struct Nullable Nullable;

#endif 	

#ifndef __KeyNotFoundException_FWD_DEFINED__
#define __KeyNotFoundException_FWD_DEFINED__

typedef struct KeyNotFoundException KeyNotFoundException;

#endif 	

#ifndef __ConditionalAttribute_FWD_DEFINED__
#define __ConditionalAttribute_FWD_DEFINED__

typedef struct ConditionalAttribute ConditionalAttribute;

#endif 	

#ifndef __Debugger_FWD_DEFINED__
#define __Debugger_FWD_DEFINED__

typedef struct Debugger Debugger;

#endif 	

#ifndef __DebuggerStepThroughAttribute_FWD_DEFINED__
#define __DebuggerStepThroughAttribute_FWD_DEFINED__

typedef struct DebuggerStepThroughAttribute DebuggerStepThroughAttribute;

#endif 	

#ifndef __DebuggerStepperBoundaryAttribute_FWD_DEFINED__
#define __DebuggerStepperBoundaryAttribute_FWD_DEFINED__

typedef struct DebuggerStepperBoundaryAttribute DebuggerStepperBoundaryAttribute;

#endif 	

#ifndef __DebuggerHiddenAttribute_FWD_DEFINED__
#define __DebuggerHiddenAttribute_FWD_DEFINED__

typedef struct DebuggerHiddenAttribute DebuggerHiddenAttribute;

#endif 	

#ifndef __DebuggerNonUserCodeAttribute_FWD_DEFINED__
#define __DebuggerNonUserCodeAttribute_FWD_DEFINED__

typedef struct DebuggerNonUserCodeAttribute DebuggerNonUserCodeAttribute;

#endif 	

#ifndef __DebuggableAttribute_FWD_DEFINED__
#define __DebuggableAttribute_FWD_DEFINED__

typedef struct DebuggableAttribute DebuggableAttribute;

#endif 	

#ifndef __DebuggerBrowsableAttribute_FWD_DEFINED__
#define __DebuggerBrowsableAttribute_FWD_DEFINED__

typedef struct DebuggerBrowsableAttribute DebuggerBrowsableAttribute;

#endif 	

#ifndef __DebuggerTypeProxyAttribute_FWD_DEFINED__
#define __DebuggerTypeProxyAttribute_FWD_DEFINED__

typedef struct DebuggerTypeProxyAttribute DebuggerTypeProxyAttribute;

#endif 	

#ifndef __DebuggerDisplayAttribute_FWD_DEFINED__
#define __DebuggerDisplayAttribute_FWD_DEFINED__

typedef struct DebuggerDisplayAttribute DebuggerDisplayAttribute;

#endif 	

#ifndef __DebuggerVisualizerAttribute_FWD_DEFINED__
#define __DebuggerVisualizerAttribute_FWD_DEFINED__

typedef struct DebuggerVisualizerAttribute DebuggerVisualizerAttribute;

#endif 	

#ifndef __StackTrace_FWD_DEFINED__
#define __StackTrace_FWD_DEFINED__

typedef struct StackTrace StackTrace;

#endif 	

#ifndef __StackFrame_FWD_DEFINED__
#define __StackFrame_FWD_DEFINED__

typedef struct StackFrame StackFrame;

#endif 	

#ifndef __SymDocumentType_FWD_DEFINED__
#define __SymDocumentType_FWD_DEFINED__

typedef struct SymDocumentType SymDocumentType;

#endif 	

#ifndef __SymLanguageType_FWD_DEFINED__
#define __SymLanguageType_FWD_DEFINED__

typedef struct SymLanguageType SymLanguageType;

#endif 	

#ifndef __SymLanguageVendor_FWD_DEFINED__
#define __SymLanguageVendor_FWD_DEFINED__

typedef struct SymLanguageVendor SymLanguageVendor;

#endif 	

#ifndef __AmbiguousMatchException_FWD_DEFINED__
#define __AmbiguousMatchException_FWD_DEFINED__

typedef struct AmbiguousMatchException AmbiguousMatchException;

#endif 	

#ifndef __ModuleResolveEventHandler_FWD_DEFINED__
#define __ModuleResolveEventHandler_FWD_DEFINED__

typedef struct ModuleResolveEventHandler ModuleResolveEventHandler;

#endif 	

#ifndef __Assembly_FWD_DEFINED__
#define __Assembly_FWD_DEFINED__

typedef struct Assembly Assembly;

#endif 	

#ifndef __AssemblyCopyrightAttribute_FWD_DEFINED__
#define __AssemblyCopyrightAttribute_FWD_DEFINED__

typedef struct AssemblyCopyrightAttribute AssemblyCopyrightAttribute;

#endif 	

#ifndef __AssemblyTrademarkAttribute_FWD_DEFINED__
#define __AssemblyTrademarkAttribute_FWD_DEFINED__

typedef struct AssemblyTrademarkAttribute AssemblyTrademarkAttribute;

#endif 	

#ifndef __AssemblyProductAttribute_FWD_DEFINED__
#define __AssemblyProductAttribute_FWD_DEFINED__

typedef struct AssemblyProductAttribute AssemblyProductAttribute;

#endif 	

#ifndef __AssemblyCompanyAttribute_FWD_DEFINED__
#define __AssemblyCompanyAttribute_FWD_DEFINED__

typedef struct AssemblyCompanyAttribute AssemblyCompanyAttribute;

#endif 	

#ifndef __AssemblyDescriptionAttribute_FWD_DEFINED__
#define __AssemblyDescriptionAttribute_FWD_DEFINED__

typedef struct AssemblyDescriptionAttribute AssemblyDescriptionAttribute;

#endif 	

#ifndef __AssemblyTitleAttribute_FWD_DEFINED__
#define __AssemblyTitleAttribute_FWD_DEFINED__

typedef struct AssemblyTitleAttribute AssemblyTitleAttribute;

#endif 	

#ifndef __AssemblyConfigurationAttribute_FWD_DEFINED__
#define __AssemblyConfigurationAttribute_FWD_DEFINED__

typedef struct AssemblyConfigurationAttribute AssemblyConfigurationAttribute;

#endif 	

#ifndef __AssemblyDefaultAliasAttribute_FWD_DEFINED__
#define __AssemblyDefaultAliasAttribute_FWD_DEFINED__

typedef struct AssemblyDefaultAliasAttribute AssemblyDefaultAliasAttribute;

#endif 	

#ifndef __AssemblyInformationalVersionAttribute_FWD_DEFINED__
#define __AssemblyInformationalVersionAttribute_FWD_DEFINED__

typedef struct AssemblyInformationalVersionAttribute AssemblyInformationalVersionAttribute;

#endif 	

#ifndef __AssemblyFileVersionAttribute_FWD_DEFINED__
#define __AssemblyFileVersionAttribute_FWD_DEFINED__

typedef struct AssemblyFileVersionAttribute AssemblyFileVersionAttribute;

#endif 	

#ifndef __AssemblyCultureAttribute_FWD_DEFINED__
#define __AssemblyCultureAttribute_FWD_DEFINED__

typedef struct AssemblyCultureAttribute AssemblyCultureAttribute;

#endif 	

#ifndef __AssemblyVersionAttribute_FWD_DEFINED__
#define __AssemblyVersionAttribute_FWD_DEFINED__

typedef struct AssemblyVersionAttribute AssemblyVersionAttribute;

#endif 	

#ifndef __AssemblyKeyFileAttribute_FWD_DEFINED__
#define __AssemblyKeyFileAttribute_FWD_DEFINED__

typedef struct AssemblyKeyFileAttribute AssemblyKeyFileAttribute;

#endif 	

#ifndef __AssemblyDelaySignAttribute_FWD_DEFINED__
#define __AssemblyDelaySignAttribute_FWD_DEFINED__

typedef struct AssemblyDelaySignAttribute AssemblyDelaySignAttribute;

#endif 	

#ifndef __AssemblyAlgorithmIdAttribute_FWD_DEFINED__
#define __AssemblyAlgorithmIdAttribute_FWD_DEFINED__

typedef struct AssemblyAlgorithmIdAttribute AssemblyAlgorithmIdAttribute;

#endif 	

#ifndef __AssemblyFlagsAttribute_FWD_DEFINED__
#define __AssemblyFlagsAttribute_FWD_DEFINED__

typedef struct AssemblyFlagsAttribute AssemblyFlagsAttribute;

#endif 	

#ifndef __AssemblyKeyNameAttribute_FWD_DEFINED__
#define __AssemblyKeyNameAttribute_FWD_DEFINED__

typedef struct AssemblyKeyNameAttribute AssemblyKeyNameAttribute;

#endif 	

#ifndef __AssemblyName_FWD_DEFINED__
#define __AssemblyName_FWD_DEFINED__

typedef struct AssemblyName AssemblyName;

#endif 	

#ifndef __AssemblyNameProxy_FWD_DEFINED__
#define __AssemblyNameProxy_FWD_DEFINED__

typedef struct AssemblyNameProxy AssemblyNameProxy;

#endif 	

#ifndef __CustomAttributeFormatException_FWD_DEFINED__
#define __CustomAttributeFormatException_FWD_DEFINED__

typedef struct CustomAttributeFormatException CustomAttributeFormatException;

#endif 	

#ifndef __CustomAttributeData_FWD_DEFINED__
#define __CustomAttributeData_FWD_DEFINED__

typedef struct CustomAttributeData CustomAttributeData;

#endif 	

#ifndef __DefaultMemberAttribute_FWD_DEFINED__
#define __DefaultMemberAttribute_FWD_DEFINED__

typedef struct DefaultMemberAttribute DefaultMemberAttribute;

#endif 	

#ifndef __InvalidFilterCriteriaException_FWD_DEFINED__
#define __InvalidFilterCriteriaException_FWD_DEFINED__

typedef struct InvalidFilterCriteriaException InvalidFilterCriteriaException;

#endif 	

#ifndef __ManifestResourceInfo_FWD_DEFINED__
#define __ManifestResourceInfo_FWD_DEFINED__

typedef struct ManifestResourceInfo ManifestResourceInfo;

#endif 	

#ifndef __MemberFilter_FWD_DEFINED__
#define __MemberFilter_FWD_DEFINED__

typedef struct MemberFilter MemberFilter;

#endif 	

#ifndef __Missing_FWD_DEFINED__
#define __Missing_FWD_DEFINED__

typedef struct Missing Missing;

#endif 	

#ifndef __Module_FWD_DEFINED__
#define __Module_FWD_DEFINED__

typedef struct Module Module;

#endif 	

#ifndef __ObfuscateAssemblyAttribute_FWD_DEFINED__
#define __ObfuscateAssemblyAttribute_FWD_DEFINED__

typedef struct ObfuscateAssemblyAttribute ObfuscateAssemblyAttribute;

#endif 	

#ifndef __ObfuscationAttribute_FWD_DEFINED__
#define __ObfuscationAttribute_FWD_DEFINED__

typedef struct ObfuscationAttribute ObfuscationAttribute;

#endif 	

#ifndef __ExceptionHandlingClause_FWD_DEFINED__
#define __ExceptionHandlingClause_FWD_DEFINED__

typedef struct ExceptionHandlingClause ExceptionHandlingClause;

#endif 	

#ifndef __MethodBody_FWD_DEFINED__
#define __MethodBody_FWD_DEFINED__

typedef struct MethodBody MethodBody;

#endif 	

#ifndef __LocalVariableInfo_FWD_DEFINED__
#define __LocalVariableInfo_FWD_DEFINED__

typedef struct LocalVariableInfo LocalVariableInfo;

#endif 	

#ifndef __Pointer_FWD_DEFINED__
#define __Pointer_FWD_DEFINED__

typedef struct Pointer Pointer;

#endif 	

#ifndef __ReflectionTypeLoadException_FWD_DEFINED__
#define __ReflectionTypeLoadException_FWD_DEFINED__

typedef struct ReflectionTypeLoadException ReflectionTypeLoadException;

#endif 	

#ifndef __StrongNameKeyPair_FWD_DEFINED__
#define __StrongNameKeyPair_FWD_DEFINED__

typedef struct StrongNameKeyPair StrongNameKeyPair;

#endif 	

#ifndef __TargetException_FWD_DEFINED__
#define __TargetException_FWD_DEFINED__

typedef struct TargetException TargetException;

#endif 	

#ifndef __TargetInvocationException_FWD_DEFINED__
#define __TargetInvocationException_FWD_DEFINED__

typedef struct TargetInvocationException TargetInvocationException;

#endif 	

#ifndef __TargetParameterCountException_FWD_DEFINED__
#define __TargetParameterCountException_FWD_DEFINED__

typedef struct TargetParameterCountException TargetParameterCountException;

#endif 	

#ifndef __TypeDelegator_FWD_DEFINED__
#define __TypeDelegator_FWD_DEFINED__

typedef struct TypeDelegator TypeDelegator;

#endif 	

#ifndef __TypeFilter_FWD_DEFINED__
#define __TypeFilter_FWD_DEFINED__

typedef struct TypeFilter TypeFilter;

#endif 	

#ifndef __MethodBase_FWD_DEFINED__
#define __MethodBase_FWD_DEFINED__

typedef struct MethodBase MethodBase;

#endif 	

#ifndef __ConstructorInfo_FWD_DEFINED__
#define __ConstructorInfo_FWD_DEFINED__

typedef struct ConstructorInfo ConstructorInfo;

#endif 	

#ifndef __MethodInfo_FWD_DEFINED__
#define __MethodInfo_FWD_DEFINED__

typedef struct MethodInfo MethodInfo;

#endif 	

#ifndef __FieldInfo_FWD_DEFINED__
#define __FieldInfo_FWD_DEFINED__

typedef struct FieldInfo FieldInfo;

#endif 	

#ifndef __EventInfo_FWD_DEFINED__
#define __EventInfo_FWD_DEFINED__

typedef struct EventInfo EventInfo;

#endif 	

#ifndef __PropertyInfo_FWD_DEFINED__
#define __PropertyInfo_FWD_DEFINED__

typedef struct PropertyInfo PropertyInfo;

#endif 	

#ifndef __ParameterInfo_FWD_DEFINED__
#define __ParameterInfo_FWD_DEFINED__

typedef struct ParameterInfo ParameterInfo;

#endif 	

#ifndef __Formatter_FWD_DEFINED__
#define __Formatter_FWD_DEFINED__

typedef struct Formatter Formatter;

#endif 	

#ifndef __FormatterConverter_FWD_DEFINED__
#define __FormatterConverter_FWD_DEFINED__

typedef struct FormatterConverter FormatterConverter;

#endif 	

#ifndef __FormatterServices_FWD_DEFINED__
#define __FormatterServices_FWD_DEFINED__

typedef struct FormatterServices FormatterServices;

#endif 	

#ifndef __ObjectIDGenerator_FWD_DEFINED__
#define __ObjectIDGenerator_FWD_DEFINED__

typedef struct ObjectIDGenerator ObjectIDGenerator;

#endif 	

#ifndef __ObjectManager_FWD_DEFINED__
#define __ObjectManager_FWD_DEFINED__

typedef struct ObjectManager ObjectManager;

#endif 	

#ifndef __OptionalFieldAttribute_FWD_DEFINED__
#define __OptionalFieldAttribute_FWD_DEFINED__

typedef struct OptionalFieldAttribute OptionalFieldAttribute;

#endif 	

#ifndef __OnSerializingAttribute_FWD_DEFINED__
#define __OnSerializingAttribute_FWD_DEFINED__

typedef struct OnSerializingAttribute OnSerializingAttribute;

#endif 	

#ifndef __OnSerializedAttribute_FWD_DEFINED__
#define __OnSerializedAttribute_FWD_DEFINED__

typedef struct OnSerializedAttribute OnSerializedAttribute;

#endif 	

#ifndef __OnDeserializingAttribute_FWD_DEFINED__
#define __OnDeserializingAttribute_FWD_DEFINED__

typedef struct OnDeserializingAttribute OnDeserializingAttribute;

#endif 	

#ifndef __OnDeserializedAttribute_FWD_DEFINED__
#define __OnDeserializedAttribute_FWD_DEFINED__

typedef struct OnDeserializedAttribute OnDeserializedAttribute;

#endif 	

#ifndef __SerializationBinder_FWD_DEFINED__
#define __SerializationBinder_FWD_DEFINED__

typedef struct SerializationBinder SerializationBinder;

#endif 	

#ifndef __SerializationInfo_FWD_DEFINED__
#define __SerializationInfo_FWD_DEFINED__

typedef struct SerializationInfo SerializationInfo;

#endif 	

#ifndef __SerializationInfoEnumerator_FWD_DEFINED__
#define __SerializationInfoEnumerator_FWD_DEFINED__

typedef struct SerializationInfoEnumerator SerializationInfoEnumerator;

#endif 	

#ifndef __SerializationException_FWD_DEFINED__
#define __SerializationException_FWD_DEFINED__

typedef struct SerializationException SerializationException;

#endif 	

#ifndef __SurrogateSelector_FWD_DEFINED__
#define __SurrogateSelector_FWD_DEFINED__

typedef struct SurrogateSelector SurrogateSelector;

#endif 	

#ifndef __Calendar_FWD_DEFINED__
#define __Calendar_FWD_DEFINED__

typedef struct Calendar Calendar;

#endif 	

#ifndef __EastAsianLunisolarCalendar_FWD_DEFINED__
#define __EastAsianLunisolarCalendar_FWD_DEFINED__

typedef struct EastAsianLunisolarCalendar EastAsianLunisolarCalendar;

#endif 	

#ifndef __CompareInfo_FWD_DEFINED__
#define __CompareInfo_FWD_DEFINED__

typedef struct CompareInfo CompareInfo;

#endif 	

#ifndef __CultureInfo_FWD_DEFINED__
#define __CultureInfo_FWD_DEFINED__

typedef struct CultureInfo CultureInfo;

#endif 	

#ifndef __DateTimeFormatInfo_FWD_DEFINED__
#define __DateTimeFormatInfo_FWD_DEFINED__

typedef struct DateTimeFormatInfo DateTimeFormatInfo;

#endif 	

#ifndef __DaylightTime_FWD_DEFINED__
#define __DaylightTime_FWD_DEFINED__

typedef struct DaylightTime DaylightTime;

#endif 	

#ifndef __GregorianCalendar_FWD_DEFINED__
#define __GregorianCalendar_FWD_DEFINED__

typedef struct GregorianCalendar GregorianCalendar;

#endif 	

#ifndef __HebrewCalendar_FWD_DEFINED__
#define __HebrewCalendar_FWD_DEFINED__

typedef struct HebrewCalendar HebrewCalendar;

#endif 	

#ifndef __HijriCalendar_FWD_DEFINED__
#define __HijriCalendar_FWD_DEFINED__

typedef struct HijriCalendar HijriCalendar;

#endif 	

#ifndef __JapaneseCalendar_FWD_DEFINED__
#define __JapaneseCalendar_FWD_DEFINED__

typedef struct JapaneseCalendar JapaneseCalendar;

#endif 	

#ifndef __JulianCalendar_FWD_DEFINED__
#define __JulianCalendar_FWD_DEFINED__

typedef struct JulianCalendar JulianCalendar;

#endif 	

#ifndef __KoreanCalendar_FWD_DEFINED__
#define __KoreanCalendar_FWD_DEFINED__

typedef struct KoreanCalendar KoreanCalendar;

#endif 	

#ifndef __RegionInfo_FWD_DEFINED__
#define __RegionInfo_FWD_DEFINED__

typedef struct RegionInfo RegionInfo;

#endif 	

#ifndef __SortKey_FWD_DEFINED__
#define __SortKey_FWD_DEFINED__

typedef struct SortKey SortKey;

#endif 	

#ifndef __StringInfo_FWD_DEFINED__
#define __StringInfo_FWD_DEFINED__

typedef struct StringInfo StringInfo;

#endif 	

#ifndef __TaiwanCalendar_FWD_DEFINED__
#define __TaiwanCalendar_FWD_DEFINED__

typedef struct TaiwanCalendar TaiwanCalendar;

#endif 	

#ifndef __TextElementEnumerator_FWD_DEFINED__
#define __TextElementEnumerator_FWD_DEFINED__

typedef struct TextElementEnumerator TextElementEnumerator;

#endif 	

#ifndef __TextInfo_FWD_DEFINED__
#define __TextInfo_FWD_DEFINED__

typedef struct TextInfo TextInfo;

#endif 	

#ifndef __ThaiBuddhistCalendar_FWD_DEFINED__
#define __ThaiBuddhistCalendar_FWD_DEFINED__

typedef struct ThaiBuddhistCalendar ThaiBuddhistCalendar;

#endif 	

#ifndef __NumberFormatInfo_FWD_DEFINED__
#define __NumberFormatInfo_FWD_DEFINED__

typedef struct NumberFormatInfo NumberFormatInfo;

#endif 	

#ifndef __Encoding_FWD_DEFINED__
#define __Encoding_FWD_DEFINED__

typedef struct Encoding Encoding;

#endif 	

#ifndef __Encoder_FWD_DEFINED__
#define __Encoder_FWD_DEFINED__

typedef struct Encoder Encoder;

#endif 	

#ifndef __Decoder_FWD_DEFINED__
#define __Decoder_FWD_DEFINED__

typedef struct Decoder Decoder;

#endif 	

#ifndef __ASCIIEncoding_FWD_DEFINED__
#define __ASCIIEncoding_FWD_DEFINED__

typedef struct ASCIIEncoding ASCIIEncoding;

#endif 	

#ifndef __UnicodeEncoding_FWD_DEFINED__
#define __UnicodeEncoding_FWD_DEFINED__

typedef struct UnicodeEncoding UnicodeEncoding;

#endif 	

#ifndef __UTF7Encoding_FWD_DEFINED__
#define __UTF7Encoding_FWD_DEFINED__

typedef struct UTF7Encoding UTF7Encoding;

#endif 	

#ifndef __UTF8Encoding_FWD_DEFINED__
#define __UTF8Encoding_FWD_DEFINED__

typedef struct UTF8Encoding UTF8Encoding;

#endif 	

#ifndef __MissingManifestResourceException_FWD_DEFINED__
#define __MissingManifestResourceException_FWD_DEFINED__

typedef struct MissingManifestResourceException MissingManifestResourceException;

#endif 	

#ifndef __MissingSatelliteAssemblyException_FWD_DEFINED__
#define __MissingSatelliteAssemblyException_FWD_DEFINED__

typedef struct MissingSatelliteAssemblyException MissingSatelliteAssemblyException;

#endif 	

#ifndef __NeutralResourcesLanguageAttribute_FWD_DEFINED__
#define __NeutralResourcesLanguageAttribute_FWD_DEFINED__

typedef struct NeutralResourcesLanguageAttribute NeutralResourcesLanguageAttribute;

#endif 	

#ifndef __ResourceManager_FWD_DEFINED__
#define __ResourceManager_FWD_DEFINED__

typedef struct ResourceManager ResourceManager;

#endif 	

#ifndef __ResourceReader_FWD_DEFINED__
#define __ResourceReader_FWD_DEFINED__

typedef struct ResourceReader ResourceReader;

#endif 	

#ifndef __ResourceSet_FWD_DEFINED__
#define __ResourceSet_FWD_DEFINED__

typedef struct ResourceSet ResourceSet;

#endif 	

#ifndef __ResourceWriter_FWD_DEFINED__
#define __ResourceWriter_FWD_DEFINED__

typedef struct ResourceWriter ResourceWriter;

#endif 	

#ifndef __SatelliteContractVersionAttribute_FWD_DEFINED__
#define __SatelliteContractVersionAttribute_FWD_DEFINED__

typedef struct SatelliteContractVersionAttribute SatelliteContractVersionAttribute;

#endif 	

#ifndef __Registry_FWD_DEFINED__
#define __Registry_FWD_DEFINED__

typedef struct Registry Registry;

#endif 	

#ifndef __RegistryKey_FWD_DEFINED__
#define __RegistryKey_FWD_DEFINED__

typedef struct RegistryKey RegistryKey;

#endif 	

#ifndef __AllMembershipCondition_FWD_DEFINED__
#define __AllMembershipCondition_FWD_DEFINED__

typedef struct AllMembershipCondition AllMembershipCondition;

#endif 	

#ifndef __ApplicationDirectory_FWD_DEFINED__
#define __ApplicationDirectory_FWD_DEFINED__

typedef struct ApplicationDirectory ApplicationDirectory;

#endif 	

#ifndef __ApplicationDirectoryMembershipCondition_FWD_DEFINED__
#define __ApplicationDirectoryMembershipCondition_FWD_DEFINED__

typedef struct ApplicationDirectoryMembershipCondition ApplicationDirectoryMembershipCondition;

#endif 	

#ifndef __ApplicationSecurityInfo_FWD_DEFINED__
#define __ApplicationSecurityInfo_FWD_DEFINED__

typedef struct ApplicationSecurityInfo ApplicationSecurityInfo;

#endif 	

#ifndef __ApplicationSecurityManager_FWD_DEFINED__
#define __ApplicationSecurityManager_FWD_DEFINED__

typedef struct ApplicationSecurityManager ApplicationSecurityManager;

#endif 	

#ifndef __ApplicationTrust_FWD_DEFINED__
#define __ApplicationTrust_FWD_DEFINED__

typedef struct ApplicationTrust ApplicationTrust;

#endif 	

#ifndef __ApplicationTrustCollection_FWD_DEFINED__
#define __ApplicationTrustCollection_FWD_DEFINED__

typedef struct ApplicationTrustCollection ApplicationTrustCollection;

#endif 	

#ifndef __ApplicationTrustEnumerator_FWD_DEFINED__
#define __ApplicationTrustEnumerator_FWD_DEFINED__

typedef struct ApplicationTrustEnumerator ApplicationTrustEnumerator;

#endif 	

#ifndef __CodeGroup_FWD_DEFINED__
#define __CodeGroup_FWD_DEFINED__

typedef struct CodeGroup CodeGroup;

#endif 	

#ifndef __Evidence_FWD_DEFINED__
#define __Evidence_FWD_DEFINED__

typedef struct Evidence Evidence;

#endif 	

#ifndef __FileCodeGroup_FWD_DEFINED__
#define __FileCodeGroup_FWD_DEFINED__

typedef struct FileCodeGroup FileCodeGroup;

#endif 	

#ifndef __FirstMatchCodeGroup_FWD_DEFINED__
#define __FirstMatchCodeGroup_FWD_DEFINED__

typedef struct FirstMatchCodeGroup FirstMatchCodeGroup;

#endif 	

#ifndef __TrustManagerContext_FWD_DEFINED__
#define __TrustManagerContext_FWD_DEFINED__

typedef struct TrustManagerContext TrustManagerContext;

#endif 	

#ifndef __CodeConnectAccess_FWD_DEFINED__
#define __CodeConnectAccess_FWD_DEFINED__

typedef struct CodeConnectAccess CodeConnectAccess;

#endif 	

#ifndef __NetCodeGroup_FWD_DEFINED__
#define __NetCodeGroup_FWD_DEFINED__

typedef struct NetCodeGroup NetCodeGroup;

#endif 	

#ifndef __PermissionRequestEvidence_FWD_DEFINED__
#define __PermissionRequestEvidence_FWD_DEFINED__

typedef struct PermissionRequestEvidence PermissionRequestEvidence;

#endif 	

#ifndef __PolicyException_FWD_DEFINED__
#define __PolicyException_FWD_DEFINED__

typedef struct PolicyException PolicyException;

#endif 	

#ifndef __PolicyLevel_FWD_DEFINED__
#define __PolicyLevel_FWD_DEFINED__

typedef struct PolicyLevel PolicyLevel;

#endif 	

#ifndef __PolicyStatement_FWD_DEFINED__
#define __PolicyStatement_FWD_DEFINED__

typedef struct PolicyStatement PolicyStatement;

#endif 	

#ifndef __Site_FWD_DEFINED__
#define __Site_FWD_DEFINED__

typedef struct Site Site;

#endif 	

#ifndef __SiteMembershipCondition_FWD_DEFINED__
#define __SiteMembershipCondition_FWD_DEFINED__

typedef struct SiteMembershipCondition SiteMembershipCondition;

#endif 	

#ifndef __StrongName_FWD_DEFINED__
#define __StrongName_FWD_DEFINED__

typedef struct StrongName StrongName;

#endif 	

#ifndef __StrongNameMembershipCondition_FWD_DEFINED__
#define __StrongNameMembershipCondition_FWD_DEFINED__

typedef struct StrongNameMembershipCondition StrongNameMembershipCondition;

#endif 	

#ifndef __UnionCodeGroup_FWD_DEFINED__
#define __UnionCodeGroup_FWD_DEFINED__

typedef struct UnionCodeGroup UnionCodeGroup;

#endif 	

#ifndef __Url_FWD_DEFINED__
#define __Url_FWD_DEFINED__

typedef struct Url Url;

#endif 	

#ifndef __UrlMembershipCondition_FWD_DEFINED__
#define __UrlMembershipCondition_FWD_DEFINED__

typedef struct UrlMembershipCondition UrlMembershipCondition;

#endif 	

#ifndef __Zone_FWD_DEFINED__
#define __Zone_FWD_DEFINED__

typedef struct Zone Zone;

#endif 	

#ifndef __ZoneMembershipCondition_FWD_DEFINED__
#define __ZoneMembershipCondition_FWD_DEFINED__

typedef struct ZoneMembershipCondition ZoneMembershipCondition;

#endif 	

#ifndef __GacInstalled_FWD_DEFINED__
#define __GacInstalled_FWD_DEFINED__

typedef struct GacInstalled GacInstalled;

#endif 	

#ifndef __GacMembershipCondition_FWD_DEFINED__
#define __GacMembershipCondition_FWD_DEFINED__

typedef struct GacMembershipCondition GacMembershipCondition;

#endif 	

#ifndef __Hash_FWD_DEFINED__
#define __Hash_FWD_DEFINED__

typedef struct Hash Hash;

#endif 	

#ifndef __HashMembershipCondition_FWD_DEFINED__
#define __HashMembershipCondition_FWD_DEFINED__

typedef struct HashMembershipCondition HashMembershipCondition;

#endif 	

#ifndef __Publisher_FWD_DEFINED__
#define __Publisher_FWD_DEFINED__

typedef struct Publisher Publisher;

#endif 	

#ifndef __PublisherMembershipCondition_FWD_DEFINED__
#define __PublisherMembershipCondition_FWD_DEFINED__

typedef struct PublisherMembershipCondition PublisherMembershipCondition;

#endif 	

#ifndef __GenericIdentity_FWD_DEFINED__
#define __GenericIdentity_FWD_DEFINED__

typedef struct GenericIdentity GenericIdentity;

#endif 	

#ifndef __GenericPrincipal_FWD_DEFINED__
#define __GenericPrincipal_FWD_DEFINED__

typedef struct GenericPrincipal GenericPrincipal;

#endif 	

#ifndef __WindowsIdentity_FWD_DEFINED__
#define __WindowsIdentity_FWD_DEFINED__

typedef struct WindowsIdentity WindowsIdentity;

#endif 	

#ifndef __WindowsImpersonationContext_FWD_DEFINED__
#define __WindowsImpersonationContext_FWD_DEFINED__

typedef struct WindowsImpersonationContext WindowsImpersonationContext;

#endif 	

#ifndef __WindowsPrincipal_FWD_DEFINED__
#define __WindowsPrincipal_FWD_DEFINED__

typedef struct WindowsPrincipal WindowsPrincipal;

#endif 	

#ifndef __UnmanagedFunctionPointerAttribute_FWD_DEFINED__
#define __UnmanagedFunctionPointerAttribute_FWD_DEFINED__

typedef struct UnmanagedFunctionPointerAttribute UnmanagedFunctionPointerAttribute;

#endif 	

#ifndef __DispIdAttribute_FWD_DEFINED__
#define __DispIdAttribute_FWD_DEFINED__

typedef struct DispIdAttribute DispIdAttribute;

#endif 	

#ifndef __InterfaceTypeAttribute_FWD_DEFINED__
#define __InterfaceTypeAttribute_FWD_DEFINED__

typedef struct InterfaceTypeAttribute InterfaceTypeAttribute;

#endif 	

#ifndef __ComDefaultInterfaceAttribute_FWD_DEFINED__
#define __ComDefaultInterfaceAttribute_FWD_DEFINED__

typedef struct ComDefaultInterfaceAttribute ComDefaultInterfaceAttribute;

#endif 	

#ifndef __ClassInterfaceAttribute_FWD_DEFINED__
#define __ClassInterfaceAttribute_FWD_DEFINED__

typedef struct ClassInterfaceAttribute ClassInterfaceAttribute;

#endif 	

#ifndef __ComVisibleAttribute_FWD_DEFINED__
#define __ComVisibleAttribute_FWD_DEFINED__

typedef struct ComVisibleAttribute ComVisibleAttribute;

#endif 	

#ifndef __TypeLibImportClassAttribute_FWD_DEFINED__
#define __TypeLibImportClassAttribute_FWD_DEFINED__

typedef struct TypeLibImportClassAttribute TypeLibImportClassAttribute;

#endif 	

#ifndef __LCIDConversionAttribute_FWD_DEFINED__
#define __LCIDConversionAttribute_FWD_DEFINED__

typedef struct LCIDConversionAttribute LCIDConversionAttribute;

#endif 	

#ifndef __ComRegisterFunctionAttribute_FWD_DEFINED__
#define __ComRegisterFunctionAttribute_FWD_DEFINED__

typedef struct ComRegisterFunctionAttribute ComRegisterFunctionAttribute;

#endif 	

#ifndef __ComUnregisterFunctionAttribute_FWD_DEFINED__
#define __ComUnregisterFunctionAttribute_FWD_DEFINED__

typedef struct ComUnregisterFunctionAttribute ComUnregisterFunctionAttribute;

#endif 	

#ifndef __ProgIdAttribute_FWD_DEFINED__
#define __ProgIdAttribute_FWD_DEFINED__

typedef struct ProgIdAttribute ProgIdAttribute;

#endif 	

#ifndef __ImportedFromTypeLibAttribute_FWD_DEFINED__
#define __ImportedFromTypeLibAttribute_FWD_DEFINED__

typedef struct ImportedFromTypeLibAttribute ImportedFromTypeLibAttribute;

#endif 	

#ifndef __IDispatchImplAttribute_FWD_DEFINED__
#define __IDispatchImplAttribute_FWD_DEFINED__

typedef struct IDispatchImplAttribute IDispatchImplAttribute;

#endif 	

#ifndef __ComSourceInterfacesAttribute_FWD_DEFINED__
#define __ComSourceInterfacesAttribute_FWD_DEFINED__

typedef struct ComSourceInterfacesAttribute ComSourceInterfacesAttribute;

#endif 	

#ifndef __ComConversionLossAttribute_FWD_DEFINED__
#define __ComConversionLossAttribute_FWD_DEFINED__

typedef struct ComConversionLossAttribute ComConversionLossAttribute;

#endif 	

#ifndef __TypeLibTypeAttribute_FWD_DEFINED__
#define __TypeLibTypeAttribute_FWD_DEFINED__

typedef struct TypeLibTypeAttribute TypeLibTypeAttribute;

#endif 	

#ifndef __TypeLibFuncAttribute_FWD_DEFINED__
#define __TypeLibFuncAttribute_FWD_DEFINED__

typedef struct TypeLibFuncAttribute TypeLibFuncAttribute;

#endif 	

#ifndef __TypeLibVarAttribute_FWD_DEFINED__
#define __TypeLibVarAttribute_FWD_DEFINED__

typedef struct TypeLibVarAttribute TypeLibVarAttribute;

#endif 	

#ifndef __MarshalAsAttribute_FWD_DEFINED__
#define __MarshalAsAttribute_FWD_DEFINED__

typedef struct MarshalAsAttribute MarshalAsAttribute;

#endif 	

#ifndef __ComImportAttribute_FWD_DEFINED__
#define __ComImportAttribute_FWD_DEFINED__

typedef struct ComImportAttribute ComImportAttribute;

#endif 	

#ifndef __GuidAttribute_FWD_DEFINED__
#define __GuidAttribute_FWD_DEFINED__

typedef struct GuidAttribute GuidAttribute;

#endif 	

#ifndef __PreserveSigAttribute_FWD_DEFINED__
#define __PreserveSigAttribute_FWD_DEFINED__

typedef struct PreserveSigAttribute PreserveSigAttribute;

#endif 	

#ifndef __InAttribute_FWD_DEFINED__
#define __InAttribute_FWD_DEFINED__

typedef struct InAttribute InAttribute;

#endif 	

#ifndef __OutAttribute_FWD_DEFINED__
#define __OutAttribute_FWD_DEFINED__

typedef struct OutAttribute OutAttribute;

#endif 	

#ifndef __OptionalAttribute_FWD_DEFINED__
#define __OptionalAttribute_FWD_DEFINED__

typedef struct OptionalAttribute OptionalAttribute;

#endif 	

#ifndef __DllImportAttribute_FWD_DEFINED__
#define __DllImportAttribute_FWD_DEFINED__

typedef struct DllImportAttribute DllImportAttribute;

#endif 	

#ifndef __StructLayoutAttribute_FWD_DEFINED__
#define __StructLayoutAttribute_FWD_DEFINED__

typedef struct StructLayoutAttribute StructLayoutAttribute;

#endif 	

#ifndef __FieldOffsetAttribute_FWD_DEFINED__
#define __FieldOffsetAttribute_FWD_DEFINED__

typedef struct FieldOffsetAttribute FieldOffsetAttribute;

#endif 	

#ifndef __ComAliasNameAttribute_FWD_DEFINED__
#define __ComAliasNameAttribute_FWD_DEFINED__

typedef struct ComAliasNameAttribute ComAliasNameAttribute;

#endif 	

#ifndef __AutomationProxyAttribute_FWD_DEFINED__
#define __AutomationProxyAttribute_FWD_DEFINED__

typedef struct AutomationProxyAttribute AutomationProxyAttribute;

#endif 	

#ifndef __PrimaryInteropAssemblyAttribute_FWD_DEFINED__
#define __PrimaryInteropAssemblyAttribute_FWD_DEFINED__

typedef struct PrimaryInteropAssemblyAttribute PrimaryInteropAssemblyAttribute;

#endif 	

#ifndef __CoClassAttribute_FWD_DEFINED__
#define __CoClassAttribute_FWD_DEFINED__

typedef struct CoClassAttribute CoClassAttribute;

#endif 	

#ifndef __ComEventInterfaceAttribute_FWD_DEFINED__
#define __ComEventInterfaceAttribute_FWD_DEFINED__

typedef struct ComEventInterfaceAttribute ComEventInterfaceAttribute;

#endif 	

#ifndef __TypeLibVersionAttribute_FWD_DEFINED__
#define __TypeLibVersionAttribute_FWD_DEFINED__

typedef struct TypeLibVersionAttribute TypeLibVersionAttribute;

#endif 	

#ifndef __ComCompatibleVersionAttribute_FWD_DEFINED__
#define __ComCompatibleVersionAttribute_FWD_DEFINED__

typedef struct ComCompatibleVersionAttribute ComCompatibleVersionAttribute;

#endif 	

#ifndef __BestFitMappingAttribute_FWD_DEFINED__
#define __BestFitMappingAttribute_FWD_DEFINED__

typedef struct BestFitMappingAttribute BestFitMappingAttribute;

#endif 	

#ifndef __DefaultCharSetAttribute_FWD_DEFINED__
#define __DefaultCharSetAttribute_FWD_DEFINED__

typedef struct DefaultCharSetAttribute DefaultCharSetAttribute;

#endif 	

#ifndef __SetWin32ContextInIDispatchAttribute_FWD_DEFINED__
#define __SetWin32ContextInIDispatchAttribute_FWD_DEFINED__

typedef struct SetWin32ContextInIDispatchAttribute SetWin32ContextInIDispatchAttribute;

#endif 	

#ifndef __ExternalException_FWD_DEFINED__
#define __ExternalException_FWD_DEFINED__

typedef struct ExternalException ExternalException;

#endif 	

#ifndef __COMException_FWD_DEFINED__
#define __COMException_FWD_DEFINED__

typedef struct COMException COMException;

#endif 	

#ifndef __InvalidOleVariantTypeException_FWD_DEFINED__
#define __InvalidOleVariantTypeException_FWD_DEFINED__

typedef struct InvalidOleVariantTypeException InvalidOleVariantTypeException;

#endif 	

#ifndef __MarshalDirectiveException_FWD_DEFINED__
#define __MarshalDirectiveException_FWD_DEFINED__

typedef struct MarshalDirectiveException MarshalDirectiveException;

#endif 	

#ifndef __RuntimeEnvironment_FWD_DEFINED__
#define __RuntimeEnvironment_FWD_DEFINED__

typedef struct RuntimeEnvironment RuntimeEnvironment;

#endif 	

#ifndef __SEHException_FWD_DEFINED__
#define __SEHException_FWD_DEFINED__

typedef struct SEHException SEHException;

#endif 	

#ifndef __BStrWrapper_FWD_DEFINED__
#define __BStrWrapper_FWD_DEFINED__

typedef struct BStrWrapper BStrWrapper;

#endif 	

#ifndef __CurrencyWrapper_FWD_DEFINED__
#define __CurrencyWrapper_FWD_DEFINED__

typedef struct CurrencyWrapper CurrencyWrapper;

#endif 	

#ifndef __DispatchWrapper_FWD_DEFINED__
#define __DispatchWrapper_FWD_DEFINED__

typedef struct DispatchWrapper DispatchWrapper;

#endif 	

#ifndef __ErrorWrapper_FWD_DEFINED__
#define __ErrorWrapper_FWD_DEFINED__

typedef struct ErrorWrapper ErrorWrapper;

#endif 	

#ifndef __ExtensibleClassFactory_FWD_DEFINED__
#define __ExtensibleClassFactory_FWD_DEFINED__

typedef struct ExtensibleClassFactory ExtensibleClassFactory;

#endif 	

#ifndef __InvalidComObjectException_FWD_DEFINED__
#define __InvalidComObjectException_FWD_DEFINED__

typedef struct InvalidComObjectException InvalidComObjectException;

#endif 	

#ifndef __ObjectCreationDelegate_FWD_DEFINED__
#define __ObjectCreationDelegate_FWD_DEFINED__

typedef struct ObjectCreationDelegate ObjectCreationDelegate;

#endif 	

#ifndef __RegistrationServices_FWD_DEFINED__
#define __RegistrationServices_FWD_DEFINED__

typedef struct RegistrationServices RegistrationServices;

#endif 	

#ifndef __SafeArrayRankMismatchException_FWD_DEFINED__
#define __SafeArrayRankMismatchException_FWD_DEFINED__

typedef struct SafeArrayRankMismatchException SafeArrayRankMismatchException;

#endif 	

#ifndef __SafeArrayTypeMismatchException_FWD_DEFINED__
#define __SafeArrayTypeMismatchException_FWD_DEFINED__

typedef struct SafeArrayTypeMismatchException SafeArrayTypeMismatchException;

#endif 	

#ifndef __TypeLibConverter_FWD_DEFINED__
#define __TypeLibConverter_FWD_DEFINED__

typedef struct TypeLibConverter TypeLibConverter;

#endif 	

#ifndef __UnknownWrapper_FWD_DEFINED__
#define __UnknownWrapper_FWD_DEFINED__

typedef struct UnknownWrapper UnknownWrapper;

#endif 	

#ifndef __Stream_FWD_DEFINED__
#define __Stream_FWD_DEFINED__

typedef struct Stream Stream;

#endif 	

#ifndef __BinaryReader_FWD_DEFINED__
#define __BinaryReader_FWD_DEFINED__

typedef struct BinaryReader BinaryReader;

#endif 	

#ifndef __BinaryWriter_FWD_DEFINED__
#define __BinaryWriter_FWD_DEFINED__

typedef struct BinaryWriter BinaryWriter;

#endif 	

#ifndef __BufferedStream_FWD_DEFINED__
#define __BufferedStream_FWD_DEFINED__

typedef struct BufferedStream BufferedStream;

#endif 	

#ifndef __Directory_FWD_DEFINED__
#define __Directory_FWD_DEFINED__

typedef struct Directory Directory;

#endif 	

#ifndef __FileSystemInfo_FWD_DEFINED__
#define __FileSystemInfo_FWD_DEFINED__

typedef struct FileSystemInfo FileSystemInfo;

#endif 	

#ifndef __DirectoryInfo_FWD_DEFINED__
#define __DirectoryInfo_FWD_DEFINED__

typedef struct DirectoryInfo DirectoryInfo;

#endif 	

#ifndef __IOException_FWD_DEFINED__
#define __IOException_FWD_DEFINED__

typedef struct IOException IOException;

#endif 	

#ifndef __DirectoryNotFoundException_FWD_DEFINED__
#define __DirectoryNotFoundException_FWD_DEFINED__

typedef struct DirectoryNotFoundException DirectoryNotFoundException;

#endif 	

#ifndef __DriveInfo_FWD_DEFINED__
#define __DriveInfo_FWD_DEFINED__

typedef struct DriveInfo DriveInfo;

#endif 	

#ifndef __DriveNotFoundException_FWD_DEFINED__
#define __DriveNotFoundException_FWD_DEFINED__

typedef struct DriveNotFoundException DriveNotFoundException;

#endif 	

#ifndef __EndOfStreamException_FWD_DEFINED__
#define __EndOfStreamException_FWD_DEFINED__

typedef struct EndOfStreamException EndOfStreamException;

#endif 	

#ifndef __File_FWD_DEFINED__
#define __File_FWD_DEFINED__

typedef struct File File;

#endif 	

#ifndef __FileInfo_FWD_DEFINED__
#define __FileInfo_FWD_DEFINED__

typedef struct FileInfo FileInfo;

#endif 	

#ifndef __FileLoadException_FWD_DEFINED__
#define __FileLoadException_FWD_DEFINED__

typedef struct FileLoadException FileLoadException;

#endif 	

#ifndef __FileNotFoundException_FWD_DEFINED__
#define __FileNotFoundException_FWD_DEFINED__

typedef struct FileNotFoundException FileNotFoundException;

#endif 	

#ifndef __FileStream_FWD_DEFINED__
#define __FileStream_FWD_DEFINED__

typedef struct FileStream FileStream;

#endif 	

#ifndef __MemoryStream_FWD_DEFINED__
#define __MemoryStream_FWD_DEFINED__

typedef struct MemoryStream MemoryStream;

#endif 	

#ifndef __Path_FWD_DEFINED__
#define __Path_FWD_DEFINED__

typedef struct Path Path;

#endif 	

#ifndef __PathTooLongException_FWD_DEFINED__
#define __PathTooLongException_FWD_DEFINED__

typedef struct PathTooLongException PathTooLongException;

#endif 	

#ifndef __TextReader_FWD_DEFINED__
#define __TextReader_FWD_DEFINED__

typedef struct TextReader TextReader;

#endif 	

#ifndef __StreamReader_FWD_DEFINED__
#define __StreamReader_FWD_DEFINED__

typedef struct StreamReader StreamReader;

#endif 	

#ifndef __TextWriter_FWD_DEFINED__
#define __TextWriter_FWD_DEFINED__

typedef struct TextWriter TextWriter;

#endif 	

#ifndef __StreamWriter_FWD_DEFINED__
#define __StreamWriter_FWD_DEFINED__

typedef struct StreamWriter StreamWriter;

#endif 	

#ifndef __StringReader_FWD_DEFINED__
#define __StringReader_FWD_DEFINED__

typedef struct StringReader StringReader;

#endif 	

#ifndef __StringWriter_FWD_DEFINED__
#define __StringWriter_FWD_DEFINED__

typedef struct StringWriter StringWriter;

#endif 	

#ifndef __AccessedThroughPropertyAttribute_FWD_DEFINED__
#define __AccessedThroughPropertyAttribute_FWD_DEFINED__

typedef struct AccessedThroughPropertyAttribute AccessedThroughPropertyAttribute;

#endif 	

#ifndef __CallConvCdecl_FWD_DEFINED__
#define __CallConvCdecl_FWD_DEFINED__

typedef struct CallConvCdecl CallConvCdecl;

#endif 	

#ifndef __CallConvStdcall_FWD_DEFINED__
#define __CallConvStdcall_FWD_DEFINED__

typedef struct CallConvStdcall CallConvStdcall;

#endif 	

#ifndef __CallConvThiscall_FWD_DEFINED__
#define __CallConvThiscall_FWD_DEFINED__

typedef struct CallConvThiscall CallConvThiscall;

#endif 	

#ifndef __CallConvFastcall_FWD_DEFINED__
#define __CallConvFastcall_FWD_DEFINED__

typedef struct CallConvFastcall CallConvFastcall;

#endif 	

#ifndef __CustomConstantAttribute_FWD_DEFINED__
#define __CustomConstantAttribute_FWD_DEFINED__

typedef struct CustomConstantAttribute CustomConstantAttribute;

#endif 	

#ifndef __DateTimeConstantAttribute_FWD_DEFINED__
#define __DateTimeConstantAttribute_FWD_DEFINED__

typedef struct DateTimeConstantAttribute DateTimeConstantAttribute;

#endif 	

#ifndef __DiscardableAttribute_FWD_DEFINED__
#define __DiscardableAttribute_FWD_DEFINED__

typedef struct DiscardableAttribute DiscardableAttribute;

#endif 	

#ifndef __DecimalConstantAttribute_FWD_DEFINED__
#define __DecimalConstantAttribute_FWD_DEFINED__

typedef struct DecimalConstantAttribute DecimalConstantAttribute;

#endif 	

#ifndef __CompilationRelaxationsAttribute_FWD_DEFINED__
#define __CompilationRelaxationsAttribute_FWD_DEFINED__

typedef struct CompilationRelaxationsAttribute CompilationRelaxationsAttribute;

#endif 	

#ifndef __CompilerGlobalScopeAttribute_FWD_DEFINED__
#define __CompilerGlobalScopeAttribute_FWD_DEFINED__

typedef struct CompilerGlobalScopeAttribute CompilerGlobalScopeAttribute;

#endif 	

#ifndef __IndexerNameAttribute_FWD_DEFINED__
#define __IndexerNameAttribute_FWD_DEFINED__

typedef struct IndexerNameAttribute IndexerNameAttribute;

#endif 	

#ifndef __IsVolatile_FWD_DEFINED__
#define __IsVolatile_FWD_DEFINED__

typedef struct IsVolatile IsVolatile;

#endif 	

#ifndef __MethodImplAttribute_FWD_DEFINED__
#define __MethodImplAttribute_FWD_DEFINED__

typedef struct MethodImplAttribute MethodImplAttribute;

#endif 	

#ifndef __RequiredAttributeAttribute_FWD_DEFINED__
#define __RequiredAttributeAttribute_FWD_DEFINED__

typedef struct RequiredAttributeAttribute RequiredAttributeAttribute;

#endif 	

#ifndef __IsCopyConstructed_FWD_DEFINED__
#define __IsCopyConstructed_FWD_DEFINED__

typedef struct IsCopyConstructed IsCopyConstructed;

#endif 	

#ifndef __NativeCppClassAttribute_FWD_DEFINED__
#define __NativeCppClassAttribute_FWD_DEFINED__

typedef struct NativeCppClassAttribute NativeCppClassAttribute;

#endif 	

#ifndef __IDispatchConstantAttribute_FWD_DEFINED__
#define __IDispatchConstantAttribute_FWD_DEFINED__

typedef struct IDispatchConstantAttribute IDispatchConstantAttribute;

#endif 	

#ifndef __IUnknownConstantAttribute_FWD_DEFINED__
#define __IUnknownConstantAttribute_FWD_DEFINED__

typedef struct IUnknownConstantAttribute IUnknownConstantAttribute;

#endif 	

#ifndef __SecurityElement_FWD_DEFINED__
#define __SecurityElement_FWD_DEFINED__

typedef struct SecurityElement SecurityElement;

#endif 	

#ifndef __XmlSyntaxException_FWD_DEFINED__
#define __XmlSyntaxException_FWD_DEFINED__

typedef struct XmlSyntaxException XmlSyntaxException;

#endif 	

#ifndef __CodeAccessPermission_FWD_DEFINED__
#define __CodeAccessPermission_FWD_DEFINED__

typedef struct CodeAccessPermission CodeAccessPermission;

#endif 	

#ifndef __EnvironmentPermission_FWD_DEFINED__
#define __EnvironmentPermission_FWD_DEFINED__

typedef struct EnvironmentPermission EnvironmentPermission;

#endif 	

#ifndef __FileDialogPermission_FWD_DEFINED__
#define __FileDialogPermission_FWD_DEFINED__

typedef struct FileDialogPermission FileDialogPermission;

#endif 	

#ifndef __FileIOPermission_FWD_DEFINED__
#define __FileIOPermission_FWD_DEFINED__

typedef struct FileIOPermission FileIOPermission;

#endif 	

#ifndef __SecurityAttribute_FWD_DEFINED__
#define __SecurityAttribute_FWD_DEFINED__

typedef struct SecurityAttribute SecurityAttribute;

#endif 	

#ifndef __CodeAccessSecurityAttribute_FWD_DEFINED__
#define __CodeAccessSecurityAttribute_FWD_DEFINED__

typedef struct CodeAccessSecurityAttribute CodeAccessSecurityAttribute;

#endif 	

#ifndef __HostProtectionAttribute_FWD_DEFINED__
#define __HostProtectionAttribute_FWD_DEFINED__

typedef struct HostProtectionAttribute HostProtectionAttribute;

#endif 	

#ifndef __IsolatedStoragePermission_FWD_DEFINED__
#define __IsolatedStoragePermission_FWD_DEFINED__

typedef struct IsolatedStoragePermission IsolatedStoragePermission;

#endif 	

#ifndef __IsolatedStorageFilePermission_FWD_DEFINED__
#define __IsolatedStorageFilePermission_FWD_DEFINED__

typedef struct IsolatedStorageFilePermission IsolatedStorageFilePermission;

#endif 	

#ifndef __EnvironmentPermissionAttribute_FWD_DEFINED__
#define __EnvironmentPermissionAttribute_FWD_DEFINED__

typedef struct EnvironmentPermissionAttribute EnvironmentPermissionAttribute;

#endif 	

#ifndef __FileDialogPermissionAttribute_FWD_DEFINED__
#define __FileDialogPermissionAttribute_FWD_DEFINED__

typedef struct FileDialogPermissionAttribute FileDialogPermissionAttribute;

#endif 	

#ifndef __FileIOPermissionAttribute_FWD_DEFINED__
#define __FileIOPermissionAttribute_FWD_DEFINED__

typedef struct FileIOPermissionAttribute FileIOPermissionAttribute;

#endif 	

#ifndef __KeyContainerPermissionAttribute_FWD_DEFINED__
#define __KeyContainerPermissionAttribute_FWD_DEFINED__

typedef struct KeyContainerPermissionAttribute KeyContainerPermissionAttribute;

#endif 	

#ifndef __PrincipalPermissionAttribute_FWD_DEFINED__
#define __PrincipalPermissionAttribute_FWD_DEFINED__

typedef struct PrincipalPermissionAttribute PrincipalPermissionAttribute;

#endif 	

#ifndef __ReflectionPermissionAttribute_FWD_DEFINED__
#define __ReflectionPermissionAttribute_FWD_DEFINED__

typedef struct ReflectionPermissionAttribute ReflectionPermissionAttribute;

#endif 	

#ifndef __RegistryPermissionAttribute_FWD_DEFINED__
#define __RegistryPermissionAttribute_FWD_DEFINED__

typedef struct RegistryPermissionAttribute RegistryPermissionAttribute;

#endif 	

#ifndef __SecurityPermissionAttribute_FWD_DEFINED__
#define __SecurityPermissionAttribute_FWD_DEFINED__

typedef struct SecurityPermissionAttribute SecurityPermissionAttribute;

#endif 	

#ifndef __UIPermissionAttribute_FWD_DEFINED__
#define __UIPermissionAttribute_FWD_DEFINED__

typedef struct UIPermissionAttribute UIPermissionAttribute;

#endif 	

#ifndef __ZoneIdentityPermissionAttribute_FWD_DEFINED__
#define __ZoneIdentityPermissionAttribute_FWD_DEFINED__

typedef struct ZoneIdentityPermissionAttribute ZoneIdentityPermissionAttribute;

#endif 	

#ifndef __StrongNameIdentityPermissionAttribute_FWD_DEFINED__
#define __StrongNameIdentityPermissionAttribute_FWD_DEFINED__

typedef struct StrongNameIdentityPermissionAttribute StrongNameIdentityPermissionAttribute;

#endif 	

#ifndef __SiteIdentityPermissionAttribute_FWD_DEFINED__
#define __SiteIdentityPermissionAttribute_FWD_DEFINED__

typedef struct SiteIdentityPermissionAttribute SiteIdentityPermissionAttribute;

#endif 	

#ifndef __UrlIdentityPermissionAttribute_FWD_DEFINED__
#define __UrlIdentityPermissionAttribute_FWD_DEFINED__

typedef struct UrlIdentityPermissionAttribute UrlIdentityPermissionAttribute;

#endif 	

#ifndef __PublisherIdentityPermissionAttribute_FWD_DEFINED__
#define __PublisherIdentityPermissionAttribute_FWD_DEFINED__

typedef struct PublisherIdentityPermissionAttribute PublisherIdentityPermissionAttribute;

#endif 	

#ifndef __IsolatedStoragePermissionAttribute_FWD_DEFINED__
#define __IsolatedStoragePermissionAttribute_FWD_DEFINED__

typedef struct IsolatedStoragePermissionAttribute IsolatedStoragePermissionAttribute;

#endif 	

#ifndef __IsolatedStorageFilePermissionAttribute_FWD_DEFINED__
#define __IsolatedStorageFilePermissionAttribute_FWD_DEFINED__

typedef struct IsolatedStorageFilePermissionAttribute IsolatedStorageFilePermissionAttribute;

#endif 	

#ifndef __PermissionSetAttribute_FWD_DEFINED__
#define __PermissionSetAttribute_FWD_DEFINED__

typedef struct PermissionSetAttribute PermissionSetAttribute;

#endif 	

#ifndef __ReflectionPermission_FWD_DEFINED__
#define __ReflectionPermission_FWD_DEFINED__

typedef struct ReflectionPermission ReflectionPermission;

#endif 	

#ifndef __PrincipalPermission_FWD_DEFINED__
#define __PrincipalPermission_FWD_DEFINED__

typedef struct PrincipalPermission PrincipalPermission;

#endif 	

#ifndef __SecurityPermission_FWD_DEFINED__
#define __SecurityPermission_FWD_DEFINED__

typedef struct SecurityPermission SecurityPermission;

#endif 	

#ifndef __SiteIdentityPermission_FWD_DEFINED__
#define __SiteIdentityPermission_FWD_DEFINED__

typedef struct SiteIdentityPermission SiteIdentityPermission;

#endif 	

#ifndef __StrongNameIdentityPermission_FWD_DEFINED__
#define __StrongNameIdentityPermission_FWD_DEFINED__

typedef struct StrongNameIdentityPermission StrongNameIdentityPermission;

#endif 	

#ifndef __StrongNamePublicKeyBlob_FWD_DEFINED__
#define __StrongNamePublicKeyBlob_FWD_DEFINED__

typedef struct StrongNamePublicKeyBlob StrongNamePublicKeyBlob;

#endif 	

#ifndef __UIPermission_FWD_DEFINED__
#define __UIPermission_FWD_DEFINED__

typedef struct UIPermission UIPermission;

#endif 	

#ifndef __UrlIdentityPermission_FWD_DEFINED__
#define __UrlIdentityPermission_FWD_DEFINED__

typedef struct UrlIdentityPermission UrlIdentityPermission;

#endif 	

#ifndef __ZoneIdentityPermission_FWD_DEFINED__
#define __ZoneIdentityPermission_FWD_DEFINED__

typedef struct ZoneIdentityPermission ZoneIdentityPermission;

#endif 	

#ifndef __GacIdentityPermissionAttribute_FWD_DEFINED__
#define __GacIdentityPermissionAttribute_FWD_DEFINED__

typedef struct GacIdentityPermissionAttribute GacIdentityPermissionAttribute;

#endif 	

#ifndef __GacIdentityPermission_FWD_DEFINED__
#define __GacIdentityPermission_FWD_DEFINED__

typedef struct GacIdentityPermission GacIdentityPermission;

#endif 	

#ifndef __KeyContainerPermissionAccessEntry_FWD_DEFINED__
#define __KeyContainerPermissionAccessEntry_FWD_DEFINED__

typedef struct KeyContainerPermissionAccessEntry KeyContainerPermissionAccessEntry;

#endif 	

#ifndef __KeyContainerPermissionAccessEntryCollection_FWD_DEFINED__
#define __KeyContainerPermissionAccessEntryCollection_FWD_DEFINED__

typedef struct KeyContainerPermissionAccessEntryCollection KeyContainerPermissionAccessEntryCollection;

#endif 	

#ifndef __KeyContainerPermissionAccessEntryEnumerator_FWD_DEFINED__
#define __KeyContainerPermissionAccessEntryEnumerator_FWD_DEFINED__

typedef struct KeyContainerPermissionAccessEntryEnumerator KeyContainerPermissionAccessEntryEnumerator;

#endif 	

#ifndef __KeyContainerPermission_FWD_DEFINED__
#define __KeyContainerPermission_FWD_DEFINED__

typedef struct KeyContainerPermission KeyContainerPermission;

#endif 	

#ifndef __PublisherIdentityPermission_FWD_DEFINED__
#define __PublisherIdentityPermission_FWD_DEFINED__

typedef struct PublisherIdentityPermission PublisherIdentityPermission;

#endif 	

#ifndef __RegistryPermission_FWD_DEFINED__
#define __RegistryPermission_FWD_DEFINED__

typedef struct RegistryPermission RegistryPermission;

#endif 	

#ifndef __SuppressUnmanagedCodeSecurityAttribute_FWD_DEFINED__
#define __SuppressUnmanagedCodeSecurityAttribute_FWD_DEFINED__

typedef struct SuppressUnmanagedCodeSecurityAttribute SuppressUnmanagedCodeSecurityAttribute;

#endif 	

#ifndef __UnverifiableCodeAttribute_FWD_DEFINED__
#define __UnverifiableCodeAttribute_FWD_DEFINED__

typedef struct UnverifiableCodeAttribute UnverifiableCodeAttribute;

#endif 	

#ifndef __AllowPartiallyTrustedCallersAttribute_FWD_DEFINED__
#define __AllowPartiallyTrustedCallersAttribute_FWD_DEFINED__

typedef struct AllowPartiallyTrustedCallersAttribute AllowPartiallyTrustedCallersAttribute;

#endif 	

#ifndef __HostSecurityManager_FWD_DEFINED__
#define __HostSecurityManager_FWD_DEFINED__

typedef struct HostSecurityManager HostSecurityManager;

#endif 	

#ifndef __PermissionSet_FWD_DEFINED__
#define __PermissionSet_FWD_DEFINED__

typedef struct PermissionSet PermissionSet;

#endif 	

#ifndef __NamedPermissionSet_FWD_DEFINED__
#define __NamedPermissionSet_FWD_DEFINED__

typedef struct NamedPermissionSet NamedPermissionSet;

#endif 	

#ifndef __SecurityException_FWD_DEFINED__
#define __SecurityException_FWD_DEFINED__

typedef struct SecurityException SecurityException;

#endif 	

#ifndef __HostProtectionException_FWD_DEFINED__
#define __HostProtectionException_FWD_DEFINED__

typedef struct HostProtectionException HostProtectionException;

#endif 	

#ifndef __SecurityManager_FWD_DEFINED__
#define __SecurityManager_FWD_DEFINED__

typedef struct SecurityManager SecurityManager;

#endif 	

#ifndef __VerificationException_FWD_DEFINED__
#define __VerificationException_FWD_DEFINED__

typedef struct VerificationException VerificationException;

#endif 	

#ifndef __ContextAttribute_FWD_DEFINED__
#define __ContextAttribute_FWD_DEFINED__

typedef struct ContextAttribute ContextAttribute;

#endif 	

#ifndef __AsyncResult_FWD_DEFINED__
#define __AsyncResult_FWD_DEFINED__

typedef struct AsyncResult AsyncResult;

#endif 	

#ifndef __CallContext_FWD_DEFINED__
#define __CallContext_FWD_DEFINED__

typedef struct CallContext CallContext;

#endif 	

#ifndef __LogicalCallContext_FWD_DEFINED__
#define __LogicalCallContext_FWD_DEFINED__

typedef struct LogicalCallContext LogicalCallContext;

#endif 	

#ifndef __ChannelServices_FWD_DEFINED__
#define __ChannelServices_FWD_DEFINED__

typedef struct ChannelServices ChannelServices;

#endif 	

#ifndef __ClientChannelSinkStack_FWD_DEFINED__
#define __ClientChannelSinkStack_FWD_DEFINED__

typedef struct ClientChannelSinkStack ClientChannelSinkStack;

#endif 	

#ifndef __ServerChannelSinkStack_FWD_DEFINED__
#define __ServerChannelSinkStack_FWD_DEFINED__

typedef struct ServerChannelSinkStack ServerChannelSinkStack;

#endif 	

#ifndef __ClientSponsor_FWD_DEFINED__
#define __ClientSponsor_FWD_DEFINED__

typedef struct ClientSponsor ClientSponsor;

#endif 	

#ifndef __CrossContextDelegate_FWD_DEFINED__
#define __CrossContextDelegate_FWD_DEFINED__

typedef struct CrossContextDelegate CrossContextDelegate;

#endif 	

#ifndef __Context_FWD_DEFINED__
#define __Context_FWD_DEFINED__

typedef struct Context Context;

#endif 	

#ifndef __ContextProperty_FWD_DEFINED__
#define __ContextProperty_FWD_DEFINED__

typedef struct ContextProperty ContextProperty;

#endif 	

#ifndef __EnterpriseServicesHelper_FWD_DEFINED__
#define __EnterpriseServicesHelper_FWD_DEFINED__

typedef struct EnterpriseServicesHelper EnterpriseServicesHelper;

#endif 	

#ifndef __Header_FWD_DEFINED__
#define __Header_FWD_DEFINED__

typedef struct Header Header;

#endif 	

#ifndef __HeaderHandler_FWD_DEFINED__
#define __HeaderHandler_FWD_DEFINED__

typedef struct HeaderHandler HeaderHandler;

#endif 	

#ifndef __ChannelDataStore_FWD_DEFINED__
#define __ChannelDataStore_FWD_DEFINED__

typedef struct ChannelDataStore ChannelDataStore;

#endif 	

#ifndef __TransportHeaders_FWD_DEFINED__
#define __TransportHeaders_FWD_DEFINED__

typedef struct TransportHeaders TransportHeaders;

#endif 	

#ifndef __SinkProviderData_FWD_DEFINED__
#define __SinkProviderData_FWD_DEFINED__

typedef struct SinkProviderData SinkProviderData;

#endif 	

#ifndef __BaseChannelObjectWithProperties_FWD_DEFINED__
#define __BaseChannelObjectWithProperties_FWD_DEFINED__

typedef struct BaseChannelObjectWithProperties BaseChannelObjectWithProperties;

#endif 	

#ifndef __BaseChannelSinkWithProperties_FWD_DEFINED__
#define __BaseChannelSinkWithProperties_FWD_DEFINED__

typedef struct BaseChannelSinkWithProperties BaseChannelSinkWithProperties;

#endif 	

#ifndef __BaseChannelWithProperties_FWD_DEFINED__
#define __BaseChannelWithProperties_FWD_DEFINED__

typedef struct BaseChannelWithProperties BaseChannelWithProperties;

#endif 	

#ifndef __LifetimeServices_FWD_DEFINED__
#define __LifetimeServices_FWD_DEFINED__

typedef struct LifetimeServices LifetimeServices;

#endif 	

#ifndef __ReturnMessage_FWD_DEFINED__
#define __ReturnMessage_FWD_DEFINED__

typedef struct ReturnMessage ReturnMessage;

#endif 	

#ifndef __MethodCall_FWD_DEFINED__
#define __MethodCall_FWD_DEFINED__

typedef struct MethodCall MethodCall;

#endif 	

#ifndef __ConstructionCall_FWD_DEFINED__
#define __ConstructionCall_FWD_DEFINED__

typedef struct ConstructionCall ConstructionCall;

#endif 	

#ifndef __MethodResponse_FWD_DEFINED__
#define __MethodResponse_FWD_DEFINED__

typedef struct MethodResponse MethodResponse;

#endif 	

#ifndef __ConstructionResponse_FWD_DEFINED__
#define __ConstructionResponse_FWD_DEFINED__

typedef struct ConstructionResponse ConstructionResponse;

#endif 	

#ifndef __InternalMessageWrapper_FWD_DEFINED__
#define __InternalMessageWrapper_FWD_DEFINED__

typedef struct InternalMessageWrapper InternalMessageWrapper;

#endif 	

#ifndef __MethodCallMessageWrapper_FWD_DEFINED__
#define __MethodCallMessageWrapper_FWD_DEFINED__

typedef struct MethodCallMessageWrapper MethodCallMessageWrapper;

#endif 	

#ifndef __MethodReturnMessageWrapper_FWD_DEFINED__
#define __MethodReturnMessageWrapper_FWD_DEFINED__

typedef struct MethodReturnMessageWrapper MethodReturnMessageWrapper;

#endif 	

#ifndef __ObjectHandle_FWD_DEFINED__
#define __ObjectHandle_FWD_DEFINED__

typedef struct ObjectHandle ObjectHandle;

#endif 	

#ifndef __ObjRef_FWD_DEFINED__
#define __ObjRef_FWD_DEFINED__

typedef struct ObjRef ObjRef;

#endif 	

#ifndef __OneWayAttribute_FWD_DEFINED__
#define __OneWayAttribute_FWD_DEFINED__

typedef struct OneWayAttribute OneWayAttribute;

#endif 	

#ifndef __ProxyAttribute_FWD_DEFINED__
#define __ProxyAttribute_FWD_DEFINED__

typedef struct ProxyAttribute ProxyAttribute;

#endif 	

#ifndef __RealProxy_FWD_DEFINED__
#define __RealProxy_FWD_DEFINED__

typedef struct RealProxy RealProxy;

#endif 	

#ifndef __SoapAttribute_FWD_DEFINED__
#define __SoapAttribute_FWD_DEFINED__

typedef struct SoapAttribute SoapAttribute;

#endif 	

#ifndef __SoapTypeAttribute_FWD_DEFINED__
#define __SoapTypeAttribute_FWD_DEFINED__

typedef struct SoapTypeAttribute SoapTypeAttribute;

#endif 	

#ifndef __SoapMethodAttribute_FWD_DEFINED__
#define __SoapMethodAttribute_FWD_DEFINED__

typedef struct SoapMethodAttribute SoapMethodAttribute;

#endif 	

#ifndef __SoapFieldAttribute_FWD_DEFINED__
#define __SoapFieldAttribute_FWD_DEFINED__

typedef struct SoapFieldAttribute SoapFieldAttribute;

#endif 	

#ifndef __SoapParameterAttribute_FWD_DEFINED__
#define __SoapParameterAttribute_FWD_DEFINED__

typedef struct SoapParameterAttribute SoapParameterAttribute;

#endif 	

#ifndef __RemotingConfiguration_FWD_DEFINED__
#define __RemotingConfiguration_FWD_DEFINED__

typedef struct RemotingConfiguration RemotingConfiguration;

#endif 	

#ifndef __TypeEntry_FWD_DEFINED__
#define __TypeEntry_FWD_DEFINED__

typedef struct TypeEntry TypeEntry;

#endif 	

#ifndef __ActivatedClientTypeEntry_FWD_DEFINED__
#define __ActivatedClientTypeEntry_FWD_DEFINED__

typedef struct ActivatedClientTypeEntry ActivatedClientTypeEntry;

#endif 	

#ifndef __ActivatedServiceTypeEntry_FWD_DEFINED__
#define __ActivatedServiceTypeEntry_FWD_DEFINED__

typedef struct ActivatedServiceTypeEntry ActivatedServiceTypeEntry;

#endif 	

#ifndef __WellKnownClientTypeEntry_FWD_DEFINED__
#define __WellKnownClientTypeEntry_FWD_DEFINED__

typedef struct WellKnownClientTypeEntry WellKnownClientTypeEntry;

#endif 	

#ifndef __WellKnownServiceTypeEntry_FWD_DEFINED__
#define __WellKnownServiceTypeEntry_FWD_DEFINED__

typedef struct WellKnownServiceTypeEntry WellKnownServiceTypeEntry;

#endif 	

#ifndef __RemotingException_FWD_DEFINED__
#define __RemotingException_FWD_DEFINED__

typedef struct RemotingException RemotingException;

#endif 	

#ifndef __ServerException_FWD_DEFINED__
#define __ServerException_FWD_DEFINED__

typedef struct ServerException ServerException;

#endif 	

#ifndef __RemotingTimeoutException_FWD_DEFINED__
#define __RemotingTimeoutException_FWD_DEFINED__

typedef struct RemotingTimeoutException RemotingTimeoutException;

#endif 	

#ifndef __RemotingServices_FWD_DEFINED__
#define __RemotingServices_FWD_DEFINED__

typedef struct RemotingServices RemotingServices;

#endif 	

#ifndef __InternalRemotingServices_FWD_DEFINED__
#define __InternalRemotingServices_FWD_DEFINED__

typedef struct InternalRemotingServices InternalRemotingServices;

#endif 	

#ifndef __MessageSurrogateFilter_FWD_DEFINED__
#define __MessageSurrogateFilter_FWD_DEFINED__

typedef struct MessageSurrogateFilter MessageSurrogateFilter;

#endif 	

#ifndef __RemotingSurrogateSelector_FWD_DEFINED__
#define __RemotingSurrogateSelector_FWD_DEFINED__

typedef struct RemotingSurrogateSelector RemotingSurrogateSelector;

#endif 	

#ifndef __SoapServices_FWD_DEFINED__
#define __SoapServices_FWD_DEFINED__

typedef struct SoapServices SoapServices;

#endif 	

#ifndef __SoapDateTime_FWD_DEFINED__
#define __SoapDateTime_FWD_DEFINED__

typedef struct SoapDateTime SoapDateTime;

#endif 	

#ifndef __SoapDuration_FWD_DEFINED__
#define __SoapDuration_FWD_DEFINED__

typedef struct SoapDuration SoapDuration;

#endif 	

#ifndef __SoapTime_FWD_DEFINED__
#define __SoapTime_FWD_DEFINED__

typedef struct SoapTime SoapTime;

#endif 	

#ifndef __SoapDate_FWD_DEFINED__
#define __SoapDate_FWD_DEFINED__

typedef struct SoapDate SoapDate;

#endif 	

#ifndef __SoapYearMonth_FWD_DEFINED__
#define __SoapYearMonth_FWD_DEFINED__

typedef struct SoapYearMonth SoapYearMonth;

#endif 	

#ifndef __SoapYear_FWD_DEFINED__
#define __SoapYear_FWD_DEFINED__

typedef struct SoapYear SoapYear;

#endif 	

#ifndef __SoapMonthDay_FWD_DEFINED__
#define __SoapMonthDay_FWD_DEFINED__

typedef struct SoapMonthDay SoapMonthDay;

#endif 	

#ifndef __SoapDay_FWD_DEFINED__
#define __SoapDay_FWD_DEFINED__

typedef struct SoapDay SoapDay;

#endif 	

#ifndef __SoapMonth_FWD_DEFINED__
#define __SoapMonth_FWD_DEFINED__

typedef struct SoapMonth SoapMonth;

#endif 	

#ifndef __SoapHexBinary_FWD_DEFINED__
#define __SoapHexBinary_FWD_DEFINED__

typedef struct SoapHexBinary SoapHexBinary;

#endif 	

#ifndef __SoapBase64Binary_FWD_DEFINED__
#define __SoapBase64Binary_FWD_DEFINED__

typedef struct SoapBase64Binary SoapBase64Binary;

#endif 	

#ifndef __SoapInteger_FWD_DEFINED__
#define __SoapInteger_FWD_DEFINED__

typedef struct SoapInteger SoapInteger;

#endif 	

#ifndef __SoapPositiveInteger_FWD_DEFINED__
#define __SoapPositiveInteger_FWD_DEFINED__

typedef struct SoapPositiveInteger SoapPositiveInteger;

#endif 	

#ifndef __SoapNonPositiveInteger_FWD_DEFINED__
#define __SoapNonPositiveInteger_FWD_DEFINED__

typedef struct SoapNonPositiveInteger SoapNonPositiveInteger;

#endif 	

#ifndef __SoapNonNegativeInteger_FWD_DEFINED__
#define __SoapNonNegativeInteger_FWD_DEFINED__

typedef struct SoapNonNegativeInteger SoapNonNegativeInteger;

#endif 	

#ifndef __SoapNegativeInteger_FWD_DEFINED__
#define __SoapNegativeInteger_FWD_DEFINED__

typedef struct SoapNegativeInteger SoapNegativeInteger;

#endif 	

#ifndef __SoapAnyUri_FWD_DEFINED__
#define __SoapAnyUri_FWD_DEFINED__

typedef struct SoapAnyUri SoapAnyUri;

#endif 	

#ifndef __SoapQName_FWD_DEFINED__
#define __SoapQName_FWD_DEFINED__

typedef struct SoapQName SoapQName;

#endif 	

#ifndef __SoapNotation_FWD_DEFINED__
#define __SoapNotation_FWD_DEFINED__

typedef struct SoapNotation SoapNotation;

#endif 	

#ifndef __SoapNormalizedString_FWD_DEFINED__
#define __SoapNormalizedString_FWD_DEFINED__

typedef struct SoapNormalizedString SoapNormalizedString;

#endif 	

#ifndef __SoapToken_FWD_DEFINED__
#define __SoapToken_FWD_DEFINED__

typedef struct SoapToken SoapToken;

#endif 	

#ifndef __SoapLanguage_FWD_DEFINED__
#define __SoapLanguage_FWD_DEFINED__

typedef struct SoapLanguage SoapLanguage;

#endif 	

#ifndef __SoapName_FWD_DEFINED__
#define __SoapName_FWD_DEFINED__

typedef struct SoapName SoapName;

#endif 	

#ifndef __SoapIdrefs_FWD_DEFINED__
#define __SoapIdrefs_FWD_DEFINED__

typedef struct SoapIdrefs SoapIdrefs;

#endif 	

#ifndef __SoapEntities_FWD_DEFINED__
#define __SoapEntities_FWD_DEFINED__

typedef struct SoapEntities SoapEntities;

#endif 	

#ifndef __SoapNmtoken_FWD_DEFINED__
#define __SoapNmtoken_FWD_DEFINED__

typedef struct SoapNmtoken SoapNmtoken;

#endif 	

#ifndef __SoapNmtokens_FWD_DEFINED__
#define __SoapNmtokens_FWD_DEFINED__

typedef struct SoapNmtokens SoapNmtokens;

#endif 	

#ifndef __SoapNcName_FWD_DEFINED__
#define __SoapNcName_FWD_DEFINED__

typedef struct SoapNcName SoapNcName;

#endif 	

#ifndef __SoapId_FWD_DEFINED__
#define __SoapId_FWD_DEFINED__

typedef struct SoapId SoapId;

#endif 	

#ifndef __SoapIdref_FWD_DEFINED__
#define __SoapIdref_FWD_DEFINED__

typedef struct SoapIdref SoapIdref;

#endif 	

#ifndef __SoapEntity_FWD_DEFINED__
#define __SoapEntity_FWD_DEFINED__

typedef struct SoapEntity SoapEntity;

#endif 	

#ifndef __SynchronizationAttribute_FWD_DEFINED__
#define __SynchronizationAttribute_FWD_DEFINED__

typedef struct SynchronizationAttribute SynchronizationAttribute;

#endif 	

#ifndef __TrackingServices_FWD_DEFINED__
#define __TrackingServices_FWD_DEFINED__

typedef struct TrackingServices TrackingServices;

#endif 	

#ifndef __UrlAttribute_FWD_DEFINED__
#define __UrlAttribute_FWD_DEFINED__

typedef struct UrlAttribute UrlAttribute;

#endif 	

#ifndef __IsolatedStorage_FWD_DEFINED__
#define __IsolatedStorage_FWD_DEFINED__

typedef struct IsolatedStorage IsolatedStorage;

#endif 	

#ifndef __IsolatedStorageFile_FWD_DEFINED__
#define __IsolatedStorageFile_FWD_DEFINED__

typedef struct IsolatedStorageFile IsolatedStorageFile;

#endif 	

#ifndef __IsolatedStorageFileStream_FWD_DEFINED__
#define __IsolatedStorageFileStream_FWD_DEFINED__

typedef struct IsolatedStorageFileStream IsolatedStorageFileStream;

#endif 	

#ifndef __IsolatedStorageException_FWD_DEFINED__
#define __IsolatedStorageException_FWD_DEFINED__

typedef struct IsolatedStorageException IsolatedStorageException;

#endif 	

#ifndef __InternalRM_FWD_DEFINED__
#define __InternalRM_FWD_DEFINED__

typedef struct InternalRM InternalRM;

#endif 	

#ifndef __InternalST_FWD_DEFINED__
#define __InternalST_FWD_DEFINED__

typedef struct InternalST InternalST;

#endif 	

#ifndef __SoapMessage_FWD_DEFINED__
#define __SoapMessage_FWD_DEFINED__

typedef struct SoapMessage SoapMessage;

#endif 	

#ifndef __SoapFault_FWD_DEFINED__
#define __SoapFault_FWD_DEFINED__

typedef struct SoapFault SoapFault;

#endif 	

#ifndef __ServerFault_FWD_DEFINED__
#define __ServerFault_FWD_DEFINED__

typedef struct ServerFault ServerFault;

#endif 	

#ifndef __BinaryFormatter_FWD_DEFINED__
#define __BinaryFormatter_FWD_DEFINED__

typedef struct BinaryFormatter BinaryFormatter;

#endif 	

#ifndef __AssemblyBuilder_FWD_DEFINED__
#define __AssemblyBuilder_FWD_DEFINED__

typedef struct AssemblyBuilder AssemblyBuilder;

#endif 	

#ifndef __ConstructorBuilder_FWD_DEFINED__
#define __ConstructorBuilder_FWD_DEFINED__

typedef struct ConstructorBuilder ConstructorBuilder;

#endif 	

#ifndef __ILGenerator_FWD_DEFINED__
#define __ILGenerator_FWD_DEFINED__

typedef struct ILGenerator ILGenerator;

#endif 	

#ifndef __DynamicILInfo_FWD_DEFINED__
#define __DynamicILInfo_FWD_DEFINED__

typedef struct DynamicILInfo DynamicILInfo;

#endif 	

#ifndef __DynamicMethod_FWD_DEFINED__
#define __DynamicMethod_FWD_DEFINED__

typedef struct DynamicMethod DynamicMethod;

#endif 	

#ifndef __EventBuilder_FWD_DEFINED__
#define __EventBuilder_FWD_DEFINED__

typedef struct EventBuilder EventBuilder;

#endif 	

#ifndef __FieldBuilder_FWD_DEFINED__
#define __FieldBuilder_FWD_DEFINED__

typedef struct FieldBuilder FieldBuilder;

#endif 	

#ifndef __LocalBuilder_FWD_DEFINED__
#define __LocalBuilder_FWD_DEFINED__

typedef struct LocalBuilder LocalBuilder;

#endif 	

#ifndef __MethodBuilder_FWD_DEFINED__
#define __MethodBuilder_FWD_DEFINED__

typedef struct MethodBuilder MethodBuilder;

#endif 	

#ifndef __CustomAttributeBuilder_FWD_DEFINED__
#define __CustomAttributeBuilder_FWD_DEFINED__

typedef struct CustomAttributeBuilder CustomAttributeBuilder;

#endif 	

#ifndef __MethodRental_FWD_DEFINED__
#define __MethodRental_FWD_DEFINED__

typedef struct MethodRental MethodRental;

#endif 	

#ifndef __ModuleBuilder_FWD_DEFINED__
#define __ModuleBuilder_FWD_DEFINED__

typedef struct ModuleBuilder ModuleBuilder;

#endif 	

#ifndef __OpCodes_FWD_DEFINED__
#define __OpCodes_FWD_DEFINED__

typedef struct OpCodes OpCodes;

#endif 	

#ifndef __ParameterBuilder_FWD_DEFINED__
#define __ParameterBuilder_FWD_DEFINED__

typedef struct ParameterBuilder ParameterBuilder;

#endif 	

#ifndef __PropertyBuilder_FWD_DEFINED__
#define __PropertyBuilder_FWD_DEFINED__

typedef struct PropertyBuilder PropertyBuilder;

#endif 	

#ifndef __SignatureHelper_FWD_DEFINED__
#define __SignatureHelper_FWD_DEFINED__

typedef struct SignatureHelper SignatureHelper;

#endif 	

#ifndef __TypeBuilder_FWD_DEFINED__
#define __TypeBuilder_FWD_DEFINED__

typedef struct TypeBuilder TypeBuilder;

#endif 	

#ifndef __GenericTypeParameterBuilder_FWD_DEFINED__
#define __GenericTypeParameterBuilder_FWD_DEFINED__

typedef struct GenericTypeParameterBuilder GenericTypeParameterBuilder;

#endif 	

#ifndef __EnumBuilder_FWD_DEFINED__
#define __EnumBuilder_FWD_DEFINED__

typedef struct EnumBuilder EnumBuilder;

#endif 	

#ifndef __UnmanagedMarshal_FWD_DEFINED__
#define __UnmanagedMarshal_FWD_DEFINED__

typedef struct UnmanagedMarshal UnmanagedMarshal;

#endif 	

#ifndef __KeySizes_FWD_DEFINED__
#define __KeySizes_FWD_DEFINED__

typedef struct KeySizes KeySizes;

#endif 	

#ifndef __CryptographicException_FWD_DEFINED__
#define __CryptographicException_FWD_DEFINED__

typedef struct CryptographicException CryptographicException;

#endif 	

#ifndef __CryptographicUnexpectedOperationException_FWD_DEFINED__
#define __CryptographicUnexpectedOperationException_FWD_DEFINED__

typedef struct CryptographicUnexpectedOperationException CryptographicUnexpectedOperationException;

#endif 	

#ifndef __RandomNumberGenerator_FWD_DEFINED__
#define __RandomNumberGenerator_FWD_DEFINED__

typedef struct RandomNumberGenerator RandomNumberGenerator;

#endif 	

#ifndef __RNGCryptoServiceProvider_FWD_DEFINED__
#define __RNGCryptoServiceProvider_FWD_DEFINED__

typedef struct RNGCryptoServiceProvider RNGCryptoServiceProvider;

#endif 	

#ifndef __AsymmetricAlgorithm_FWD_DEFINED__
#define __AsymmetricAlgorithm_FWD_DEFINED__

typedef struct AsymmetricAlgorithm AsymmetricAlgorithm;

#endif 	

#ifndef __AsymmetricKeyExchangeDeformatter_FWD_DEFINED__
#define __AsymmetricKeyExchangeDeformatter_FWD_DEFINED__

typedef struct AsymmetricKeyExchangeDeformatter AsymmetricKeyExchangeDeformatter;

#endif 	

#ifndef __AsymmetricKeyExchangeFormatter_FWD_DEFINED__
#define __AsymmetricKeyExchangeFormatter_FWD_DEFINED__

typedef struct AsymmetricKeyExchangeFormatter AsymmetricKeyExchangeFormatter;

#endif 	

#ifndef __AsymmetricSignatureDeformatter_FWD_DEFINED__
#define __AsymmetricSignatureDeformatter_FWD_DEFINED__

typedef struct AsymmetricSignatureDeformatter AsymmetricSignatureDeformatter;

#endif 	

#ifndef __AsymmetricSignatureFormatter_FWD_DEFINED__
#define __AsymmetricSignatureFormatter_FWD_DEFINED__

typedef struct AsymmetricSignatureFormatter AsymmetricSignatureFormatter;

#endif 	

#ifndef __ToBase64Transform_FWD_DEFINED__
#define __ToBase64Transform_FWD_DEFINED__

typedef struct ToBase64Transform ToBase64Transform;

#endif 	

#ifndef __FromBase64Transform_FWD_DEFINED__
#define __FromBase64Transform_FWD_DEFINED__

typedef struct FromBase64Transform FromBase64Transform;

#endif 	

#ifndef __CryptoAPITransform_FWD_DEFINED__
#define __CryptoAPITransform_FWD_DEFINED__

typedef struct CryptoAPITransform CryptoAPITransform;

#endif 	

#ifndef __CspParameters_FWD_DEFINED__
#define __CspParameters_FWD_DEFINED__

typedef struct CspParameters CspParameters;

#endif 	

#ifndef __CryptoConfig_FWD_DEFINED__
#define __CryptoConfig_FWD_DEFINED__

typedef struct CryptoConfig CryptoConfig;

#endif 	

#ifndef __CryptoStream_FWD_DEFINED__
#define __CryptoStream_FWD_DEFINED__

typedef struct CryptoStream CryptoStream;

#endif 	

#ifndef __SymmetricAlgorithm_FWD_DEFINED__
#define __SymmetricAlgorithm_FWD_DEFINED__

typedef struct SymmetricAlgorithm SymmetricAlgorithm;

#endif 	

#ifndef __DES_FWD_DEFINED__
#define __DES_FWD_DEFINED__

typedef struct DES DES;

#endif 	

#ifndef __DESCryptoServiceProvider_FWD_DEFINED__
#define __DESCryptoServiceProvider_FWD_DEFINED__

typedef struct DESCryptoServiceProvider DESCryptoServiceProvider;

#endif 	

#ifndef __DeriveBytes_FWD_DEFINED__
#define __DeriveBytes_FWD_DEFINED__

typedef struct DeriveBytes DeriveBytes;

#endif 	

#ifndef __DSA_FWD_DEFINED__
#define __DSA_FWD_DEFINED__

typedef struct DSA DSA;

#endif 	

#ifndef __DSACryptoServiceProvider_FWD_DEFINED__
#define __DSACryptoServiceProvider_FWD_DEFINED__

typedef struct DSACryptoServiceProvider DSACryptoServiceProvider;

#endif 	

#ifndef __DSASignatureDeformatter_FWD_DEFINED__
#define __DSASignatureDeformatter_FWD_DEFINED__

typedef struct DSASignatureDeformatter DSASignatureDeformatter;

#endif 	

#ifndef __DSASignatureFormatter_FWD_DEFINED__
#define __DSASignatureFormatter_FWD_DEFINED__

typedef struct DSASignatureFormatter DSASignatureFormatter;

#endif 	

#ifndef __HashAlgorithm_FWD_DEFINED__
#define __HashAlgorithm_FWD_DEFINED__

typedef struct HashAlgorithm HashAlgorithm;

#endif 	

#ifndef __KeyedHashAlgorithm_FWD_DEFINED__
#define __KeyedHashAlgorithm_FWD_DEFINED__

typedef struct KeyedHashAlgorithm KeyedHashAlgorithm;

#endif 	

#ifndef __HMAC_FWD_DEFINED__
#define __HMAC_FWD_DEFINED__

typedef struct HMAC HMAC;

#endif 	

#ifndef __HMACMD5_FWD_DEFINED__
#define __HMACMD5_FWD_DEFINED__

typedef struct HMACMD5 HMACMD5;

#endif 	

#ifndef __HMACRIPEMD160_FWD_DEFINED__
#define __HMACRIPEMD160_FWD_DEFINED__

typedef struct HMACRIPEMD160 HMACRIPEMD160;

#endif 	

#ifndef __HMACSHA1_FWD_DEFINED__
#define __HMACSHA1_FWD_DEFINED__

typedef struct HMACSHA1 HMACSHA1;

#endif 	

#ifndef __HMACSHA256_FWD_DEFINED__
#define __HMACSHA256_FWD_DEFINED__

typedef struct HMACSHA256 HMACSHA256;

#endif 	

#ifndef __HMACSHA384_FWD_DEFINED__
#define __HMACSHA384_FWD_DEFINED__

typedef struct HMACSHA384 HMACSHA384;

#endif 	

#ifndef __HMACSHA512_FWD_DEFINED__
#define __HMACSHA512_FWD_DEFINED__

typedef struct HMACSHA512 HMACSHA512;

#endif 	

#ifndef __CspKeyContainerInfo_FWD_DEFINED__
#define __CspKeyContainerInfo_FWD_DEFINED__

typedef struct CspKeyContainerInfo CspKeyContainerInfo;

#endif 	

#ifndef __MACTripleDES_FWD_DEFINED__
#define __MACTripleDES_FWD_DEFINED__

typedef struct MACTripleDES MACTripleDES;

#endif 	

#ifndef __MD5_FWD_DEFINED__
#define __MD5_FWD_DEFINED__

typedef struct MD5 MD5;

#endif 	

#ifndef __MD5CryptoServiceProvider_FWD_DEFINED__
#define __MD5CryptoServiceProvider_FWD_DEFINED__

typedef struct MD5CryptoServiceProvider MD5CryptoServiceProvider;

#endif 	

#ifndef __MaskGenerationMethod_FWD_DEFINED__
#define __MaskGenerationMethod_FWD_DEFINED__

typedef struct MaskGenerationMethod MaskGenerationMethod;

#endif 	

#ifndef __PasswordDeriveBytes_FWD_DEFINED__
#define __PasswordDeriveBytes_FWD_DEFINED__

typedef struct PasswordDeriveBytes PasswordDeriveBytes;

#endif 	

#ifndef __PKCS1MaskGenerationMethod_FWD_DEFINED__
#define __PKCS1MaskGenerationMethod_FWD_DEFINED__

typedef struct PKCS1MaskGenerationMethod PKCS1MaskGenerationMethod;

#endif 	

#ifndef __RC2_FWD_DEFINED__
#define __RC2_FWD_DEFINED__

typedef struct RC2 RC2;

#endif 	

#ifndef __RC2CryptoServiceProvider_FWD_DEFINED__
#define __RC2CryptoServiceProvider_FWD_DEFINED__

typedef struct RC2CryptoServiceProvider RC2CryptoServiceProvider;

#endif 	

#ifndef __Rfc2898DeriveBytes_FWD_DEFINED__
#define __Rfc2898DeriveBytes_FWD_DEFINED__

typedef struct Rfc2898DeriveBytes Rfc2898DeriveBytes;

#endif 	

#ifndef __RIPEMD160_FWD_DEFINED__
#define __RIPEMD160_FWD_DEFINED__

typedef struct RIPEMD160 RIPEMD160;

#endif 	

#ifndef __RIPEMD160Managed_FWD_DEFINED__
#define __RIPEMD160Managed_FWD_DEFINED__

typedef struct RIPEMD160Managed RIPEMD160Managed;

#endif 	

#ifndef __RSA_FWD_DEFINED__
#define __RSA_FWD_DEFINED__

typedef struct RSA RSA;

#endif 	

#ifndef __RSACryptoServiceProvider_FWD_DEFINED__
#define __RSACryptoServiceProvider_FWD_DEFINED__

typedef struct RSACryptoServiceProvider RSACryptoServiceProvider;

#endif 	

#ifndef __RSAOAEPKeyExchangeDeformatter_FWD_DEFINED__
#define __RSAOAEPKeyExchangeDeformatter_FWD_DEFINED__

typedef struct RSAOAEPKeyExchangeDeformatter RSAOAEPKeyExchangeDeformatter;

#endif 	

#ifndef __RSAOAEPKeyExchangeFormatter_FWD_DEFINED__
#define __RSAOAEPKeyExchangeFormatter_FWD_DEFINED__

typedef struct RSAOAEPKeyExchangeFormatter RSAOAEPKeyExchangeFormatter;

#endif 	

#ifndef __RSAPKCS1KeyExchangeDeformatter_FWD_DEFINED__
#define __RSAPKCS1KeyExchangeDeformatter_FWD_DEFINED__

typedef struct RSAPKCS1KeyExchangeDeformatter RSAPKCS1KeyExchangeDeformatter;

#endif 	

#ifndef __RSAPKCS1KeyExchangeFormatter_FWD_DEFINED__
#define __RSAPKCS1KeyExchangeFormatter_FWD_DEFINED__

typedef struct RSAPKCS1KeyExchangeFormatter RSAPKCS1KeyExchangeFormatter;

#endif 	

#ifndef __RSAPKCS1SignatureDeformatter_FWD_DEFINED__
#define __RSAPKCS1SignatureDeformatter_FWD_DEFINED__

typedef struct RSAPKCS1SignatureDeformatter RSAPKCS1SignatureDeformatter;

#endif 	

#ifndef __RSAPKCS1SignatureFormatter_FWD_DEFINED__
#define __RSAPKCS1SignatureFormatter_FWD_DEFINED__

typedef struct RSAPKCS1SignatureFormatter RSAPKCS1SignatureFormatter;

#endif 	

#ifndef __Rijndael_FWD_DEFINED__
#define __Rijndael_FWD_DEFINED__

typedef struct Rijndael Rijndael;

#endif 	

#ifndef __RijndaelManaged_FWD_DEFINED__
#define __RijndaelManaged_FWD_DEFINED__

typedef struct RijndaelManaged RijndaelManaged;

#endif 	

#ifndef __RijndaelManagedTransform_FWD_DEFINED__
#define __RijndaelManagedTransform_FWD_DEFINED__

typedef struct RijndaelManagedTransform RijndaelManagedTransform;

#endif 	

#ifndef __SHA1_FWD_DEFINED__
#define __SHA1_FWD_DEFINED__

typedef struct SHA1 SHA1;

#endif 	

#ifndef __SHA1CryptoServiceProvider_FWD_DEFINED__
#define __SHA1CryptoServiceProvider_FWD_DEFINED__

typedef struct SHA1CryptoServiceProvider SHA1CryptoServiceProvider;

#endif 	

#ifndef __SHA1Managed_FWD_DEFINED__
#define __SHA1Managed_FWD_DEFINED__

typedef struct SHA1Managed SHA1Managed;

#endif 	

#ifndef __SHA256_FWD_DEFINED__
#define __SHA256_FWD_DEFINED__

typedef struct SHA256 SHA256;

#endif 	

#ifndef __SHA256Managed_FWD_DEFINED__
#define __SHA256Managed_FWD_DEFINED__

typedef struct SHA256Managed SHA256Managed;

#endif 	

#ifndef __SHA384_FWD_DEFINED__
#define __SHA384_FWD_DEFINED__

typedef struct SHA384 SHA384;

#endif 	

#ifndef __SHA384Managed_FWD_DEFINED__
#define __SHA384Managed_FWD_DEFINED__

typedef struct SHA384Managed SHA384Managed;

#endif 	

#ifndef __SHA512_FWD_DEFINED__
#define __SHA512_FWD_DEFINED__

typedef struct SHA512 SHA512;

#endif 	

#ifndef __SHA512Managed_FWD_DEFINED__
#define __SHA512Managed_FWD_DEFINED__

typedef struct SHA512Managed SHA512Managed;

#endif 	

#ifndef __SignatureDescription_FWD_DEFINED__
#define __SignatureDescription_FWD_DEFINED__

typedef struct SignatureDescription SignatureDescription;

#endif 	

#ifndef __TripleDES_FWD_DEFINED__
#define __TripleDES_FWD_DEFINED__

typedef struct TripleDES TripleDES;

#endif 	

#ifndef __TripleDESCryptoServiceProvider_FWD_DEFINED__
#define __TripleDESCryptoServiceProvider_FWD_DEFINED__

typedef struct TripleDESCryptoServiceProvider TripleDESCryptoServiceProvider;

#endif 	

#ifndef __X509Certificate_FWD_DEFINED__
#define __X509Certificate_FWD_DEFINED__

typedef struct X509Certificate X509Certificate;

#endif 	

#ifndef __mscorlib_LIBRARY_DEFINED__
#define __mscorlib_LIBRARY_DEFINED__
#endif

typedef DECLSPEC_UUID("8ABD8CB3-A365-32F9-9914-F08EC1FEC4CA") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0001
    {
        OpCodeType_Annotation	= 0,
        OpCodeType_Macro	= 1,
        OpCodeType_Nternal	= 2,
        OpCodeType_Objmodel	= 3,
        OpCodeType_Prefix	= 4,
        OpCodeType_Primitive	= 5
    } 	OpCodeType;

typedef DECLSPEC_UUID("75A7861C-767E-3A5E-A57B-6EC136009654") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0002
    {
        FlowControl_Branch	= 0,
        FlowControl_Break	= 1,
        FlowControl_Call	= 2,
        FlowControl_Cond_Branch	= 3,
        FlowControl_Meta	= 4,
        FlowControl_Next	= 5,
        FlowControl_Phi	= 6,
        FlowControl_Return	= 7,
        FlowControl_Throw	= 8
    } 	FlowControl;

typedef DECLSPEC_UUID("B125618B-1B4E-37C3-B31A-331D6021B52D") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0003
    {
        OperandType_InlineBrTarget	= 0,
        OperandType_InlineField	= 1,
        OperandType_InlineI	= 2,
        OperandType_InlineI8	= 3,
        OperandType_InlineMethod	= 4,
        OperandType_InlineNone	= 5,
        OperandType_InlinePhi	= 6,
        OperandType_InlineR	= 7,
        OperandType_InlineSig	= 9,
        OperandType_InlineString	= 10,
        OperandType_InlineSwitch	= 11,
        OperandType_InlineTok	= 12,
        OperandType_InlineType	= 13,
        OperandType_InlineVar	= 14,
        OperandType_ShortInlineBrTarget	= 15,
        OperandType_ShortInlineI	= 16,
        OperandType_ShortInlineR	= 17,
        OperandType_ShortInlineVar	= 18
    } 	OperandType;

typedef DECLSPEC_UUID("D25ED092-A7A8-3BBE-820C-42F5A4604768") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0004
    {
        StackBehaviour_Pop0	= 0,
        StackBehaviour_Pop1	= 1,
        StackBehaviour_Pop1_pop1	= 2,
        StackBehaviour_Popi	= 3,
        StackBehaviour_Popi_pop1	= 4,
        StackBehaviour_Popi_popi	= 5,
        StackBehaviour_Popi_popi8	= 6,
        StackBehaviour_Popi_popi_popi	= 7,
        StackBehaviour_Popi_popr4	= 8,
        StackBehaviour_Popi_popr8	= 9,
        StackBehaviour_Popref	= 10,
        StackBehaviour_Popref_pop1	= 11,
        StackBehaviour_Popref_popi	= 12,
        StackBehaviour_Popref_popi_popi	= 13,
        StackBehaviour_Popref_popi_popi8	= 14,
        StackBehaviour_Popref_popi_popr4	= 15,
        StackBehaviour_Popref_popi_popr8	= 16,
        StackBehaviour_Popref_popi_popref	= 17,
        StackBehaviour_Push0	= 18,
        StackBehaviour_Push1	= 19,
        StackBehaviour_Push1_push1	= 20,
        StackBehaviour_Pushi	= 21,
        StackBehaviour_Pushi8	= 22,
        StackBehaviour_Pushr4	= 23,
        StackBehaviour_Pushr8	= 24,
        StackBehaviour_Pushref	= 25,
        StackBehaviour_Varpop	= 26,
        StackBehaviour_Varpush	= 27,
        StackBehaviour_Popref_popi_pop1	= 28
    } 	StackBehaviour;

typedef DECLSPEC_UUID("A2C06560-E728-39D5-8230-7EB08001C79E") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0005
    {
        LeaseState_Null	= 0,
        LeaseState_Initial	= 1,
        LeaseState_Active	= 2,
        LeaseState_Renewing	= 3,
        LeaseState_Expired	= 4
    } 	LeaseState;

typedef DECLSPEC_UUID("A026E65F-9720-3F82-8DE1-A18E51180A34") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0006
    {
        ServerProcessing_Complete	= 0,
        ServerProcessing_OneWay	= 1,
        ServerProcessing_Async	= 2
    } 	ServerProcessing;

typedef DECLSPEC_UUID("B946AC61-DD6B-39F3-BBE1-E4C1540F16EA") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0007
    {
        ActivatorLevel_Construction	= 4,
        ActivatorLevel_Context	= 8,
        ActivatorLevel_AppDomain	= 12,
        ActivatorLevel_Process	= 16,
        ActivatorLevel_Machine	= 20
    } 	ActivatorLevel;

typedef DECLSPEC_UUID("B42619B4-0EDC-3F55-AA64-2140275FA115") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0008
    {
        ImporterEventKind_NOTIF_TYPECONVERTED	= 0,
        ImporterEventKind_NOTIF_CONVERTWARNING	= 1,
        ImporterEventKind_ERROR_REFTOINVALIDTYPELIB	= 2
    } 	ImporterEventKind;

typedef DECLSPEC_UUID("03C85CD9-D760-3AA8-94BD-F774407391CB") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0009
    {
        EventAttributes_None	= 0,
        EventAttributes_SpecialName	= 512,
        EventAttributes_ReservedMask	= 1024,
        EventAttributes_RTSpecialName	= 1024
    } 	EventAttributes;

typedef DECLSPEC_UUID("816C979C-D3D2-3101-B5CA-E4A5C5E966FA") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0010
    {
        PropertyAttributes_None	= 0,
        PropertyAttributes_SpecialName	= 512,
        PropertyAttributes_ReservedMask	= 62464,
        PropertyAttributes_RTSpecialName	= 1024,
        PropertyAttributes_HasDefault	= 4096,
        PropertyAttributes_Reserved2	= 8192,
        PropertyAttributes_Reserved3	= 16384,
        PropertyAttributes_Reserved4	= 32768
    } 	PropertyAttributes;

typedef DECLSPEC_UUID("688A6FF0-5727-32D2-8228-6E838A822616") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0011
    {
        ParameterAttributes_None	= 0,
        ParameterAttributes_In	= 1,
        ParameterAttributes_Out	= 2,
        ParameterAttributes_Lcid	= 4,
        ParameterAttributes_Retval	= 8,
        ParameterAttributes_Optional	= 16,
        ParameterAttributes_ReservedMask	= 61440,
        ParameterAttributes_HasDefault	= 4096,
        ParameterAttributes_HasFieldMarshal	= 8192,
        ParameterAttributes_Reserved3	= 16384,
        ParameterAttributes_Reserved4	= 32768
    } 	ParameterAttributes;

typedef DECLSPEC_UUID("C8679E0A-1C67-3A20-8645-0D930F529031") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0012
    {
        FieldAttributes_FieldAccessMask	= 7,
        FieldAttributes_PrivateScope	= 0,
        FieldAttributes_Private	= 1,
        FieldAttributes_FamANDAssem	= 2,
        FieldAttributes_Assembly	= 3,
        FieldAttributes_Family	= 4,
        FieldAttributes_FamORAssem	= 5,
        FieldAttributes_Public	= 6,
        FieldAttributes_Static	= 16,
        FieldAttributes_InitOnly	= 32,
        FieldAttributes_Literal	= 64,
        FieldAttributes_NotSerialized	= 128,
        FieldAttributes_SpecialName	= 512,
        FieldAttributes_PinvokeImpl	= 8192,
        FieldAttributes_ReservedMask	= 38144,
        FieldAttributes_RTSpecialName	= 1024,
        FieldAttributes_HasFieldMarshal	= 4096,
        FieldAttributes_HasDefault	= 32768,
        FieldAttributes_HasFieldRVA	= 256
    } 	FieldAttributes;

typedef DECLSPEC_UUID("B6B91160-2ABF-352B-A74D-1174CC324E18") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0013
    {
        SymAddressKind_ILOffset	= 1,
        SymAddressKind_NativeRVA	= 2,
        SymAddressKind_NativeRegister	= 3,
        SymAddressKind_NativeRegisterRelative	= 4,
        SymAddressKind_NativeOffset	= 5,
        SymAddressKind_NativeRegisterRegister	= 6,
        SymAddressKind_NativeRegisterStack	= 7,
        SymAddressKind_NativeStackRegister	= 8,
        SymAddressKind_BitField	= 9,
        SymAddressKind_NativeSectionOffset	= 10
    } 	SymAddressKind;

typedef DECLSPEC_UUID("709164DF-D0E2-3813-A07D-F9F1E99F9A4B") struct tagSymbolToken
    {
    long m_token;
    } 	SymbolToken;

typedef DECLSPEC_UUID("28EE6224-FD72-3BDF-B248-BA9102FCEB14") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0014
    {
        TypeAttributes_VisibilityMask	= 7,
        TypeAttributes_NotPublic	= 0,
        TypeAttributes_Public	= 1,
        TypeAttributes_NestedPublic	= 2,
        TypeAttributes_NestedPrivate	= 3,
        TypeAttributes_NestedFamily	= 4,
        TypeAttributes_NestedAssembly	= 5,
        TypeAttributes_NestedFamANDAssem	= 6,
        TypeAttributes_NestedFamORAssem	= 7,
        TypeAttributes_LayoutMask	= 24,
        TypeAttributes_AutoLayout	= 0,
        TypeAttributes_SequentialLayout	= 8,
        TypeAttributes_ExplicitLayout	= 16,
        TypeAttributes_ClassSemanticsMask	= 32,
        TypeAttributes_Class	= 0,
        TypeAttributes_Interface	= 32,
        TypeAttributes_Abstract	= 128,
        TypeAttributes_Sealed	= 256,
        TypeAttributes_SpecialName	= 1024,
        TypeAttributes_Import	= 4096,
        TypeAttributes_Serializable	= 8192,
        TypeAttributes_StringFormatMask	= 0x30000,
        TypeAttributes_AnsiClass	= 0,
        TypeAttributes_UnicodeClass	= 0x10000,
        TypeAttributes_AutoClass	= 0x20000,
        TypeAttributes_CustomFormatClass	= 0x30000,
        TypeAttributes_CustomFormatMask	= 0xc00000,
        TypeAttributes_BeforeFieldInit	= 0x100000,
        TypeAttributes_ReservedMask	= 0x40800,
        TypeAttributes_RTSpecialName	= 2048,
        TypeAttributes_HasSecurity	= 0x40000
    } 	TypeAttributes;

typedef DECLSPEC_UUID("3223E024-5D70-3236-A92A-6B4114B2632F") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0015
    {
        BindingFlags_Default	= 0,
        BindingFlags_IgnoreCase	= 1,
        BindingFlags_DeclaredOnly	= 2,
        BindingFlags_Instance	= 4,
        BindingFlags_Static	= 8,
        BindingFlags_Public	= 16,
        BindingFlags_NonPublic	= 32,
        BindingFlags_FlattenHierarchy	= 64,
        BindingFlags_InvokeMethod	= 256,
        BindingFlags_CreateInstance	= 512,
        BindingFlags_GetField	= 1024,
        BindingFlags_SetField	= 2048,
        BindingFlags_GetProperty	= 4096,
        BindingFlags_SetProperty	= 8192,
        BindingFlags_PutDispProperty	= 16384,
        BindingFlags_PutRefDispProperty	= 32768,
        BindingFlags_ExactBinding	= 0x10000,
        BindingFlags_SuppressChangeType	= 0x20000,
        BindingFlags_OptionalParamBinding	= 0x40000,
        BindingFlags_IgnoreReturn	= 0x1000000
    } 	BindingFlags;

typedef DECLSPEC_UUID("FD67EBE2-30DE-3FBE-896B-81DA2E455137") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0016
    {
        CallingConventions_Standard	= 1,
        CallingConventions_VarArgs	= 2,
        CallingConventions_Any	= 3,
        CallingConventions_HasThis	= 32,
        CallingConventions_ExplicitThis	= 64
    } 	CallingConventions;

typedef DECLSPEC_UUID("11D31042-14C0-3B5C-87D0-A2CD40803CB5") struct tagParameterModifier
    {
    SAFEARRAY * _byRef;
    } 	ParameterModifier;

typedef DECLSPEC_UUID("5F7A2664-4778-3D72-A78F-D38B6B00180D") struct tagInterfaceMapping
    {
    _Type *TargetType;
    _Type *interfaceType;
    SAFEARRAY * TargetMethods;
    SAFEARRAY * InterfaceMethods;
    } 	InterfaceMapping;

typedef DECLSPEC_UUID("3613A9B6-C23B-3B54-AE02-6EC764D69E70") struct tagRuntimeArgumentHandle
    {
    INT64 m_ptr;
    } 	RuntimeArgumentHandle;

typedef DECLSPEC_UUID("78C18A10-C00E-3C09-B000-411C38900C2C") struct tagRuntimeTypeHandle
    {
    INT64 m_ptr;
    } 	RuntimeTypeHandle;

typedef DECLSPEC_UUID("F8FC5D7C-8215-3E65-BEFB-11E8172606FE") struct tagRuntimeMethodHandle
    {
    INT64 m_ptr;
    } 	RuntimeMethodHandle;

typedef DECLSPEC_UUID("27B33BD9-E6F7-3148-911D-F67340A5353F") struct tagRuntimeFieldHandle
    {
    INT64 m_ptr;
    } 	RuntimeFieldHandle;

typedef DECLSPEC_UUID("8531F85A-746B-3DB5-A45F-9BAC4BD02D8B") struct tagModuleHandle
    {
    INT64 m_ptr;
    } 	ModuleHandle;

typedef DECLSPEC_UUID("CA2BCDB4-3A7E-33E8-80ED-D32475ADEF33") struct tagSByte
    {
    unsigned char m_value;
    } 	SByte;

typedef DECLSPEC_UUID("513B8B77-4930-36BA-9A22-0DAEB293E109") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0017
    {
        MemberTypes_Constructor	= 1,
        MemberTypes_Event	= 2,
        MemberTypes_Field	= 4,
        MemberTypes_Method	= 8,
        MemberTypes_Property	= 16,
        MemberTypes_TypeInfo	= 32,
        MemberTypes_Custom	= 64,
        MemberTypes_NestedType	= 128,
        MemberTypes_All	= 191
    } 	MemberTypes;

typedef DECLSPEC_UUID("641AB47A-9351-3A37-81C1-647D31873F15") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0018
    {
        MethodAttributes_MemberAccessMask	= 7,
        MethodAttributes_PrivateScope	= 0,
        MethodAttributes_Private	= 1,
        MethodAttributes_FamANDAssem	= 2,
        MethodAttributes_Assembly	= 3,
        MethodAttributes_Family	= 4,
        MethodAttributes_FamORAssem	= 5,
        MethodAttributes_Public	= 6,
        MethodAttributes_Static	= 16,
        MethodAttributes_Final	= 32,
        MethodAttributes_Virtual	= 64,
        MethodAttributes_HideBySig	= 128,
        MethodAttributes_CheckAccessOnOverride	= 512,
        MethodAttributes_VtableLayoutMask	= 256,
        MethodAttributes_ReuseSlot	= 0,
        MethodAttributes_NewSlot	= 256,
        MethodAttributes_Abstract	= 1024,
        MethodAttributes_SpecialName	= 2048,
        MethodAttributes_PinvokeImpl	= 8192,
        MethodAttributes_UnmanagedExport	= 8,
        MethodAttributes_RTSpecialName	= 4096,
        MethodAttributes_ReservedMask	= 53248,
        MethodAttributes_HasSecurity	= 16384,
        MethodAttributes_RequireSecObject	= 32768
    } 	MethodAttributes;

typedef DECLSPEC_UUID("BCAB3A5D-F2CD-3C69-841D-AD001969BF50") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0019
    {
        MethodImplAttributes_CodeTypeMask	= 3,
        MethodImplAttributes_IL	= 0,
        MethodImplAttributes_Native	= 1,
        MethodImplAttributes_OPTIL	= 2,
        MethodImplAttributes_Runtime	= 3,
        MethodImplAttributes_ManagedMask	= 4,
        MethodImplAttributes_Unmanaged	= 4,
        MethodImplAttributes_Managed	= 0,
        MethodImplAttributes_ForwardRef	= 16,
        MethodImplAttributes_PreserveSig	= 128,
        MethodImplAttributes_InternalCall	= 4096,
        MethodImplAttributes_Synchronized	= 32,
        MethodImplAttributes_NoInlining	= 8,
        MethodImplAttributes_MaxMethodImplVal	= 65535
    } 	MethodImplAttributes;

typedef DECLSPEC_UUID("7D29BC4B-8FBC-38AA-8B35-ED4539A1CF8E") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0020
    {
        PrincipalPolicy_UnauthenticatedPrincipal	= 0,
        PrincipalPolicy_NoPrincipal	= 1,
        PrincipalPolicy_WindowsPrincipal	= 2
    } 	PrincipalPolicy;

typedef DECLSPEC_UUID("8830F669-E622-3DA0-BC37-4A02A151E142") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0021
    {
        WindowsAccountType_Normal	= 0,
        WindowsAccountType_Guest	= 1,
        WindowsAccountType_System	= 2,
        WindowsAccountType_Anonymous	= 3
    } 	WindowsAccountType;

typedef DECLSPEC_UUID("10A8B906-2F7A-327C-87AB-1A95A9B5E23E") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0023
    {
        TokenAccessLevels_AssignPrimary	= 1,
        TokenAccessLevels_Duplicate	= 2,
        TokenAccessLevels_Impersonate	= 4,
        TokenAccessLevels_Query	= 8,
        TokenAccessLevels_QuerySource	= 16,
        TokenAccessLevels_AdjustPrivileges	= 32,
        TokenAccessLevels_AdjustGroups	= 64,
        TokenAccessLevels_AdjustDefault	= 128,
        TokenAccessLevels_AdjustSessionId	= 256,
        TokenAccessLevels_Read	= 0x20008,
        TokenAccessLevels_Write	= 0x200e0,
        TokenAccessLevels_AllAccess	= 0xf01ff,
        TokenAccessLevels_MaximumAllowed	= 0x2000000
    } 	TokenAccessLevels;

typedef DECLSPEC_UUID("F0778630-AC34-3D71-9FAB-617F61243065") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0024
    {
        AssemblyBuilderAccess_Run	= 1,
        AssemblyBuilderAccess_Save	= 2,
        AssemblyBuilderAccess_RunAndSave	= 3,
        AssemblyBuilderAccess_ReflectionOnly	= 6
    } 	AssemblyBuilderAccess;

typedef DECLSPEC_UUID("78304E50-A1E6-3D84-A718-49020681E02E") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0025
    {
        StreamingContextStates_CrossProcess	= 1,
        StreamingContextStates_CrossMachine	= 2,
        StreamingContextStates_File	= 4,
        StreamingContextStates_Persistence	= 8,
        StreamingContextStates_Remoting	= 16,
        StreamingContextStates_Other	= 32,
        StreamingContextStates_Clone	= 64,
        StreamingContextStates_CrossAppDomain	= 128,
        StreamingContextStates_All	= 255
    } 	StreamingContextStates;

typedef DECLSPEC_UUID("79179AA0-E14C-35EA-A666-66BE968AF69F") struct tagStreamingContext
    {
    IUnknown *m_additionalContext;
    StreamingContextStates m_state;
    } 	StreamingContext;

typedef DECLSPEC_UUID("8E3CC6FB-A6ED-3F63-A7D1-D40D8C6666F6") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0000_0000_0026
    {
        TypeCode_Empty	= 0,
        TypeCode_Object	= 1,
        TypeCode_DBNull	= 2,
        TypeCode_Boolean	= 3,
        TypeCode_Char	= 4,
        TypeCode_SByte	= 5,
        TypeCode_Byte	= 6,
        TypeCode_Int16	= 7,
        TypeCode_UInt16	= 8,
        TypeCode_Int32	= 9,
        TypeCode_UInt32	= 10,
        TypeCode_Int64	= 11,
        TypeCode_UInt64	= 12,
        TypeCode_Single	= 13,
        TypeCode_Double	= 14,
        TypeCode_Decimal	= 15,
        TypeCode_DateTime	= 16,
        TypeCode_String	= 18
    } 	TypeCode;

typedef DECLSPEC_UUID("D0431551-3853-37F8-B714-8A8986E1EA38") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0016_0001
    {
        StringComparison_CurrentCulture	= 0,
        StringComparison_CurrentCultureIgnoreCase	= 1,
        StringComparison_InvariantCulture	= 2,
        StringComparison_InvariantCultureIgnoreCase	= 3,
        StringComparison_Ordinal	= 4,
        StringComparison_OrdinalIgnoreCase	= 5
    } 	StringComparison;

typedef DECLSPEC_UUID("69CEDC24-BC35-3354-B324-6BD5F3ECB757") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0020_0001
    {
        DateTimeKind_Unspecified	= 0,
        DateTimeKind_Utc	= 1,
        DateTimeKind_Local	= 2
    } 	DateTimeKind;

typedef DECLSPEC_UUID("148540D3-E67F-36DC-A55D-2C8DEC53B9D3") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0044_0001
    {
        AppDomainManagerInitializationOptions_None	= 0,
        AppDomainManagerInitializationOptions_RegisterWithHost	= 1
    } 	AppDomainManagerInitializationOptions;

typedef DECLSPEC_UUID("8A6C24C5-1F87-37C2-BC4D-3421EB62D4C1") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0047_0001
    {
        LoaderOptimization_NotSpecified	= 0,
        LoaderOptimization_SingleDomain	= 1,
        LoaderOptimization_MultiDomain	= 2,
        LoaderOptimization_MultiDomainHost	= 3,
        LoaderOptimization_DomainMask	= 3,
        LoaderOptimization_DisallowBindings	= 4
    } 	LoaderOptimization;

typedef DECLSPEC_UUID("9BC2306F-4971-38F5-B861-F19C022274A0") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0059_0001
    {
        AttributeTargets_Assembly	= 1,
        AttributeTargets_Module	= 2,
        AttributeTargets_Class	= 4,
        AttributeTargets_Struct	= 8,
        AttributeTargets_Enum	= 16,
        AttributeTargets_Constructor	= 32,
        AttributeTargets_Method	= 64,
        AttributeTargets_Property	= 128,
        AttributeTargets_Field	= 256,
        AttributeTargets_Event	= 512,
        AttributeTargets_Interface	= 1024,
        AttributeTargets_Parameter	= 2048,
        AttributeTargets_Delegate	= 4096,
        AttributeTargets_ReturnValue	= 8192,
        AttributeTargets_GenericParameter	= 16384,
        AttributeTargets_All	= 32767
    } 	AttributeTargets;

typedef DECLSPEC_UUID("C3008E12-9B16-36EC-B731-73257F25BE7A") struct tagBoolean
    {
    long m_value;
    } 	Boolean;

typedef DECLSPEC_UUID("9B957340-ADBA-3234-91EA-46A5C9BFF530") struct tagByte
    {
    unsigned char m_value;
    } 	Byte;

typedef DECLSPEC_UUID("6EE96102-3657-3D66-867A-26B63AAAAF78") struct tagChar
    {
    unsigned char m_value;
    } 	Char;

typedef DECLSPEC_UUID("12D4D747-6B55-36F2-9108-3EE9BC0FFEFD") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0072_0001
    {
        DayOfWeek_Sunday	= 0,
        DayOfWeek_Monday	= 1,
        DayOfWeek_Tuesday	= 2,
        DayOfWeek_Wednesday	= 3,
        DayOfWeek_Thursday	= 4,
        DayOfWeek_Friday	= 5,
        DayOfWeek_Saturday	= 6
    } 	DayOfWeek;

typedef DECLSPEC_UUID("6FB370D8-4F72-3AC1-9A32-3875F336ECB5") struct tagDecimal
    {
    long flags;
    long hi;
    long lo;
    long mid;
    } 	Decimal;

typedef DECLSPEC_UUID("0F4F147F-4369-3388-8E4B-71E20C96F9AD") struct tagDouble
    {
    double m_value;
    } 	Double;

typedef DECLSPEC_UUID("3B1774CD-34E0-3C00-AABD-168B38C62FD9") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0080_0001
    {
        EnvironmentVariableTarget_Process	= 0,
        EnvironmentVariableTarget_User	= 1,
        EnvironmentVariableTarget_Machine	= 2
    } 	EnvironmentVariableTarget;

typedef DECLSPEC_UUID("2E05A70A-1BBE-31DF-B2A8-B8FA0F130915") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0081_0001
    {
        SpecialFolder_ApplicationData	= 26,
        SpecialFolder_CommonApplicationData	= 35,
        SpecialFolder_LocalApplicationData	= 28,
        SpecialFolder_Cookies	= 33,
        SpecialFolder_Desktop	= 0,
        SpecialFolder_Favorites	= 6,
        SpecialFolder_History	= 34,
        SpecialFolder_InternetCache	= 32,
        SpecialFolder_Programs	= 2,
        SpecialFolder_MyComputer	= 17,
        SpecialFolder_MyMusic	= 13,
        SpecialFolder_MyPictures	= 39,
        SpecialFolder_Recent	= 8,
        SpecialFolder_SendTo	= 9,
        SpecialFolder_StartMenu	= 11,
        SpecialFolder_Startup	= 7,
        SpecialFolder_System	= 37,
        SpecialFolder_Templates	= 21,
        SpecialFolder_DesktopDirectory	= 16,
        SpecialFolder_Personal	= 5,
        SpecialFolder_MyDocuments	= 5,
        SpecialFolder_ProgramFiles	= 38,
        SpecialFolder_CommonProgramFiles	= 43
    } 	SpecialFolder;

#define GUID_NULL "00000000-0000-0000-0000-000000000000"

typedef DECLSPEC_UUID("9C5923E9-DE52-33EA-88DE-7EBC8633B9CC") struct tagGuid
    {
    long _a;
    short _b;
    short _c;
    unsigned char _d;
    unsigned char _e;
    unsigned char _f;
    unsigned char _g;
    unsigned char _h;
    unsigned char _i;
    unsigned char _j;
    unsigned char _k;
    } 	Guid;

typedef DECLSPEC_UUID("206DAF34-5BA5-3504-8A19-D57699561886") struct tagInt16
    {
    short m_value;
    } 	Int16;

typedef DECLSPEC_UUID("A310FADD-7C33-377C-9D6B-599B0317D7F2") struct tagInt32
    {
    long m_value;
    } 	Int32;

typedef DECLSPEC_UUID("AD1CECF5-5FAD-3ECF-AD89-2FEBD6521FA9") struct tagInt64
    {
    INT64 m_value;
    } 	Int64;

typedef DECLSPEC_UUID("A1CB710C-8D50-3181-BB38-65CE2E98F9A6") struct tagIntPtr
    {
    void *m_value;
    } 	IntPtr;

typedef DECLSPEC_UUID("D12ABE44-783E-328B-AAD3-4ED726E903C7") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0094_0001
    {
        MidpointRounding_ToEven	= 0,
        MidpointRounding_AwayFromZero	= 1
    } 	MidpointRounding;

typedef DECLSPEC_UUID("F9628962-01E2-32F6-A40C-08BD8ADCFF25") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0109_0001
    {
        PlatformID_Win32S	= 0,
        PlatformID_Win32Windows	= 1,
        PlatformID_Win32NT	= 2,
        PlatformID_WinCE	= 3,
        PlatformID_Unix	= 4
    } 	PlatformID;

typedef DECLSPEC_UUID("23D4A35B-C997-3401-8372-736025B17744") struct tagSingle
    {
    double m_value;
    } 	Single;

typedef DECLSPEC_UUID("94942670-4ACF-3572-92D1-0916CD777E00") struct tagTimeSpan
    {
    Int64 _ticks;
    } 	TimeSpan;

typedef DECLSPEC_UUID("06AD02B5-C5A4-3EEC-B7BA-B0AF7860D36A") struct tagTypedReference
    {
    Int64 value;
    Int64 Type;
    } 	TypedReference;

typedef DECLSPEC_UUID("0F0928B7-11DD-31DD-A0D5-BB008AE887BF") struct tagUInt16
    {
    unsigned short m_value;
    } 	UInt16;

typedef DECLSPEC_UUID("4F854E40-AF6D-3D30-860A-E9722C85E9A3") struct tagUInt32
    {
    unsigned long m_value;
    } 	UInt32;

typedef DECLSPEC_UUID("62AD7D6B-52CC-3ED4-A20D-1A32EF6BF1DA") struct tagUInt64
    {
    UINT64 m_value;
    } 	UInt64;

typedef DECLSPEC_UUID("4F93B8DD-5396-3B65-B16A-11FBC8812A71") struct tagUIntPtr
    {
    void *m_value;
    } 	UIntPtr;

typedef DECLSPEC_UUID("CA5C1C2B-61F8-3FC4-B66B-17163A3066A5") struct tagVoid
    {
    //void vo;
    } 	Void;

typedef DECLSPEC_UUID("BA0E4CF7-A429-3FE8-ABAB-183387D05852") struct tagLockCookie
    {
    long _dwFlags;
    long _dwWriterSeqNum;
    long _wReaderAndWriterLevel;
    long _dwThreadID;
    } 	LockCookie;

typedef DECLSPEC_UUID("A2959123-2F66-35B4-815D-37C83360809B") struct tagNativeOverlapped
    {
    Int64 InternalLow;
    Int64 InternalHigh;
    long OffsetLow;
    long OffsetHigh;
    Int64 EventHandle;
    } 	NativeOverlapped;

typedef DECLSPEC_UUID("D32B1206-1440-3664-9991-1AE109ADD173") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0144_0001
    {
        ThreadPriority_Lowest	= 0,
        ThreadPriority_BelowNormal	= 1,
        ThreadPriority_Normal	= 2,
        ThreadPriority_AboveNormal	= 3,
        ThreadPriority_Highest	= 4
    } 	ThreadPriority;

typedef DECLSPEC_UUID("F768EC63-95ED-35FC-9876-7BCF01A14919") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0145_0001
    {
        ThreadState_Running	= 0,
        ThreadState_StopRequested	= 1,
        ThreadState_SuspendRequested	= 2,
        ThreadState_Background	= 4,
        ThreadState_Unstarted	= 8,
        ThreadState_Stopped	= 16,
        ThreadState_WaitSleepJoin	= 32,
        ThreadState_Suspended	= 64,
        ThreadState_AbortRequested	= 128,
        ThreadState_Aborted	= 256
    } 	ThreadState;

typedef DECLSPEC_UUID("7055B1DB-D445-31FC-BDEC-A9FB3F6E6E58") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0150_0001
    {
        ApartmentState_STA	= 0,
        ApartmentState_MTA	= 1,
        ApartmentState_Unknown	= 2
    } 	ApartmentState;

typedef DECLSPEC_UUID("A6CCEB32-EC73-3E9B-8852-02783C97D3FA") struct tagDictionaryEntry
    {
    IUnknown *_key;
    IUnknown *_value;
    } 	DictionaryEntry;

typedef DECLSPEC_UUID("86343361-CE50-35EE-8BEA-6F39EC8C8159") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0177_0001
    {
        DebuggingModes_None	= 0,
        DebuggingModes_Default	= 1,
        DebuggingModes_DisableOptimizations	= 256,
        DebuggingModes_IgnoreSymbolStoreSequencePoints	= 2,
        DebuggingModes_EnableEditAndContinue	= 4
    } 	DebuggingModes;

typedef DECLSPEC_UUID("5A235286-93F1-3C18-A3AE-16D345A87A24") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0177_0002
    {
        DebuggerBrowsableState_Never	= 0,
        DebuggerBrowsableState_Collapsed	= 2,
        DebuggerBrowsableState_RootHidden	= 3
    } 	DebuggerBrowsableState;

typedef DECLSPEC_UUID("981DC77E-CE21-3753-92DA-3C4A0CC7AA44") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0220_0001
    {
        AssemblyNameFlags_None	= 0,
        AssemblyNameFlags_PublicKey	= 1,
        AssemblyNameFlags_EnableJITcompileOptimizer	= 16384,
        AssemblyNameFlags_EnableJITcompileTracking	= 32768,
        AssemblyNameFlags_Retargetable	= 256
    } 	AssemblyNameFlags;

typedef DECLSPEC_UUID("56B1CCCB-6490-396D-8C09-2257259F3CAA") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0220_0002
    {
        ProcessorArchitecture_None	= 0,
        ProcessorArchitecture_MSIL	= 1,
        ProcessorArchitecture_X86	= 2,
        ProcessorArchitecture_IA64	= 3,
        ProcessorArchitecture_Amd64	= 4
    } 	ProcessorArchitecture;

typedef DECLSPEC_UUID("9DC6AC40-EDFA-3E34-9AD1-B7A0A9E3A40A") struct tagCustomAttributeTypedArgument
    {
    IUnknown *m_value;
    _Type *m_argumentType;
    } 	CustomAttributeTypedArgument;

typedef DECLSPEC_UUID("7FC47A26-AA2E-32EA-BDE4-01A490842D87") struct tagCustomAttributeNamedArgument
    {
    _MemberInfo *m_memberInfo;
    CustomAttributeTypedArgument m_value;
    } 	CustomAttributeNamedArgument;

typedef DECLSPEC_UUID("E84FE360-54E3-3884-ADEE-7C6832DD354E") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0233_0001
    {
        ResourceLocation_Embedded	= 1,
        ResourceLocation_ContainedInAnotherAssembly	= 2,
        ResourceLocation_ContainedInManifestFile	= 4
    } 	ResourceLocation;

typedef DECLSPEC_UUID("68DA8301-BE1B-3C22-B9F2-DB8F48694DDD") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0235_0001
    {
        PortableExecutableKinds_NotAPortableExecutableImage	= 0,
        PortableExecutableKinds_ILOnly	= 1,
        PortableExecutableKinds_Required32Bit	= 2,
        PortableExecutableKinds_PE32Plus	= 4,
        PortableExecutableKinds_Unmanaged32Bit	= 8
    } 	PortableExecutableKinds;

typedef DECLSPEC_UUID("51191552-C65E-360D-BA21-9F0E454FD59F") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0235_0002
    {
        ImageFileMachine_I386	= 332,
        ImageFileMachine_IA64	= 512,
        ImageFileMachine_AMD64	= 34404
    } 	ImageFileMachine;

typedef DECLSPEC_UUID("6BD98650-5AE6-3F03-B6CF-1463BBD45E6D") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0238_0001
    {
        ExceptionHandlingClauseOptions_Clause	= 0,
        ExceptionHandlingClauseOptions_Filter	= 1,
        ExceptionHandlingClauseOptions_Finally	= 2,
        ExceptionHandlingClauseOptions_Fault	= 4
    } 	ExceptionHandlingClauseOptions;

typedef DECLSPEC_UUID("D89E7F8E-9F99-3EE9-8FCE-D97E64C8650E") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0243_0001
    {
        ResourceAttributes_Public	= 1,
        ResourceAttributes_Private	= 2
    } 	ResourceAttributes;

typedef DECLSPEC_UUID("3642E7ED-5A69-3A94-98D3-A08877A0D046") struct tagSerializationEntry
    {
    _Type *m_type;
    IUnknown *m_value;
    LPSTR m_name;
    } 	SerializationEntry;

typedef DECLSPEC_UUID("F680A48A-2D6C-33F1-AFF7-6273B785B035") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0276_0001
    {
        CalendarAlgorithmType_Unknown	= 0,
        CalendarAlgorithmType_SolarCalendar	= 1,
        CalendarAlgorithmType_LunarCalendar	= 2,
        CalendarAlgorithmType_LunisolarCalendar	= 3
    } 	CalendarAlgorithmType;

typedef DECLSPEC_UUID("117D12E1-4D32-3326-B23E-57D4FE34A527") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0276_0002
    {
        CalendarWeekRule_FirstDay	= 0,
        CalendarWeekRule_FirstFullWeek	= 1,
        CalendarWeekRule_FirstFourDayWeek	= 2
    } 	CalendarWeekRule;

typedef DECLSPEC_UUID("FDBF0369-D278-3320-B9CE-0E0719380C0F") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0277_0001
    {
        CompareOptions_None	= 0,
        CompareOptions_IgnoreCase	= 1,
        CompareOptions_IgnoreNonSpace	= 2,
        CompareOptions_IgnoreSymbols	= 4,
        CompareOptions_IgnoreKanaType	= 8,
        CompareOptions_IgnoreWidth	= 16,
        CompareOptions_OrdinalIgnoreCase	= 0x10000000,
        CompareOptions_StringSort	= 0x20000000,
        CompareOptions_Ordinal	= 0x40000000
    } 	CompareOptions;

typedef DECLSPEC_UUID("AB8E1300-F46A-3FFD-BCEF-A45DE1C55458") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0279_0001
    {
        CultureTypes_NeutralCultures	= 1,
        CultureTypes_SpecificCultures	= 2,
        CultureTypes_InstalledWin32Cultures	= 4,
        CultureTypes_AllCultures	= 7,
        CultureTypes_UserCustomCulture	= 8,
        CultureTypes_ReplacementCultures	= 16,
        CultureTypes_WindowsOnlyCultures	= 32,
        CultureTypes_FrameworkCultures	= 64
    } 	CultureTypes;

typedef DECLSPEC_UUID("F62FF05F-99CE-30DB-8344-2B2C26F5765C") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0279_0002
    {
        DateTimeStyles_None	= 0,
        DateTimeStyles_AllowLeadingWhite	= 1,
        DateTimeStyles_AllowTrailingWhite	= 2,
        DateTimeStyles_AllowInnerWhite	= 4,
        DateTimeStyles_AllowWhiteSpaces	= 7,
        DateTimeStyles_NoCurrentDateDefault	= 8,
        DateTimeStyles_AdjustToUniversal	= 16,
        DateTimeStyles_AssumeLocal	= 32,
        DateTimeStyles_AssumeUniversal	= 64,
        DateTimeStyles_RoundTripKind	= 128
    } 	DateTimeStyles;

typedef DECLSPEC_UUID("A2D18600-D187-399C-B2ED-6FA8ED5D2A59") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0281_0001
    {
        DigitShapes_Context	= 0,
        DigitShapes_None	= 1,
        DigitShapes_NativeNational	= 2
    } 	DigitShapes;

typedef DECLSPEC_UUID("D535A40B-83C0-36FC-82D1-7EF2DE252ECC") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0282_0001
    {
        GregorianCalendarTypes_Localized	= 1,
        GregorianCalendarTypes_USEnglish	= 2,
        GregorianCalendarTypes_MiddleEastFrench	= 9,
        GregorianCalendarTypes_Arabic	= 10,
        GregorianCalendarTypes_TransliteratedEnglish	= 11,
        GregorianCalendarTypes_TransliteratedFrench	= 12
    } 	GregorianCalendarTypes;

typedef DECLSPEC_UUID("00D1ACA9-41F2-3340-816E-330175414A56") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0295_0001
    {
        NumberStyles_None	= 0,
        NumberStyles_AllowLeadingWhite	= 1,
        NumberStyles_AllowTrailingWhite	= 2,
        NumberStyles_AllowLeadingSign	= 4,
        NumberStyles_AllowTrailingSign	= 8,
        NumberStyles_AllowParentheses	= 16,
        NumberStyles_AllowDecimalPoint	= 32,
        NumberStyles_AllowThousands	= 64,
        NumberStyles_AllowExponent	= 128,
        NumberStyles_AllowCurrencySymbol	= 256,
        NumberStyles_AllowHexSpecifier	= 512,
        NumberStyles_Integer	= 7,
        NumberStyles_HexNumber	= 515,
        NumberStyles_Number	= 111,
        NumberStyles_Float	= 167,
        NumberStyles_Currency	= 383,
        NumberStyles_Any	= 511
    } 	NumberStyles;

typedef DECLSPEC_UUID("299E2A7D-6551-3ED1-B4A0-A51CB56EEFE7") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0295_0002
    {
        UnicodeCategory_UppercaseLetter	= 0,
        UnicodeCategory_LowercaseLetter	= 1,
        UnicodeCategory_TitlecaseLetter	= 2,
        UnicodeCategory_ModifierLetter	= 3,
        UnicodeCategory_OtherLetter	= 4,
        UnicodeCategory_NonSpacingMark	= 5,
        UnicodeCategory_SpacingCombiningMark	= 6,
        UnicodeCategory_EnclosingMark	= 7,
        UnicodeCategory_DecimalDigitNumber	= 8,
        UnicodeCategory_LetterNumber	= 9,
        UnicodeCategory_OtherNumber	= 10,
        UnicodeCategory_SpaceSeparator	= 11,
        UnicodeCategory_LineSeparator	= 12,
        UnicodeCategory_ParagraphSeparator	= 13,
        UnicodeCategory_Control	= 14,
        UnicodeCategory_Format	= 15,
        UnicodeCategory_Surrogate	= 16,
        UnicodeCategory_PrivateUse	= 17,
        UnicodeCategory_ConnectorPunctuation	= 18,
        UnicodeCategory_DashPunctuation	= 19,
        UnicodeCategory_OpenPunctuation	= 20,
        UnicodeCategory_ClosePunctuation	= 21,
        UnicodeCategory_InitialQuotePunctuation	= 22,
        UnicodeCategory_FinalQuotePunctuation	= 23,
        UnicodeCategory_OtherPunctuation	= 24,
        UnicodeCategory_MathSymbol	= 25,
        UnicodeCategory_CurrencySymbol	= 26,
        UnicodeCategory_ModifierSymbol	= 27,
        UnicodeCategory_OtherSymbol	= 28,
        UnicodeCategory_OtherNotAssigned	= 29
    } 	UnicodeCategory;

typedef DECLSPEC_UUID("B38DA717-D61B-3C13-93CE-2B9370D0AE43") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0299_0001
    {
        NormalizationForm_FormC	= 1,
        NormalizationForm_FormD	= 2,
        NormalizationForm_FormKC	= 5,
        NormalizationForm_FormKD	= 6
    } 	NormalizationForm;

typedef DECLSPEC_UUID("2173568C-6EDC-392B-880A-CC158D7E2BDA") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0312_0001
    {
        UltimateResourceFallbackLocation_MainAssembly	= 0,
        UltimateResourceFallbackLocation_Satellite	= 1
    } 	UltimateResourceFallbackLocation;

typedef DECLSPEC_UUID("B3B46869-C190-3199-96DA-4006E2AC6E72") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0313_0001
    {
        RegistryHive_ClassesRoot	= 0x80000000,
        RegistryHive_CurrentUser	= 0x80000001,
        RegistryHive_LocalMachine	= 0x80000002,
        RegistryHive_Users	= 0x80000003,
        RegistryHive_PerformanceData	= 0x80000004,
        RegistryHive_CurrentConfig	= 0x80000005,
        RegistryHive_DynData	= 0x80000006
    } 	RegistryHive;

typedef DECLSPEC_UUID("62ECB562-B92A-37E7-8D5B-84036A1A4348") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0314_0001
    {
        RegistryValueKind_String	= 1,
        RegistryValueKind_ExpandString	= 2,
        RegistryValueKind_Binary	= 3,
        RegistryValueKind_DWord	= 4,
        RegistryValueKind_MultiString	= 7,
        RegistryValueKind_QWord	= 11,
        RegistryValueKind_Unknown	= 0
    } 	RegistryValueKind;

typedef DECLSPEC_UUID("D93EACA8-8176-387B-9667-6D32B504047B") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0322_0001
    {
        ApplicationVersionMatch_MatchExactVersion	= 0,
        ApplicationVersionMatch_MatchAllVersions	= 1
    } 	ApplicationVersionMatch;

typedef DECLSPEC_UUID("940B1725-F706-3CEF-9586-0F189B117C20") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0331_0001
    {
        TrustManagerUIContext_Install	= 0,
        TrustManagerUIContext_Upgrade	= 1,
        TrustManagerUIContext_Run	= 2
    } 	TrustManagerUIContext;

typedef DECLSPEC_UUID("338D2529-B3D6-37F1-BB01-404698DC537B") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0337_0001
    {
        PolicyStatementAttribute_Nothing	= 0,
        PolicyStatementAttribute_Exclusive	= 1,
        PolicyStatementAttribute_LevelFinal	= 2,
        PolicyStatementAttribute_All	= 3
    } 	PolicyStatementAttribute;

typedef DECLSPEC_UUID("8B7E18B8-3E96-3A4C-82CB-3D13FA15A32F") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0359_0001
    {
        WindowsBuiltInRole_Administrator	= 544,
        WindowsBuiltInRole_User	= 545,
        WindowsBuiltInRole_Guest	= 546,
        WindowsBuiltInRole_PowerUser	= 547,
        WindowsBuiltInRole_AccountOperator	= 548,
        WindowsBuiltInRole_SystemOperator	= 549,
        WindowsBuiltInRole_PrintOperator	= 550,
        WindowsBuiltInRole_BackupOperator	= 551,
        WindowsBuiltInRole_Replicator	= 552
    } 	WindowsBuiltInRole;

typedef DECLSPEC_UUID("8351108F-34E3-3CC9-BF5A-C76C48060835") struct tagArrayWithOffset
    {
    IUnknown *m_array;
    long m_offset;
    long m_count;
    } 	ArrayWithOffset;

typedef DECLSPEC_UUID("18C327E4-E4BA-3C3C-9942-274272626278") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0362_0001
    {
        ComInterfaceType_InterfaceIsDual	= 0,
        ComInterfaceType_InterfaceIsIUnknown	= 1,
        ComInterfaceType_InterfaceIsIDispatch	= 2
    } 	ComInterfaceType;

typedef DECLSPEC_UUID("D58DC4BB-3A4C-3B0C-B75F-9D0876694F3D") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0364_0001
    {
        ClassInterfaceType_None	= 0,
        ClassInterfaceType_AutoDispatch	= 1,
        ClassInterfaceType_AutoDual	= 2
    } 	ClassInterfaceType;

typedef DECLSPEC_UUID("8A958A5B-626C-3D22-AB56-3EC30C9B7EE2") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0372_0001
    {
        IDispatchImplType_SystemDefinedImpl	= 0,
        IDispatchImplType_InternalImpl	= 1,
        IDispatchImplType_CompatibleImpl	= 2
    } 	IDispatchImplType;

typedef DECLSPEC_UUID("97AA3979-1066-3969-B278-E064BDB97DCE") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0375_0001
    {
        TypeLibTypeFlags_FAppObject	= 1,
        TypeLibTypeFlags_FCanCreate	= 2,
        TypeLibTypeFlags_FLicensed	= 4,
        TypeLibTypeFlags_FPreDeclId	= 8,
        TypeLibTypeFlags_FHidden	= 16,
        TypeLibTypeFlags_FControl	= 32,
        TypeLibTypeFlags_FDual	= 64,
        TypeLibTypeFlags_FNonExtensible	= 128,
        TypeLibTypeFlags_FOleAutomation	= 256,
        TypeLibTypeFlags_FRestricted	= 512,
        TypeLibTypeFlags_FAggregatable	= 1024,
        TypeLibTypeFlags_FReplaceable	= 2048,
        TypeLibTypeFlags_FDispatchable	= 4096,
        TypeLibTypeFlags_FReverseBind	= 8192
    } 	TypeLibTypeFlags;

typedef DECLSPEC_UUID("BF1BF727-537F-3284-9CA9-5ADF12641AB5") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0375_0002
    {
        TypeLibFuncFlags_FRestricted	= 1,
        TypeLibFuncFlags_FSource	= 2,
        TypeLibFuncFlags_FBindable	= 4,
        TypeLibFuncFlags_FRequestEdit	= 8,
        TypeLibFuncFlags_FDisplayBind	= 16,
        TypeLibFuncFlags_FDefaultBind	= 32,
        TypeLibFuncFlags_FHidden	= 64,
        TypeLibFuncFlags_FUsesGetLastError	= 128,
        TypeLibFuncFlags_FDefaultCollelem	= 256,
        TypeLibFuncFlags_FUiDefault	= 512,
        TypeLibFuncFlags_FNonBrowsable	= 1024,
        TypeLibFuncFlags_FReplaceable	= 2048,
        TypeLibFuncFlags_FImmediateBind	= 4096
    } 	TypeLibFuncFlags;

typedef DECLSPEC_UUID("C660D7A6-D1DD-3E9D-85EB-F844791E2DAE") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0375_0003
    {
        TypeLibVarFlags_FReadOnly	= 1,
        TypeLibVarFlags_FSource	= 2,
        TypeLibVarFlags_FBindable	= 4,
        TypeLibVarFlags_FRequestEdit	= 8,
        TypeLibVarFlags_FDisplayBind	= 16,
        TypeLibVarFlags_FDefaultBind	= 32,
        TypeLibVarFlags_FHidden	= 64,
        TypeLibVarFlags_FRestricted	= 128,
        TypeLibVarFlags_FDefaultCollelem	= 256,
        TypeLibVarFlags_FUiDefault	= 512,
        TypeLibVarFlags_FNonBrowsable	= 1024,
        TypeLibVarFlags_FReplaceable	= 2048,
        TypeLibVarFlags_FImmediateBind	= 4096
    } 	TypeLibVarFlags;

typedef DECLSPEC_UUID("875EB8B7-663D-3B83-B702-5AF34662B9B5") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0378_0001
    {
        VarEnum_VT_EMPTY	= 0,
        VarEnum_VT_NULL	= 1,
        VarEnum_VT_I2	= 2,
        VarEnum_VT_I4	= 3,
        VarEnum_VT_R4	= 4,
        VarEnum_VT_R8	= 5,
        VarEnum_VT_CY	= 6,
        VarEnum_VT_DATE	= 7,
        VarEnum_VT_BSTR	= 8,
        VarEnum_VT_DISPATCH	= 9,
        VarEnum_VT_ERROR	= 10,
        VarEnum_VT_BOOL	= 11,
        VarEnum_VT_VARIANT	= 12,
        VarEnum_VT_UNKNOWN	= 13,
        VarEnum_VT_DECIMAL	= 14,
        VarEnum_VT_I1	= 16,
        VarEnum_VT_UI1	= 17,
        VarEnum_VT_UI2	= 18,
        VarEnum_VT_UI4	= 19,
        VarEnum_VT_I8	= 20,
        VarEnum_VT_UI8	= 21,
        VarEnum_VT_INT	= 22,
        VarEnum_VT_UINT	= 23,
        VarEnum_VT_VOID	= 24,
        VarEnum_VT_HRESULT	= 25,
        VarEnum_VT_PTR	= 26,
        VarEnum_VT_SAFEARRAY	= 27,
        VarEnum_VT_CARRAY	= 28,
        VarEnum_VT_USERDEFINED	= 29,
        VarEnum_VT_LPSTR	= 30,
        VarEnum_VT_LPWSTR	= 31,
        VarEnum_VT_RECORD	= 36,
        VarEnum_VT_FILETIME	= 64,
        VarEnum_VT_BLOB	= 65,
        VarEnum_VT_STREAM	= 66,
        VarEnum_VT_STORAGE	= 67,
        VarEnum_VT_STREAMED_OBJECT	= 68,
        VarEnum_VT_STORED_OBJECT	= 69,
        VarEnum_VT_BLOB_OBJECT	= 70,
        VarEnum_VT_CF	= 71,
        VarEnum_VT_CLSID	= 72,
        VarEnum_VT_VECTOR	= 4096,
        VarEnum_VT_ARRAY	= 8192,
        VarEnum_VT_BYREF	= 16384
    } 	VarEnum;

typedef DECLSPEC_UUID("03D65B1A-BBF6-3BDC-BC53-85E02415670D") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0378_0002
    {
        UnmanagedType_Bool	= 2,
        UnmanagedType_I1	= 3,
        UnmanagedType_U1	= 4,
        UnmanagedType_I2	= 5,
        UnmanagedType_U2	= 6,
        UnmanagedType_I4	= 7,
        UnmanagedType_U4	= 8,
        UnmanagedType_I8	= 9,
        UnmanagedType_U8	= 10,
        UnmanagedType_R4	= 11,
        UnmanagedType_R8	= 12,
        UnmanagedType_Currency	= 15,
        UnmanagedType_BStr	= 19,
        UnmanagedType_LPStr	= 20,
        UnmanagedType_LPWStr	= 21,
        UnmanagedType_LPTStr	= 22,
        UnmanagedType_ByValTStr	= 23,
        UnmanagedType_IUnknown	= 25,
        UnmanagedType_IDispatch	= 26,
        UnmanagedType_Struct	= 27,
        UnmanagedType_Interface	= 28,
        UnmanagedType_SafeArray	= 29,
        UnmanagedType_ByValArray	= 30,
        UnmanagedType_SysInt	= 31,
        UnmanagedType_SysUInt	= 32,
        UnmanagedType_VBByRefStr	= 34,
        UnmanagedType_AnsiBStr	= 35,
        UnmanagedType_TBStr	= 36,
        UnmanagedType_VariantBool	= 37,
        UnmanagedType_FunctionPtr	= 38,
        UnmanagedType_AsAny	= 40,
        UnmanagedType_LPArray	= 42,
        UnmanagedType_LPStruct	= 43,
        UnmanagedType_CustomMarshaler	= 44,
        UnmanagedType_Error	= 45
    } 	UnmanagedType;

typedef DECLSPEC_UUID("79C2C4A6-8D21-371C-995F-52C38701B91E") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0398_0001
    {
        CallingConvention_Winapi	= 1,
        CallingConvention_Cdecl	= 2,
        CallingConvention_StdCall	= 3,
        CallingConvention_ThisCall	= 4,
        CallingConvention_FastCall	= 5
    } 	CallingConvention;

typedef DECLSPEC_UUID("DEAE387D-C9A7-3A9C-B772-0153A2538502") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0398_0002
    {
        CharSet_None	= 1,
        CharSet_Ansi	= 2,
        CharSet_Unicode	= 3,
        CharSet_Auto	= 4
    } 	CharSet;

typedef DECLSPEC_UUID("0E71F38E-C5E1-3094-9487-5C7DD1E998EC") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0400_0001
    {
        GCHandleType_Weak	= 0,
        GCHandleType_WeakTrackResurrection	= 1,
        GCHandleType_Normal	= 2,
        GCHandleType_Pinned	= 3
    } 	GCHandleType;

typedef DECLSPEC_UUID("66E1F723-E57F-35CE-8306-3C09FB68A322") struct tagGCHandle
    {
    Int64 m_handle;
    } 	GCHandle;

typedef DECLSPEC_UUID("C71DCE2B-B87F-37A9-89ED-F1145955BCD6") struct tagHandleRef
    {
    IUnknown *m_wrapper;
    Int64 m_handle;
    } 	HandleRef;

typedef DECLSPEC_UUID("9ABE23BD-D5D5-30F6-B127-9B3AB98F7DBB") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0402_0001
    {
        LayoutKind_Sequential	= 0,
        LayoutKind_Explicit	= 2,
        LayoutKind_Auto	= 3
    } 	LayoutKind;

typedef DECLSPEC_UUID("96E0DEE8-C1CA-38A5-A3C9-52DA9B5440EF") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0407_0001
    {
        ComMemberType_Method	= 0,
        ComMemberType_PropGet	= 1,
        ComMemberType_PropSet	= 2
    } 	ComMemberType;

typedef DECLSPEC_UUID("765653A0-2B24-38E4-A6F6-5CB325E8CCC9") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0414_0001
    {
        AssemblyRegistrationFlags_None	= 0,
        AssemblyRegistrationFlags_SetCodeBase	= 1
    } 	AssemblyRegistrationFlags;

typedef DECLSPEC_UUID("C335350A-892D-37F7-967C-99B3C4C4A301") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0415_0001
    {
        TypeLibImporterFlags_None	= 0,
        TypeLibImporterFlags_PrimaryInteropAssembly	= 1,
        TypeLibImporterFlags_UnsafeInterfaces	= 2,
        TypeLibImporterFlags_SafeArrayAsSystemArray	= 4,
        TypeLibImporterFlags_TransformDispRetVals	= 8,
        TypeLibImporterFlags_PreventClassMembers	= 16,
        TypeLibImporterFlags_SerializableValueClasses	= 32,
        TypeLibImporterFlags_ImportAsX86	= 256,
        TypeLibImporterFlags_ImportAsX64	= 512,
        TypeLibImporterFlags_ImportAsItanium	= 1024,
        TypeLibImporterFlags_ImportAsAgnostic	= 2048,
        TypeLibImporterFlags_ReflectionOnlyLoading	= 4096
    } 	TypeLibImporterFlags;

typedef DECLSPEC_UUID("AD92602F-55F2-3552-A977-D93C79DB346E") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0415_0002
    {
        TypeLibExporterFlags_None	= 0,
        TypeLibExporterFlags_OnlyReferenceRegistered	= 1,
        TypeLibExporterFlags_CallerResolvedReferences	= 2,
        TypeLibExporterFlags_OldNames	= 4,
        TypeLibExporterFlags_ExportAs32Bit	= 16,
        TypeLibExporterFlags_ExportAs64Bit	= 32
    } 	TypeLibExporterFlags;

typedef DECLSPEC_UUID("26170123-45FD-30F7-987D-BF3689662B6C") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0415_0003
    {
        ExporterEventKind_NOTIF_TYPECONVERTED	= 0,
        ExporterEventKind_NOTIF_CONVERTWARNING	= 1,
        ExporterEventKind_ERROR_REFTOINVALIDASSEMBLY	= 2
    } 	ExporterEventKind;

typedef DECLSPEC_UUID("8D583B4D-52C8-3243-829E-999D660D3947") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0432_0001
    {
        SearchOption_TopDirectoryOnly	= 0,
        SearchOption_AllDirectories	= 1
    } 	SearchOption;

typedef DECLSPEC_UUID("72E8197D-904B-3371-AE0E-B70D9D53771C") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0434_0001
    {
        DriveType_Unknown	= 0,
        DriveType_NoRootDirectory	= 1,
        DriveType_Removable	= 2,
        DriveType_Fixed	= 3,
        DriveType_Network	= 4,
        DriveType_CDRom	= 5,
        DriveType_Ram	= 6
    } 	DriveType;

typedef DECLSPEC_UUID("74CAA246-BE0E-3AE5-A17C-946E10D89626") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0438_0001
    {
        FileAccess_Read	= 1,
        FileAccess_Write	= 2,
        FileAccess_ReadWrite	= 3
    } 	FileAccess;

typedef DECLSPEC_UUID("F9A5BD62-8DA3-3B2D-A556-864CDAD150F6") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0440_0001
    {
        FileMode_CreateNew	= 1,
        FileMode_Create	= 2,
        FileMode_Open	= 3,
        FileMode_OpenOrCreate	= 4,
        FileMode_Truncate	= 5,
        FileMode_Append	= 6
    } 	FileMode;

typedef DECLSPEC_UUID("68DB6E95-F774-3AE3-B1DE-B0CC80F6E174") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0441_0001
    {
        FileOptions_None	= 0,
        FileOptions_WriteThrough	= 0x80000000,
        FileOptions_Asynchronous	= 0x40000000,
        FileOptions_RandomAccess	= 0x10000000,
        FileOptions_DeleteOnClose	= 0x4000000,
        FileOptions_SequentialScan	= 0x8000000,
        FileOptions_Encrypted	= 16384
    } 	FileOptions;

typedef DECLSPEC_UUID("791EC67C-5A1B-35FD-832D-80B02D07ED6D") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0441_0002
    {
        FileShare_None	= 0,
        FileShare_Read	= 1,
        FileShare_Write	= 2,
        FileShare_ReadWrite	= 3,
        FileShare_Delete	= 4,
        FileShare_Inheritable	= 16
    } 	FileShare;

typedef DECLSPEC_UUID("38512CF6-FF94-3AD8-8299-F5F64A8956AA") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0442_0001
    {
        FileAttributes_ReadOnly	= 1,
        FileAttributes_Hidden	= 2,
        FileAttributes_System	= 4,
        FileAttributes_Directory	= 16,
        FileAttributes_Archive	= 32,
        FileAttributes_Device	= 64,
        FileAttributes_Normal	= 128,
        FileAttributes_Temporary	= 256,
        FileAttributes_SparseFile	= 512,
        FileAttributes_ReparsePoint	= 1024,
        FileAttributes_Compressed	= 2048,
        FileAttributes_Offline	= 4096,
        FileAttributes_NotContentIndexed	= 8192,
        FileAttributes_Encrypted	= 16384
    } 	FileAttributes;

typedef DECLSPEC_UUID("0CFE1ABF-373D-3208-85C2-947434046704") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0445_0001
    {
        SeekOrigin_Begin	= 0,
        SeekOrigin_Current	= 1,
        SeekOrigin_End	= 2
    } 	SeekOrigin;

typedef DECLSPEC_UUID("1E552DAE-602E-3CB5-9BFA-22AEB1FC38A5") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0460_0001
    {
        CompilationRelaxations_NoStringInterning	= 8
    } 	CompilationRelaxations;

typedef DECLSPEC_UUID("63A2E7FD-9A9B-3D6B-A827-3C5BF8DB1E6A") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0464_0001
    {
        MethodImplOptions_Unmanaged	= 4,
        MethodImplOptions_ForwardRef	= 16,
        MethodImplOptions_PreserveSig	= 128,
        MethodImplOptions_InternalCall	= 4096,
        MethodImplOptions_Synchronized	= 32,
        MethodImplOptions_NoInlining	= 8
    } 	MethodImplOptions;

typedef DECLSPEC_UUID("6B7F18AE-F5AC-368F-8DFD-AB5E2D229ED7") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0464_0002
    {
        MethodCodeType_IL	= 0,
        MethodCodeType_Native	= 1,
        MethodCodeType_OPTIL	= 2,
        MethodCodeType_Runtime	= 3
    } 	MethodCodeType;

typedef DECLSPEC_UUID("EC73FCEB-1AEA-3A57-B953-21368E992507") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0472_0001
    {
        EnvironmentPermissionAccess_NoAccess	= 0,
        EnvironmentPermissionAccess_Read	= 1,
        EnvironmentPermissionAccess_Write	= 2,
        EnvironmentPermissionAccess_AllAccess	= 3
    } 	EnvironmentPermissionAccess;

typedef DECLSPEC_UUID("0DF04A9B-DDDC-3777-A6B1-9604B5CED191") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0477_0001
    {
        FileDialogPermissionAccess_None	= 0,
        FileDialogPermissionAccess_Open	= 1,
        FileDialogPermissionAccess_Save	= 2,
        FileDialogPermissionAccess_OpenSave	= 3
    } 	FileDialogPermissionAccess;

typedef DECLSPEC_UUID("CA10C1A1-9FDC-36A3-AD74-8FAC60E6541C") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0478_0001
    {
        FileIOPermissionAccess_NoAccess	= 0,
        FileIOPermissionAccess_Read	= 1,
        FileIOPermissionAccess_Write	= 2,
        FileIOPermissionAccess_Append	= 4,
        FileIOPermissionAccess_PathDiscovery	= 8,
        FileIOPermissionAccess_AllAccess	= 15
    } 	FileIOPermissionAccess;

typedef DECLSPEC_UUID("4548A129-2855-35E8-A892-FF506C877AA8") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0479_0001
    {
        HostProtectionResource_None	= 0,
        HostProtectionResource_Synchronization	= 1,
        HostProtectionResource_SharedState	= 2,
        HostProtectionResource_ExternalProcessMgmt	= 4,
        HostProtectionResource_SelfAffectingProcessMgmt	= 8,
        HostProtectionResource_ExternalThreading	= 16,
        HostProtectionResource_SelfAffectingThreading	= 32,
        HostProtectionResource_SecurityInfrastructure	= 64,
        HostProtectionResource_UI	= 128,
        HostProtectionResource_MayLeakOnAbort	= 256,
        HostProtectionResource_All	= 511
    } 	HostProtectionResource;

typedef DECLSPEC_UUID("0D6E31DF-3A76-3054-A8EB-150E92300F89") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0482_0001
    {
        IsolatedStorageContainment_None	= 0,
        IsolatedStorageContainment_DomainIsolationByUser	= 16,
        IsolatedStorageContainment_ApplicationIsolationByUser	= 21,
        IsolatedStorageContainment_AssemblyIsolationByUser	= 32,
        IsolatedStorageContainment_DomainIsolationByMachine	= 48,
        IsolatedStorageContainment_AssemblyIsolationByMachine	= 64,
        IsolatedStorageContainment_ApplicationIsolationByMachine	= 69,
        IsolatedStorageContainment_DomainIsolationByRoamingUser	= 80,
        IsolatedStorageContainment_AssemblyIsolationByRoamingUser	= 96,
        IsolatedStorageContainment_ApplicationIsolationByRoamingUser	= 101,
        IsolatedStorageContainment_AdministerIsolatedStorageByUser	= 112,
        IsolatedStorageContainment_UnrestrictedIsolatedStorage	= 240
    } 	IsolatedStorageContainment;

typedef DECLSPEC_UUID("DFAECF33-4728-382D-A34D-C1B0392F8B73") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0484_0001
    {
        PermissionState_Unrestricted	= 1,
        PermissionState_None	= 0
    } 	PermissionState;

typedef DECLSPEC_UUID("BA99AE52-D539-362F-B78C-4E84C14158BF") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0484_0002
    {
        SecurityAction_Demand	= 2,
        SecurityAction_Assert	= 3,
        SecurityAction_Deny	= 4,
        SecurityAction_PermitOnly	= 5,
        SecurityAction_LinkDemand	= 6,
        SecurityAction_InheritanceDemand	= 7,
        SecurityAction_RequestMinimum	= 8,
        SecurityAction_RequestOptional	= 9,
        SecurityAction_RequestRefuse	= 10
    } 	SecurityAction;

typedef DECLSPEC_UUID("44C2F476-9E95-3D5A-B666-FDBEF071494E") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0501_0001
    {
        ReflectionPermissionFlag_NoFlags	= 0,
        ReflectionPermissionFlag_TypeInformation	= 1,
        ReflectionPermissionFlag_MemberAccess	= 2,
        ReflectionPermissionFlag_ReflectionEmit	= 4,
        ReflectionPermissionFlag_AllFlags	= 7
    } 	ReflectionPermissionFlag;

typedef DECLSPEC_UUID("B718F0F8-E5E7-3651-A2BE-97009B568250") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0503_0001
    {
        SecurityPermissionFlag_NoFlags	= 0,
        SecurityPermissionFlag_Assertion	= 1,
        SecurityPermissionFlag_UnmanagedCode	= 2,
        SecurityPermissionFlag_SkipVerification	= 4,
        SecurityPermissionFlag_Execution	= 8,
        SecurityPermissionFlag_ControlThread	= 16,
        SecurityPermissionFlag_ControlEvidence	= 32,
        SecurityPermissionFlag_ControlPolicy	= 64,
        SecurityPermissionFlag_SerializationFormatter	= 128,
        SecurityPermissionFlag_ControlDomainPolicy	= 256,
        SecurityPermissionFlag_ControlPrincipal	= 512,
        SecurityPermissionFlag_ControlAppDomain	= 1024,
        SecurityPermissionFlag_RemotingConfiguration	= 2048,
        SecurityPermissionFlag_Infrastructure	= 4096,
        SecurityPermissionFlag_BindingRedirects	= 8192,
        SecurityPermissionFlag_AllFlags	= 16383
    } 	SecurityPermissionFlag;

typedef DECLSPEC_UUID("B30FD15E-CED6-3977-8151-0D50E79CD703") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0507_0001
    {
        UIPermissionWindow_NoWindows	= 0,
        UIPermissionWindow_SafeSubWindows	= 1,
        UIPermissionWindow_SafeTopLevelWindows	= 2,
        UIPermissionWindow_AllWindows	= 3
    } 	UIPermissionWindow;

typedef DECLSPEC_UUID("9E5C3C99-D046-3FE5-9921-21CF0F0A08FF") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0507_0002
    {
        UIPermissionClipboard_NoClipboard	= 0,
        UIPermissionClipboard_OwnClipboard	= 1,
        UIPermissionClipboard_AllClipboard	= 2
    } 	UIPermissionClipboard;

typedef DECLSPEC_UUID("742BDC16-F04E-3E0E-8FF1-E3250940B5BF") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0512_0001
    {
        KeyContainerPermissionFlags_NoFlags	= 0,
        KeyContainerPermissionFlags_Create	= 1,
        KeyContainerPermissionFlags_Open	= 2,
        KeyContainerPermissionFlags_Delete	= 4,
        KeyContainerPermissionFlags_Import	= 16,
        KeyContainerPermissionFlags_Export	= 32,
        KeyContainerPermissionFlags_Sign	= 256,
        KeyContainerPermissionFlags_Decrypt	= 512,
        KeyContainerPermissionFlags_ViewAcl	= 4096,
        KeyContainerPermissionFlags_ChangeAcl	= 8192,
        KeyContainerPermissionFlags_AllFlags	= 13111
    } 	KeyContainerPermissionFlags;

typedef DECLSPEC_UUID("3EB29914-F9A9-3C15-A03F-560885CFCB61") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0517_0001
    {
        RegistryPermissionAccess_NoAccess	= 0,
        RegistryPermissionAccess_Read	= 1,
        RegistryPermissionAccess_Write	= 2,
        RegistryPermissionAccess_Create	= 4,
        RegistryPermissionAccess_AllAccess	= 7
    } 	RegistryPermissionAccess;

typedef DECLSPEC_UUID("51E1B3CA-D3CB-39BF-A016-6199569E74B2") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0521_0001
    {
        HostSecurityManagerOptions_None	= 0,
        HostSecurityManagerOptions_HostAppDomainEvidence	= 1,
        HostSecurityManagerOptions_HostPolicyLevel	= 2,
        HostSecurityManagerOptions_HostAssemblyEvidence	= 4,
        HostSecurityManagerOptions_HostDetermineApplicationTrust	= 8,
        HostSecurityManagerOptions_HostResolvePolicy	= 16,
        HostSecurityManagerOptions_AllFlags	= 31
    } 	HostSecurityManagerOptions;

typedef DECLSPEC_UUID("EE965595-853A-331B-9CD0-D53DCCE3B6F8") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0526_0001
    {
        PolicyLevelType_User	= 0,
        PolicyLevelType_Machine	= 1,
        PolicyLevelType_Enterprise	= 2,
        PolicyLevelType_AppDomain	= 3
    } 	PolicyLevelType;

typedef DECLSPEC_UUID("902A6B65-41BD-32F1-A233-075F009D459C") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0527_0001
    {
        SecurityZone_MyComputer	= 0,
        SecurityZone_Intranet	= 1,
        SecurityZone_Trusted	= 2,
        SecurityZone_Internet	= 3,
        SecurityZone_Untrusted	= 4,
        SecurityZone_NoZone	= 0xffffffff
    } 	SecurityZone;

typedef DECLSPEC_UUID("669212CB-7972-3073-BDB0-6782534B6590") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0546_0001
    {
        WellKnownObjectMode_Singleton	= 1,
        WellKnownObjectMode_SingleCall	= 2
    } 	WellKnownObjectMode;

typedef DECLSPEC_UUID("C888351B-5DFD-3A9F-8D36-96E7770D0EBF") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0607_0001
    {
        SoapOption_None	= 0,
        SoapOption_AlwaysIncludeTypes	= 1,
        SoapOption_XsdString	= 2,
        SoapOption_EmbedAll	= 4,
        SoapOption_Option1	= 8,
        SoapOption_Option2	= 16
    } 	SoapOption;

typedef DECLSPEC_UUID("0AD279C7-05FB-3A46-9031-92E00C9F7C29") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0607_0002
    {
        XmlFieldOrderOption_All	= 0,
        XmlFieldOrderOption_Sequence	= 1,
        XmlFieldOrderOption_Choice	= 2
    } 	XmlFieldOrderOption;

typedef DECLSPEC_UUID("82FEBF4C-9FC8-3285-8D5A-F00DD1E1BA40") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0618_0001
    {
        CustomErrorsModes_On	= 0,
        CustomErrorsModes_Off	= 1,
        CustomErrorsModes_RemoteOnly	= 2
    } 	CustomErrorsModes;

typedef DECLSPEC_UUID("B3E5A7FF-AFC6-3F2B-8FFF-300C7C567693") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0662_0001
    {
        IsolatedStorageScope_None	= 0,
        IsolatedStorageScope_User	= 1,
        IsolatedStorageScope_Domain	= 2,
        IsolatedStorageScope_Assembly	= 4,
        IsolatedStorageScope_Roaming	= 8,
        IsolatedStorageScope_Machine	= 16,
        IsolatedStorageScope_Application	= 32
    } 	IsolatedStorageScope;

typedef DECLSPEC_UUID("72B06367-DE53-3111-9C49-B816EFEE3148") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0667_0001
    {
        FormatterTypeStyle_TypesWhenNeeded	= 0,
        FormatterTypeStyle_TypesAlways	= 1,
        FormatterTypeStyle_XsdString	= 2
    } 	FormatterTypeStyle;

typedef DECLSPEC_UUID("F18130E7-BD6C-37F4-9488-35F9FB832AC7") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0667_0002
    {
        FormatterAssemblyStyle_Simple	= 0,
        FormatterAssemblyStyle_Full	= 1
    } 	FormatterAssemblyStyle;

typedef DECLSPEC_UUID("C5D299AC-63B0-3448-BCB7-6AA9B5EB598E") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0667_0003
    {
        TypeFilterLevel_Low	= 2,
        TypeFilterLevel_Full	= 3
    } 	TypeFilterLevel;

typedef DECLSPEC_UUID("4E8B1BB8-6A6F-3B57-8AFA-0129550B07BE") struct tagEventToken
    {
    long m_event;
    } 	EventToken;

typedef DECLSPEC_UUID("24246833-61EB-329D-BDDF-0DAF3874062B") struct tagFieldToken
    {
    long m_fieldTok;
    IUnknown *m_class;
    } 	FieldToken;

typedef DECLSPEC_UUID("A419B664-DABD-383D-A0DB-991487D41E14") struct tagLabel
    {
    long m_label;
    } 	Label;

typedef DECLSPEC_UUID("0EFE423A-A87E-33D9-8BF4-2D212620EE5F") struct tagMethodToken
    {
    long m_method;
    } 	MethodToken;

typedef DECLSPEC_UUID("E87FA4D7-0CAA-3C24-BE83-CF98B50186E2") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0701_0001
    {
        PEFileKinds_Dll	= 1,
        PEFileKinds_ConsoleApplication	= 2,
        PEFileKinds_WindowApplication	= 3
    } 	PEFileKinds;

typedef DECLSPEC_UUID("A7ED05C6-FECF-3C35-BA3B-84163AC1D5E5") struct tagOpCode
    {
    LPSTR m_stringname;
    StackBehaviour m_pop;
    StackBehaviour m_push;
    OperandType m_operand;
    OpCodeType m_type;
    long m_size;
    unsigned char m_s1;
    unsigned char m_s2;
    FlowControl m_ctrl;
    long m_endsUncondJmpBlk;
    long m_stackChange;
    } 	OpCode;

typedef DECLSPEC_UUID("CFB98CA9-8121-35BE-AF40-C176C616A16B") struct tagParameterToken
    {
    long m_tkParameter;
    } 	ParameterToken;

typedef DECLSPEC_UUID("566833C7-F4A0-30EE-BD7E-44752AD570E6") struct tagPropertyToken
    {
    long m_property;
    } 	PropertyToken;

typedef DECLSPEC_UUID("155E1466-0E84-3F2B-B825-F6525523407C") struct tagSignatureToken
    {
    long m_signature;
    _ModuleBuilder *m_moduleBuilder;
    } 	SignatureToken;

typedef DECLSPEC_UUID("8CF0278D-D0AD-307D-BE63-A785432E3FDF") struct tagStringToken
    {
    long m_string;
    } 	StringToken;

typedef DECLSPEC_UUID("3E0AF669-1CD8-3AFC-9F2C-E81C2B810135") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0705_0001
    {
        PackingSize_Unspecified	= 0,
        PackingSize_Size1	= 1,
        PackingSize_Size2	= 2,
        PackingSize_Size4	= 4,
        PackingSize_Size8	= 8,
        PackingSize_Size16	= 16,
        PackingSize_Size32	= 32,
        PackingSize_Size64	= 64,
        PackingSize_Size128	= 128
    } 	PackingSize;

typedef DECLSPEC_UUID("048FA0C2-8EBB-3BC2-A47F-01F12A32008E") struct tagTypeToken
    {
    long m_class;
    } 	TypeToken;

typedef DECLSPEC_UUID("DDD019BF-D182-34DE-9192-95575F7B2A31") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0709_0001
    {
        AssemblyHashAlgorithm_None	= 0,
        AssemblyHashAlgorithm_MD5	= 32771,
        AssemblyHashAlgorithm_SHA1	= 32772
    } 	AssemblyHashAlgorithm;

typedef DECLSPEC_UUID("42A66664-072F-3A67-A189-7D440709A77E") struct tagAssemblyHash
    {
    AssemblyHashAlgorithm _Algorithm;
    SAFEARRAY * _value;
    } 	AssemblyHash;

typedef DECLSPEC_UUID("E3DC8079-43BC-3E70-B291-1591CC9E451D") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0709_0002
    {
        AssemblyVersionCompatibility_SameMachine	= 1,
        AssemblyVersionCompatibility_SameProcess	= 2,
        AssemblyVersionCompatibility_SameDomain	= 3
    } 	AssemblyVersionCompatibility;

typedef DECLSPEC_UUID("75C9E85E-D2D1-32DB-BF9C-0636F94FB0C2") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0709_0003
    {
        CipherMode_CBC	= 1,
        CipherMode_ECB	= 2,
        CipherMode_OFB	= 3,
        CipherMode_CFB	= 4,
        CipherMode_CTS	= 5
    } 	CipherMode;

typedef DECLSPEC_UUID("1254089D-0104-3BFB-B6BA-9168F994DCA6") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0709_0004
    {
        PaddingMode_None	= 1,
        PaddingMode_PKCS7	= 2,
        PaddingMode_Zeros	= 3,
        PaddingMode_ANSIX923	= 4,
        PaddingMode_ISO10126	= 5
    } 	PaddingMode;

typedef DECLSPEC_UUID("11472518-C3B8-3BF4-9705-2135E1709883") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0720_0001
    {
        FromBase64TransformMode_IgnoreWhiteSpaces	= 0,
        FromBase64TransformMode_DoNotIgnoreWhiteSpaces	= 1
    } 	FromBase64TransformMode;

typedef DECLSPEC_UUID("6BE41CDF-29D7-32DB-8181-5117F580BA68") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0723_0001
    {
        CspProviderFlags_NoFlags	= 0,
        CspProviderFlags_UseMachineKeyStore	= 1,
        CspProviderFlags_UseDefaultKeyContainer	= 2,
        CspProviderFlags_UseNonExportableKey	= 4,
        CspProviderFlags_UseExistingKey	= 8,
        CspProviderFlags_UseArchivableKey	= 16,
        CspProviderFlags_UseUserProtectedKey	= 32,
        CspProviderFlags_NoPrompt	= 64
    } 	CspProviderFlags;

typedef DECLSPEC_UUID("8990CB3B-227E-3A43-8264-0057EC763FA0") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0725_0001
    {
        CryptoStreamMode_Read	= 0,
        CryptoStreamMode_Write	= 1
    } 	CryptoStreamMode;

typedef DECLSPEC_UUID("0C646F46-AA27-350D-88DD-D8C920CE6C2D") struct tagDSAParameters
    {
    SAFEARRAY * P;
    SAFEARRAY * Q;
    SAFEARRAY * G;
    SAFEARRAY * y;
    SAFEARRAY * J;
    SAFEARRAY * x;
    SAFEARRAY * Seed;
    long Counter;
    } 	DSAParameters;

typedef DECLSPEC_UUID("D7DD91C9-91E4-38E9-8EC6-37836572A66A") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0744_0001
    {
        KeyNumber_Exchange	= 1,
        KeyNumber_Signature	= 2
    } 	KeyNumber;

typedef DECLSPEC_UUID("094E9135-483D-334A-AAE7-8690895AB70A") struct tagRSAParameters
    {
    SAFEARRAY * Exponent;
    SAFEARRAY * Modulus;
    SAFEARRAY * P;
    SAFEARRAY * Q;
    SAFEARRAY * DP;
    SAFEARRAY * DQ;
    SAFEARRAY * InverseQ;
    SAFEARRAY * D;
    } 	RSAParameters;

typedef DECLSPEC_UUID("70446B90-F93B-3578-9B7B-95D05A12DA60") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0779_0001
    {
        X509ContentType_Unknown	= 0,
        X509ContentType_Cert	= 1,
        X509ContentType_SerializedCert	= 2,
        X509ContentType_Pfx	= 3,
        X509ContentType_Pkcs12	= 3,
        X509ContentType_SerializedStore	= 4,
        X509ContentType_Pkcs7	= 5,
        X509ContentType_Authenticode	= 6
    } 	X509ContentType;

typedef DECLSPEC_UUID("2530EE1E-6D70-3A79-A864-7CC0E2120DA1") 
enum __MIDL___MIDL_itf_mscorlib_fixed_0001_0779_0002
    {
        X509KeyStorageFlags_DefaultKeySet	= 0,
        X509KeyStorageFlags_UserKeySet	= 1,
        X509KeyStorageFlags_MachineKeySet	= 2,
        X509KeyStorageFlags_Exportable	= 4,
        X509KeyStorageFlags_UserProtected	= 8,
        X509KeyStorageFlags_PersistKeySet	= 16
    } 	X509KeyStorageFlags;

EXTERN_C const IID LIBID_mscorlib;

#ifndef __ICloneable_INTERFACE_DEFINED__
#define __ICloneable_INTERFACE_DEFINED__

EXTERN_C const IID IID_ICloneable;

typedef struct ICloneableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ICloneable * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ICloneable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ICloneable * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ICloneable * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ICloneable * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ICloneable * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ICloneable * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Clone )( 
        ICloneable * This,
         VARIANT *pRetVal);

    END_INTERFACE
} ICloneableVtbl;

interface ICloneable
{
    CONST_VTBL struct ICloneableVtbl *lpVtbl;
};

#endif 

#ifndef __IEnumerable_INTERFACE_DEFINED__
#define __IEnumerable_INTERFACE_DEFINED__

EXTERN_C const IID IID_IEnumerable;

typedef struct IEnumerableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IEnumerable * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IEnumerable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IEnumerable * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IEnumerable * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IEnumerable * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IEnumerable * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IEnumerable * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
        IEnumerable * This,
         IEnumVARIANT **pRetVal);

    END_INTERFACE
} IEnumerableVtbl;

interface IEnumerable
{
    CONST_VTBL struct IEnumerableVtbl *lpVtbl;
};

#endif 	

#ifndef __ICollection_INTERFACE_DEFINED__
#define __ICollection_INTERFACE_DEFINED__

EXTERN_C const IID IID_ICollection;

typedef struct ICollectionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ICollection * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ICollection * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ICollection * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ICollection * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ICollection * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ICollection * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ICollection * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *CopyTo )( 
        ICollection * This,
         _Array *Array,
         long index);

     HRESULT ( STDMETHODCALLTYPE *get_Count )( 
        ICollection * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_SyncRoot )( 
        ICollection * This,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_IsSynchronized )( 
        ICollection * This,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} ICollectionVtbl;

interface ICollection
{
    CONST_VTBL struct ICollectionVtbl *lpVtbl;
};

#endif 	

#ifndef __IList_INTERFACE_DEFINED__
#define __IList_INTERFACE_DEFINED__

EXTERN_C const IID IID_IList;

typedef struct IListVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IList * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IList * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IList * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IList * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IList * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IList * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IList * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Item )( 
        IList * This,
         long index,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *putref_Item )( 
        IList * This,
         long index,
         VARIANT pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Add )( 
        IList * This,
         VARIANT value,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Contains )( 
        IList * This,
         VARIANT value,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Clear )( 
        IList * This);

     HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
        IList * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_IsFixedSize )( 
        IList * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *IndexOf )( 
        IList * This,
         VARIANT value,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Insert )( 
        IList * This,
         long index,
         VARIANT value);

     HRESULT ( STDMETHODCALLTYPE *Remove )( 
        IList * This,
         VARIANT value);

     HRESULT ( STDMETHODCALLTYPE *RemoveAt )( 
        IList * This,
         long index);

    END_INTERFACE
} IListVtbl;

interface IList
{
    CONST_VTBL struct IListVtbl *lpVtbl;
};

#endif 	

#ifndef __IEnumerator_INTERFACE_DEFINED__
#define __IEnumerator_INTERFACE_DEFINED__

EXTERN_C const IID IID_IEnumerator;

typedef struct IEnumeratorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IEnumerator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IEnumerator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IEnumerator * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IEnumerator * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IEnumerator * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IEnumerator * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IEnumerator * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *MoveNext )( 
        IEnumerator * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Current )( 
        IEnumerator * This,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Reset )( 
        IEnumerator * This);

    END_INTERFACE
} IEnumeratorVtbl;

interface IEnumerator
{
    CONST_VTBL struct IEnumeratorVtbl *lpVtbl;
};

#endif 	

#ifndef __IDisposable_INTERFACE_DEFINED__
#define __IDisposable_INTERFACE_DEFINED__

EXTERN_C const IID IID_IDisposable;

typedef struct IDisposableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IDisposable * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IDisposable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IDisposable * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IDisposable * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IDisposable * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IDisposable * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IDisposable * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Dispose )( 
        IDisposable * This);

    END_INTERFACE
} IDisposableVtbl;

interface IDisposable
{
    CONST_VTBL struct IDisposableVtbl *lpVtbl;
};

#endif 	

#ifndef __IComparable_INTERFACE_DEFINED__
#define __IComparable_INTERFACE_DEFINED__

EXTERN_C const IID IID_IComparable;

typedef struct IComparableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IComparable * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IComparable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IComparable * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IComparable * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IComparable * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IComparable * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IComparable * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *CompareTo )( 
        IComparable * This,
         VARIANT obj,
         long *pRetVal);

    END_INTERFACE
} IComparableVtbl;

interface IComparable
{
    CONST_VTBL struct IComparableVtbl *lpVtbl;
};

#endif 	

#ifndef __IFormattable_INTERFACE_DEFINED__
#define __IFormattable_INTERFACE_DEFINED__

EXTERN_C const IID IID_IFormattable;

typedef struct IFormattableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IFormattable * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IFormattable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IFormattable * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IFormattable * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IFormattable * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IFormattable * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IFormattable * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ToString )( 
        IFormattable * This,
         BSTR format,
         IFormatProvider *formatProvider,
         BSTR *pRetVal);

    END_INTERFACE
} IFormattableVtbl;

interface IFormattable
{
    CONST_VTBL struct IFormattableVtbl *lpVtbl;
};

#endif 	

#ifndef __IConvertible_INTERFACE_DEFINED__
#define __IConvertible_INTERFACE_DEFINED__

EXTERN_C const IID IID_IConvertible;

typedef struct IConvertibleVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IConvertible * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IConvertible * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IConvertible * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IConvertible * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IConvertible * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IConvertible * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IConvertible * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetTypeCode )( 
        IConvertible * This,
         TypeCode *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToBoolean )( 
        IConvertible * This,
         IFormatProvider *provider,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToChar )( 
        IConvertible * This,
         IFormatProvider *provider,
         unsigned short *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToSByte )( 
        IConvertible * This,
         IFormatProvider *provider,
         unsigned char *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToByte )( 
        IConvertible * This,
         IFormatProvider *provider,
         unsigned char *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToInt16 )( 
        IConvertible * This,
         IFormatProvider *provider,
         short *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToUInt16 )( 
        IConvertible * This,
         IFormatProvider *provider,
         unsigned short *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToInt32 )( 
        IConvertible * This,
         IFormatProvider *provider,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToUInt32 )( 
        IConvertible * This,
         IFormatProvider *provider,
         unsigned long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToInt64 )( 
        IConvertible * This,
         IFormatProvider *provider,
         INT64 *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToUInt64 )( 
        IConvertible * This,
         IFormatProvider *provider,
         UINT64 *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToSingle )( 
        IConvertible * This,
         IFormatProvider *provider,
         double *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToDouble )( 
        IConvertible * This,
         IFormatProvider *provider,
         double *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToDecimal )( 
        IConvertible * This,
         IFormatProvider *provider,
         wchar_t *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToDateTime )( 
        IConvertible * This,
         IFormatProvider *provider,
         DATE *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ToString )( 
        IConvertible * This,
         IFormatProvider *provider,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToType )( 
        IConvertible * This,
         _Type *conversionType,
         IFormatProvider *provider,
         VARIANT *pRetVal);

    END_INTERFACE
} IConvertibleVtbl;

interface IConvertible
{
    CONST_VTBL struct IConvertibleVtbl *lpVtbl;
};

#endif 	

#ifndef __IComparer_INTERFACE_DEFINED__
#define __IComparer_INTERFACE_DEFINED__

EXTERN_C const IID IID_IComparer;

typedef struct IComparerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IComparer * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IComparer * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IComparer * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IComparer * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IComparer * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IComparer * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IComparer * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Compare )( 
        IComparer * This,
         VARIANT x,
         VARIANT y,
         long *pRetVal);

    END_INTERFACE
} IComparerVtbl;

interface IComparer
{
    CONST_VTBL struct IComparerVtbl *lpVtbl;
};

#endif 	

#ifndef __IEqualityComparer_INTERFACE_DEFINED__
#define __IEqualityComparer_INTERFACE_DEFINED__

EXTERN_C const IID IID_IEqualityComparer;

typedef struct IEqualityComparerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IEqualityComparer * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IEqualityComparer * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IEqualityComparer * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IEqualityComparer * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IEqualityComparer * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IEqualityComparer * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IEqualityComparer * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Equals )( 
        IEqualityComparer * This,
         VARIANT x,
         VARIANT y,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetHashCode )( 
        IEqualityComparer * This,
         VARIANT obj,
         long *pRetVal);

    END_INTERFACE
} IEqualityComparerVtbl;

interface IEqualityComparer
{
    CONST_VTBL struct IEqualityComparerVtbl *lpVtbl;
};

#endif 	

#ifndef __ISerializable_INTERFACE_DEFINED__
#define __ISerializable_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISerializable;

typedef struct ISerializableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISerializable * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISerializable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISerializable * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISerializable * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISerializable * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISerializable * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISerializable * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetObjectData )( 
        ISerializable * This,
         _SerializationInfo *info,
         StreamingContext Context);

    END_INTERFACE
} ISerializableVtbl;

interface ISerializable
{
    CONST_VTBL struct ISerializableVtbl *lpVtbl;
};

#endif 	

#ifndef ___Exception_INTERFACE_DEFINED__
#define ___Exception_INTERFACE_DEFINED__

EXTERN_C const IID IID__Exception;

typedef struct _ExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Exception * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Exception * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Exception * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Exception * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Exception * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Exception * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Exception * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ToString )( 
        _Exception * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Equals )( 
        _Exception * This,
         VARIANT obj,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetHashCode )( 
        _Exception * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetType )( 
        _Exception * This,
         _Type **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Message )( 
        _Exception * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetBaseException )( 
        _Exception * This,
         _Exception **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_StackTrace )( 
        _Exception * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_HelpLink )( 
        _Exception * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_HelpLink )( 
        _Exception * This,
         BSTR pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Source )( 
        _Exception * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_Source )( 
        _Exception * This,
         BSTR pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetObjectData )( 
        _Exception * This,
         _SerializationInfo *info,
         StreamingContext Context);

     HRESULT ( STDMETHODCALLTYPE *get_InnerException )( 
        _Exception * This,
         _Exception **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_TargetSite )( 
        _Exception * This,
         _MethodBase **pRetVal);

    END_INTERFACE
} _ExceptionVtbl;

interface _Exception
{
    CONST_VTBL struct _ExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___Activator_INTERFACE_DEFINED__
#define ___Activator_INTERFACE_DEFINED__

EXTERN_C const IID IID__Activator;

typedef struct _ActivatorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Activator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Activator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Activator * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _Activator * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _Activator * This,
         unsigned long iTInfo,
         unsigned long lcid,
         INT64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _Activator * This,
         GUID *riid,
         INT64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         INT64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _Activator * This,
         unsigned long dispIdMember,
         GUID *riid,
         unsigned long lcid,
         short wFlags,
         INT64 pDispParams,
         INT64 pVarResult,
         INT64 pExcepInfo,
         INT64 puArgErr);

    END_INTERFACE
} _ActivatorVtbl;

interface _Activator
{
    CONST_VTBL struct _ActivatorVtbl *lpVtbl;
};

#endif 	

#ifndef ___AppDomain_INTERFACE_DEFINED__
#define ___AppDomain_INTERFACE_DEFINED__

EXTERN_C const IID IID__AppDomain;

typedef struct _AppDomainVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AppDomain * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AppDomain * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AppDomain * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _AppDomain * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _AppDomain * This,
         unsigned long iTInfo,
         unsigned long lcid,
         INT64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _AppDomain * This,
         GUID *riid,
         INT64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         INT64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _AppDomain * This,
         unsigned long dispIdMember,
         GUID *riid,
         unsigned long lcid,
         short wFlags,
         INT64 pDispParams,
         INT64 pVarResult,
         INT64 pExcepInfo,
         INT64 puArgErr);

     HRESULT ( __stdcall *get_ToString )( 
        _AppDomain * This,
         BSTR *pRetVal);

    HRESULT ( __stdcall *Equals )( 
        _AppDomain * This,
         VARIANT other,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetHashCode )( 
        _AppDomain * This,
         long *pRetVal);

    HRESULT ( __stdcall *GetType )( 
        _AppDomain * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *InitializeLifetimeService )( 
        _AppDomain * This,
         VARIANT *pRetVal);

    HRESULT ( __stdcall *GetLifetimeService )( 
        _AppDomain * This,
         VARIANT *pRetVal);

     HRESULT ( __stdcall *get_Evidence )( 
        _AppDomain * This,
         _Evidence **pRetVal);

    HRESULT ( __stdcall *add_DomainUnload )( 
        _AppDomain * This,
         _EventHandler *value);

    HRESULT ( __stdcall *remove_DomainUnload )( 
        _AppDomain * This,
         _EventHandler *value);

    HRESULT ( __stdcall *add_AssemblyLoad )( 
        _AppDomain * This,
         _AssemblyLoadEventHandler *value);

    HRESULT ( __stdcall *remove_AssemblyLoad )( 
        _AppDomain * This,
         _AssemblyLoadEventHandler *value);

    HRESULT ( __stdcall *add_ProcessExit )( 
        _AppDomain * This,
         _EventHandler *value);

    HRESULT ( __stdcall *remove_ProcessExit )( 
        _AppDomain * This,
         _EventHandler *value);

    HRESULT ( __stdcall *add_TypeResolve )( 
        _AppDomain * This,
         _ResolveEventHandler *value);

    HRESULT ( __stdcall *remove_TypeResolve )( 
        _AppDomain * This,
         _ResolveEventHandler *value);

    HRESULT ( __stdcall *add_ResourceResolve )( 
        _AppDomain * This,
         _ResolveEventHandler *value);

    HRESULT ( __stdcall *remove_ResourceResolve )( 
        _AppDomain * This,
         _ResolveEventHandler *value);

    HRESULT ( __stdcall *add_AssemblyResolve )( 
        _AppDomain * This,
         _ResolveEventHandler *value);

    HRESULT ( __stdcall *remove_AssemblyResolve )( 
        _AppDomain * This,
         _ResolveEventHandler *value);

    HRESULT ( __stdcall *add_UnhandledException )( 
        _AppDomain * This,
         _UnhandledExceptionEventHandler *value);

    HRESULT ( __stdcall *remove_UnhandledException )( 
        _AppDomain * This,
         _UnhandledExceptionEventHandler *value);

    HRESULT ( __stdcall *DefineDynamicAssembly )( 
        _AppDomain * This,
         _AssemblyName *name,
         AssemblyBuilderAccess access,
         _AssemblyBuilder **pRetVal);

    HRESULT ( __stdcall *DefineDynamicAssembly_2 )( 
        _AppDomain * This,
         _AssemblyName *name,
         AssemblyBuilderAccess access,
         BSTR dir,
         _AssemblyBuilder **pRetVal);

    HRESULT ( __stdcall *DefineDynamicAssembly_3 )( 
        _AppDomain * This,
         _AssemblyName *name,
         AssemblyBuilderAccess access,
         _Evidence *Evidence,
         _AssemblyBuilder **pRetVal);

    HRESULT ( __stdcall *DefineDynamicAssembly_4 )( 
        _AppDomain * This,
         _AssemblyName *name,
         AssemblyBuilderAccess access,
         _PermissionSet *requiredPermissions,
         _PermissionSet *optionalPermissions,
         _PermissionSet *refusedPermissions,
         _AssemblyBuilder **pRetVal);

    HRESULT ( __stdcall *DefineDynamicAssembly_5 )( 
        _AppDomain * This,
         _AssemblyName *name,
         AssemblyBuilderAccess access,
         BSTR dir,
         _Evidence *Evidence,
         _AssemblyBuilder **pRetVal);

    HRESULT ( __stdcall *DefineDynamicAssembly_6 )( 
        _AppDomain * This,
         _AssemblyName *name,
         AssemblyBuilderAccess access,
         BSTR dir,
         _PermissionSet *requiredPermissions,
         _PermissionSet *optionalPermissions,
         _PermissionSet *refusedPermissions,
         _AssemblyBuilder **pRetVal);

    HRESULT ( __stdcall *DefineDynamicAssembly_7 )( 
        _AppDomain * This,
         _AssemblyName *name,
         AssemblyBuilderAccess access,
         _Evidence *Evidence,
         _PermissionSet *requiredPermissions,
         _PermissionSet *optionalPermissions,
         _PermissionSet *refusedPermissions,
         _AssemblyBuilder **pRetVal);

    HRESULT ( __stdcall *DefineDynamicAssembly_8 )( 
        _AppDomain * This,
         _AssemblyName *name,
         AssemblyBuilderAccess access,
         BSTR dir,
         _Evidence *Evidence,
         _PermissionSet *requiredPermissions,
         _PermissionSet *optionalPermissions,
         _PermissionSet *refusedPermissions,
         _AssemblyBuilder **pRetVal);

    HRESULT ( __stdcall *DefineDynamicAssembly_9 )( 
        _AppDomain * This,
         _AssemblyName *name,
         AssemblyBuilderAccess access,
         BSTR dir,
         _Evidence *Evidence,
         _PermissionSet *requiredPermissions,
         _PermissionSet *optionalPermissions,
         _PermissionSet *refusedPermissions,
         VARIANT_BOOL IsSynchronized,
         _AssemblyBuilder **pRetVal);

    HRESULT ( __stdcall *CreateInstance )( 
        _AppDomain * This,
         BSTR AssemblyName,
         BSTR typeName,
         _ObjectHandle **pRetVal);

    HRESULT ( __stdcall *CreateInstanceFrom )( 
        _AppDomain * This,
         BSTR assemblyFile,
         BSTR typeName,
         _ObjectHandle **pRetVal);

    HRESULT ( __stdcall *CreateInstance_2 )( 
        _AppDomain * This,
         BSTR AssemblyName,
         BSTR typeName,
         SAFEARRAY * activationAttributes,
         _ObjectHandle **pRetVal);

    HRESULT ( __stdcall *CreateInstanceFrom_2 )( 
        _AppDomain * This,
         BSTR assemblyFile,
         BSTR typeName,
         SAFEARRAY * activationAttributes,
         _ObjectHandle **pRetVal);

    HRESULT ( __stdcall *CreateInstance_3 )( 
        _AppDomain * This,
         BSTR AssemblyName,
         BSTR typeName,
         VARIANT_BOOL ignoreCase,
         BindingFlags bindingAttr,
         _Binder *Binder,
         SAFEARRAY * args,
         _CultureInfo *culture,
         SAFEARRAY * activationAttributes,
         _Evidence *securityAttributes,
         _ObjectHandle **pRetVal);

    HRESULT ( __stdcall *CreateInstanceFrom_3 )( 
        _AppDomain * This,
         BSTR assemblyFile,
         BSTR typeName,
         VARIANT_BOOL ignoreCase,
         BindingFlags bindingAttr,
         _Binder *Binder,
         SAFEARRAY * args,
         _CultureInfo *culture,
         SAFEARRAY * activationAttributes,
         _Evidence *securityAttributes,
         _ObjectHandle **pRetVal);

    HRESULT ( __stdcall *Load )( 
        _AppDomain * This,
         _AssemblyName *assemblyRef,
         _Assembly **pRetVal);

    HRESULT ( __stdcall *Load_2 )( 
        _AppDomain * This,
         BSTR assemblyString,
         _Assembly **pRetVal);

    HRESULT ( __stdcall *Load_3 )( 
        _AppDomain * This,
         SAFEARRAY * rawAssembly,
         _Assembly **pRetVal);

    HRESULT ( __stdcall *Load_4 )( 
        _AppDomain * This,
         SAFEARRAY * rawAssembly,
         SAFEARRAY * rawSymbolStore,
         _Assembly **pRetVal);

    HRESULT ( __stdcall *Load_5 )( 
        _AppDomain * This,
         SAFEARRAY * rawAssembly,
         SAFEARRAY * rawSymbolStore,
         _Evidence *securityEvidence,
         _Assembly **pRetVal);

    HRESULT ( __stdcall *Load_6 )( 
        _AppDomain * This,
         _AssemblyName *assemblyRef,
         _Evidence *assemblySecurity,
         _Assembly **pRetVal);

    HRESULT ( __stdcall *Load_7 )( 
        _AppDomain * This,
         BSTR assemblyString,
         _Evidence *assemblySecurity,
         _Assembly **pRetVal);

    HRESULT ( __stdcall *ExecuteAssembly )( 
        _AppDomain * This,
         BSTR assemblyFile,
         _Evidence *assemblySecurity,
         long *pRetVal);

    HRESULT ( __stdcall *ExecuteAssembly_2 )( 
        _AppDomain * This,
         BSTR assemblyFile,
         long *pRetVal);

    HRESULT ( __stdcall *ExecuteAssembly_3 )( 
        _AppDomain * This,
         BSTR assemblyFile,
         _Evidence *assemblySecurity,
         SAFEARRAY * args,
         long *pRetVal);

     HRESULT ( __stdcall *get_FriendlyName )( 
        _AppDomain * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_BaseDirectory )( 
        _AppDomain * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_RelativeSearchPath )( 
        _AppDomain * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_ShadowCopyFiles )( 
        _AppDomain * This,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetAssemblies )( 
        _AppDomain * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *AppendPrivatePath )( 
        _AppDomain * This,
         BSTR Path);

    HRESULT ( __stdcall *ClearPrivatePath )( 
        _AppDomain * This);

    HRESULT ( __stdcall *SetShadowCopyPath )( 
        _AppDomain * This,
         BSTR s);

    HRESULT ( __stdcall *ClearShadowCopyPath )( 
        _AppDomain * This);

    HRESULT ( __stdcall *SetCachePath )( 
        _AppDomain * This,
         BSTR s);

    HRESULT ( __stdcall *SetData )( 
        _AppDomain * This,
         BSTR name,
         VARIANT data);

    HRESULT ( __stdcall *GetData )( 
        _AppDomain * This,
         BSTR name,
         VARIANT *pRetVal);

    HRESULT ( __stdcall *SetAppDomainPolicy )( 
        _AppDomain * This,
         _PolicyLevel *domainPolicy);

    HRESULT ( __stdcall *SetThreadPrincipal )( 
        _AppDomain * This,
         IPrincipal *principal);

    HRESULT ( __stdcall *SetPrincipalPolicy )( 
        _AppDomain * This,
         PrincipalPolicy policy);

    HRESULT ( __stdcall *DoCallBack )( 
        _AppDomain * This,
         _CrossAppDomainDelegate *theDelegate);

     HRESULT ( __stdcall *get_DynamicDirectory )( 
        _AppDomain * This,
         BSTR *pRetVal);

    END_INTERFACE
} _AppDomainVtbl;

interface _AppDomain
{
    CONST_VTBL struct _AppDomainVtbl *lpVtbl;
};

#endif 	

#ifndef __IEvidenceFactory_INTERFACE_DEFINED__
#define __IEvidenceFactory_INTERFACE_DEFINED__

EXTERN_C const IID IID_IEvidenceFactory;

typedef struct IEvidenceFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IEvidenceFactory * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IEvidenceFactory * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IEvidenceFactory * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IEvidenceFactory * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IEvidenceFactory * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IEvidenceFactory * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IEvidenceFactory * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Evidence )( 
        IEvidenceFactory * This,
         _Evidence **pRetVal);

    END_INTERFACE
} IEvidenceFactoryVtbl;

interface IEvidenceFactory
{
    CONST_VTBL struct IEvidenceFactoryVtbl *lpVtbl;
};

#endif 	

#ifndef __IAppDomainSetup_INTERFACE_DEFINED__
#define __IAppDomainSetup_INTERFACE_DEFINED__

EXTERN_C const IID IID_IAppDomainSetup;

typedef struct IAppDomainSetupVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IAppDomainSetup * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IAppDomainSetup * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IAppDomainSetup * This);

     HRESULT ( __stdcall *get_ApplicationBase )( 
        IAppDomainSetup * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *put_ApplicationBase )( 
        IAppDomainSetup * This,
         BSTR pRetVal);

     HRESULT ( __stdcall *get_ApplicationName )( 
        IAppDomainSetup * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *put_ApplicationName )( 
        IAppDomainSetup * This,
         BSTR pRetVal);

     HRESULT ( __stdcall *get_CachePath )( 
        IAppDomainSetup * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *put_CachePath )( 
        IAppDomainSetup * This,
         BSTR pRetVal);

     HRESULT ( __stdcall *get_ConfigurationFile )( 
        IAppDomainSetup * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *put_ConfigurationFile )( 
        IAppDomainSetup * This,
         BSTR pRetVal);

     HRESULT ( __stdcall *get_DynamicBase )( 
        IAppDomainSetup * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *put_DynamicBase )( 
        IAppDomainSetup * This,
         BSTR pRetVal);

     HRESULT ( __stdcall *get_LicenseFile )( 
        IAppDomainSetup * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *put_LicenseFile )( 
        IAppDomainSetup * This,
         BSTR pRetVal);

     HRESULT ( __stdcall *get_PrivateBinPath )( 
        IAppDomainSetup * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *put_PrivateBinPath )( 
        IAppDomainSetup * This,
         BSTR pRetVal);

     HRESULT ( __stdcall *get_PrivateBinPathProbe )( 
        IAppDomainSetup * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *put_PrivateBinPathProbe )( 
        IAppDomainSetup * This,
         BSTR pRetVal);

     HRESULT ( __stdcall *get_ShadowCopyDirectories )( 
        IAppDomainSetup * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *put_ShadowCopyDirectories )( 
        IAppDomainSetup * This,
         BSTR pRetVal);

     HRESULT ( __stdcall *get_ShadowCopyFiles )( 
        IAppDomainSetup * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *put_ShadowCopyFiles )( 
        IAppDomainSetup * This,
         BSTR pRetVal);

    END_INTERFACE
} IAppDomainSetupVtbl;

interface IAppDomainSetup
{
    CONST_VTBL struct IAppDomainSetupVtbl *lpVtbl;
};

#endif 	

#ifndef ___Attribute_INTERFACE_DEFINED__
#define ___Attribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__Attribute;

typedef struct _AttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Attribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Attribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Attribute * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _Attribute * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _Attribute * This,
         unsigned long iTInfo,
         unsigned long lcid,
         INT64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _Attribute * This,
         GUID *riid,
         INT64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         INT64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _Attribute * This,
         unsigned long dispIdMember,
         GUID *riid,
         unsigned long lcid,
         short wFlags,
         INT64 pDispParams,
         INT64 pVarResult,
         INT64 pExcepInfo,
         INT64 puArgErr);

    END_INTERFACE
} _AttributeVtbl;

interface _Attribute
{
    CONST_VTBL struct _AttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___Thread_INTERFACE_DEFINED__
#define ___Thread_INTERFACE_DEFINED__

EXTERN_C const IID IID__Thread;

typedef struct _ThreadVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Thread * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Thread * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Thread * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _Thread * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _Thread * This,
         unsigned long iTInfo,
         unsigned long lcid,
         INT64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _Thread * This,
         GUID *riid,
         INT64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         INT64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _Thread * This,
         unsigned long dispIdMember,
         GUID *riid,
         unsigned long lcid,
         short wFlags,
         INT64 pDispParams,
         INT64 pVarResult,
         INT64 pExcepInfo,
         INT64 puArgErr);

    END_INTERFACE
} _ThreadVtbl;

interface _Thread
{
    CONST_VTBL struct _ThreadVtbl *lpVtbl;
};

#endif 	

#ifndef __IObjectReference_INTERFACE_DEFINED__
#define __IObjectReference_INTERFACE_DEFINED__

EXTERN_C const IID IID_IObjectReference;

typedef struct IObjectReferenceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IObjectReference * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IObjectReference * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IObjectReference * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IObjectReference * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IObjectReference * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IObjectReference * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IObjectReference * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetRealObject )( 
        IObjectReference * This,
         StreamingContext Context,
         VARIANT *pRetVal);

    END_INTERFACE
} IObjectReferenceVtbl;

interface IObjectReference
{
    CONST_VTBL struct IObjectReferenceVtbl *lpVtbl;
};

#endif 	

#ifndef __IAsyncResult_INTERFACE_DEFINED__
#define __IAsyncResult_INTERFACE_DEFINED__

EXTERN_C const IID IID_IAsyncResult;

typedef struct IAsyncResultVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IAsyncResult * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IAsyncResult * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IAsyncResult * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IAsyncResult * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IAsyncResult * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IAsyncResult * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IAsyncResult * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_IsCompleted )( 
        IAsyncResult * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_AsyncWaitHandle )( 
        IAsyncResult * This,
         _WaitHandle **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_AsyncState )( 
        IAsyncResult * This,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_CompletedSynchronously )( 
        IAsyncResult * This,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} IAsyncResultVtbl;

interface IAsyncResult
{
    CONST_VTBL struct IAsyncResultVtbl *lpVtbl;
};

#endif 	

#ifndef __ICustomFormatter_INTERFACE_DEFINED__
#define __ICustomFormatter_INTERFACE_DEFINED__

EXTERN_C const IID IID_ICustomFormatter;

typedef struct ICustomFormatterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ICustomFormatter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ICustomFormatter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ICustomFormatter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ICustomFormatter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ICustomFormatter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ICustomFormatter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ICustomFormatter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *format )( 
        ICustomFormatter * This,
         BSTR format,
         VARIANT arg,
         IFormatProvider *formatProvider,
         BSTR *pRetVal);

    END_INTERFACE
} ICustomFormatterVtbl;

interface ICustomFormatter
{
    CONST_VTBL struct ICustomFormatterVtbl *lpVtbl;
};

#endif 	

#ifndef __IFormatProvider_INTERFACE_DEFINED__
#define __IFormatProvider_INTERFACE_DEFINED__

EXTERN_C const IID IID_IFormatProvider;

typedef struct IFormatProviderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IFormatProvider * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IFormatProvider * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IFormatProvider * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IFormatProvider * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IFormatProvider * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IFormatProvider * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IFormatProvider * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetFormat )( 
        IFormatProvider * This,
         _Type *formatType,
         VARIANT *pRetVal);

    END_INTERFACE
} IFormatProviderVtbl;

interface IFormatProvider
{
    CONST_VTBL struct IFormatProviderVtbl *lpVtbl;
};

#endif 	

#ifndef __ICustomAttributeProvider_INTERFACE_DEFINED__
#define __ICustomAttributeProvider_INTERFACE_DEFINED__

EXTERN_C const IID IID_ICustomAttributeProvider;

typedef struct ICustomAttributeProviderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ICustomAttributeProvider * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ICustomAttributeProvider * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ICustomAttributeProvider * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ICustomAttributeProvider * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ICustomAttributeProvider * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ICustomAttributeProvider * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ICustomAttributeProvider * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetCustomAttributes )( 
        ICustomAttributeProvider * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetCustomAttributes_2 )( 
        ICustomAttributeProvider * This,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *IsDefined )( 
        ICustomAttributeProvider * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} ICustomAttributeProviderVtbl;

interface ICustomAttributeProvider
{
    CONST_VTBL struct ICustomAttributeProviderVtbl *lpVtbl;
};

#endif 	

#ifndef ___MemberInfo_INTERFACE_DEFINED__
#define ___MemberInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__MemberInfo;

typedef struct _MemberInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MemberInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MemberInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MemberInfo * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _MemberInfo * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _MemberInfo * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _MemberInfo * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _MemberInfo * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

     HRESULT ( __stdcall *get_ToString )( 
        _MemberInfo * This,
         BSTR *pRetVal);

    HRESULT ( __stdcall *Equals )( 
        _MemberInfo * This,
         VARIANT other,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetHashCode )( 
        _MemberInfo * This,
         long *pRetVal);

    HRESULT ( __stdcall *GetType )( 
        _MemberInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_MemberType )( 
        _MemberInfo * This,
         MemberTypes *pRetVal);

     HRESULT ( __stdcall *get_name )( 
        _MemberInfo * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_DeclaringType )( 
        _MemberInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_ReflectedType )( 
        _MemberInfo * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes )( 
        _MemberInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes_2 )( 
        _MemberInfo * This,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *IsDefined )( 
        _MemberInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} _MemberInfoVtbl;

interface _MemberInfo
{
    CONST_VTBL struct _MemberInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___Type_INTERFACE_DEFINED__
#define ___Type_INTERFACE_DEFINED__

EXTERN_C const IID IID__Type;

typedef struct _TypeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Type * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Type * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Type * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _Type * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _Type * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _Type * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _Type * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

     HRESULT ( __stdcall *get_ToString )( 
        _Type * This,
         BSTR *pRetVal);

    HRESULT ( __stdcall *Equals )( 
        _Type * This,
         VARIANT other,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetHashCode )( 
        _Type * This,
         long *pRetVal);

    HRESULT ( __stdcall *GetType )( 
        _Type * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_MemberType )( 
        _Type * This,
         MemberTypes *pRetVal);

     HRESULT ( __stdcall *get_name )( 
        _Type * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_DeclaringType )( 
        _Type * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_ReflectedType )( 
        _Type * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes )( 
        _Type * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes_2 )( 
        _Type * This,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *IsDefined )( 
        _Type * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_Guid )( 
        _Type * This,
         Guid *pRetVal);

     HRESULT ( __stdcall *get_Module )( 
        _Type * This,
         _Module **pRetVal);

     HRESULT ( __stdcall *get_Assembly )( 
        _Type * This,
         _Assembly **pRetVal);

     HRESULT ( __stdcall *get_TypeHandle )( 
        _Type * This,
         RuntimeTypeHandle *pRetVal);

     HRESULT ( __stdcall *get_FullName )( 
        _Type * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_Namespace )( 
        _Type * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_AssemblyQualifiedName )( 
        _Type * This,
         BSTR *pRetVal);

    HRESULT ( __stdcall *GetArrayRank )( 
        _Type * This,
         long *pRetVal);

     HRESULT ( __stdcall *get_BaseType )( 
        _Type * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetConstructors )( 
        _Type * This,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetInterface )( 
        _Type * This,
         BSTR name,
         VARIANT_BOOL ignoreCase,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetInterfaces )( 
        _Type * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *FindInterfaces )( 
        _Type * This,
         _TypeFilter *filter,
         VARIANT filterCriteria,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetEvent )( 
        _Type * This,
         BSTR name,
         BindingFlags bindingAttr,
         _EventInfo **pRetVal);

    HRESULT ( __stdcall *GetEvents )( 
        _Type * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetEvents_2 )( 
        _Type * This,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetNestedTypes )( 
        _Type * This,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetNestedType )( 
        _Type * This,
         BSTR name,
         BindingFlags bindingAttr,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetMember )( 
        _Type * This,
         BSTR name,
         MemberTypes Type,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetDefaultMembers )( 
        _Type * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *FindMembers )( 
        _Type * This,
         MemberTypes MemberType,
         BindingFlags bindingAttr,
         _MemberFilter *filter,
         VARIANT filterCriteria,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetElementType )( 
        _Type * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *IsSubclassOf )( 
        _Type * This,
         _Type *c,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *IsInstanceOfType )( 
        _Type * This,
         VARIANT o,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *IsAssignableFrom )( 
        _Type * This,
         _Type *c,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetInterfaceMap )( 
        _Type * This,
         _Type *interfaceType,
         InterfaceMapping *pRetVal);

    HRESULT ( __stdcall *GetMethod )( 
        _Type * This,
         BSTR name,
         BindingFlags bindingAttr,
         _Binder *Binder,
         SAFEARRAY * types,
         SAFEARRAY * modifiers,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetMethod_2 )( 
        _Type * This,
         BSTR name,
         BindingFlags bindingAttr,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetMethods )( 
        _Type * This,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetField )( 
        _Type * This,
         BSTR name,
         BindingFlags bindingAttr,
         _FieldInfo **pRetVal);

    HRESULT ( __stdcall *GetFields )( 
        _Type * This,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetProperty )( 
        _Type * This,
         BSTR name,
         BindingFlags bindingAttr,
         _PropertyInfo **pRetVal);

    HRESULT ( __stdcall *GetProperty_2 )( 
        _Type * This,
         BSTR name,
         BindingFlags bindingAttr,
         _Binder *Binder,
         _Type *returnType,
         SAFEARRAY * types,
         SAFEARRAY * modifiers,
         _PropertyInfo **pRetVal);

    HRESULT ( __stdcall *GetProperties )( 
        _Type * This,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetMember_2 )( 
        _Type * This,
         BSTR name,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetMembers )( 
        _Type * This,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *InvokeMember )( 
        _Type * This,
         BSTR name,
         BindingFlags invokeAttr,
         _Binder *Binder,
         VARIANT Target,
         SAFEARRAY * args,
         SAFEARRAY * modifiers,
         _CultureInfo *culture,
         SAFEARRAY * namedParameters,
         VARIANT *pRetVal);

     HRESULT ( __stdcall *get_UnderlyingSystemType )( 
        _Type * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *InvokeMember_2 )( 
        _Type * This,
         BSTR name,
         BindingFlags invokeAttr,
         _Binder *Binder,
         VARIANT Target,
         SAFEARRAY * args,
         _CultureInfo *culture,
         VARIANT *pRetVal);

    HRESULT ( __stdcall *InvokeMember_3 )( 
        _Type * This,
         BSTR name,
         BindingFlags invokeAttr,
         _Binder *Binder,
         VARIANT Target,
         SAFEARRAY * args,
         VARIANT *pRetVal);

    HRESULT ( __stdcall *GetConstructor )( 
        _Type * This,
         BindingFlags bindingAttr,
         _Binder *Binder,
         CallingConventions callConvention,
         SAFEARRAY * types,
         SAFEARRAY * modifiers,
         _ConstructorInfo **pRetVal);

    HRESULT ( __stdcall *GetConstructor_2 )( 
        _Type * This,
         BindingFlags bindingAttr,
         _Binder *Binder,
         SAFEARRAY * types,
         SAFEARRAY * modifiers,
         _ConstructorInfo **pRetVal);

    HRESULT ( __stdcall *GetConstructor_3 )( 
        _Type * This,
         SAFEARRAY * types,
         _ConstructorInfo **pRetVal);

    HRESULT ( __stdcall *GetConstructors_2 )( 
        _Type * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( __stdcall *get_TypeInitializer )( 
        _Type * This,
         _ConstructorInfo **pRetVal);

    HRESULT ( __stdcall *GetMethod_3 )( 
        _Type * This,
         BSTR name,
         BindingFlags bindingAttr,
         _Binder *Binder,
         CallingConventions callConvention,
         SAFEARRAY * types,
         SAFEARRAY * modifiers,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetMethod_4 )( 
        _Type * This,
         BSTR name,
         SAFEARRAY * types,
         SAFEARRAY * modifiers,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetMethod_5 )( 
        _Type * This,
         BSTR name,
         SAFEARRAY * types,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetMethod_6 )( 
        _Type * This,
         BSTR name,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetMethods_2 )( 
        _Type * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetField_2 )( 
        _Type * This,
         BSTR name,
         _FieldInfo **pRetVal);

    HRESULT ( __stdcall *GetFields_2 )( 
        _Type * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetInterface_2 )( 
        _Type * This,
         BSTR name,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetEvent_2 )( 
        _Type * This,
         BSTR name,
         _EventInfo **pRetVal);

    HRESULT ( __stdcall *GetProperty_3 )( 
        _Type * This,
         BSTR name,
         _Type *returnType,
         SAFEARRAY * types,
         SAFEARRAY * modifiers,
         _PropertyInfo **pRetVal);

    HRESULT ( __stdcall *GetProperty_4 )( 
        _Type * This,
         BSTR name,
         _Type *returnType,
         SAFEARRAY * types,
         _PropertyInfo **pRetVal);

    HRESULT ( __stdcall *GetProperty_5 )( 
        _Type * This,
         BSTR name,
         SAFEARRAY * types,
         _PropertyInfo **pRetVal);

    HRESULT ( __stdcall *GetProperty_6 )( 
        _Type * This,
         BSTR name,
         _Type *returnType,
         _PropertyInfo **pRetVal);

    HRESULT ( __stdcall *GetProperty_7 )( 
        _Type * This,
         BSTR name,
         _PropertyInfo **pRetVal);

    HRESULT ( __stdcall *GetProperties_2 )( 
        _Type * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetNestedTypes_2 )( 
        _Type * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetNestedType_2 )( 
        _Type * This,
         BSTR name,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetMember_3 )( 
        _Type * This,
         BSTR name,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetMembers_2 )( 
        _Type * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( __stdcall *get_Attributes )( 
        _Type * This,
         TypeAttributes *pRetVal);

     HRESULT ( __stdcall *get_IsNotPublic )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsPublic )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsNestedPublic )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsNestedPrivate )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsNestedFamily )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsNestedAssembly )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsNestedFamANDAssem )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsNestedFamORAssem )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsAutoLayout )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsLayoutSequential )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsExplicitLayout )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsClass )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsInterface )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsValueType )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsAbstract )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsSealed )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsEnum )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsSpecialName )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsImport )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsSerializable )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsAnsiClass )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsUnicodeClass )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsAutoClass )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsArray )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsByRef )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsPointer )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsPrimitive )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsCOMObject )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_HasElementType )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsContextful )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsMarshalByRef )( 
        _Type * This,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *Equals_2 )( 
        _Type * This,
         _Type *o,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} _TypeVtbl;

interface _Type
{
    CONST_VTBL struct _TypeVtbl *lpVtbl;
};

#endif 	

#ifndef __IReflect_INTERFACE_DEFINED__
#define __IReflect_INTERFACE_DEFINED__

EXTERN_C const IID IID_IReflect;

typedef struct IReflectVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IReflect * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IReflect * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IReflect * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IReflect * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IReflect * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IReflect * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IReflect * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetMethod )( 
        IReflect * This,
         BSTR name,
         BindingFlags bindingAttr,
         _Binder *Binder,
         SAFEARRAY * types,
         SAFEARRAY * modifiers,
         _MethodInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetMethod_2 )( 
        IReflect * This,
         BSTR name,
         BindingFlags bindingAttr,
         _MethodInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetMethods )( 
        IReflect * This,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetField )( 
        IReflect * This,
         BSTR name,
         BindingFlags bindingAttr,
         _FieldInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetFields )( 
        IReflect * This,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
        IReflect * This,
         BSTR name,
         BindingFlags bindingAttr,
         _PropertyInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetProperty_2 )( 
        IReflect * This,
         BSTR name,
         BindingFlags bindingAttr,
         _Binder *Binder,
         _Type *returnType,
         SAFEARRAY * types,
         SAFEARRAY * modifiers,
         _PropertyInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetProperties )( 
        IReflect * This,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetMember )( 
        IReflect * This,
         BSTR name,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetMembers )( 
        IReflect * This,
         BindingFlags bindingAttr,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *InvokeMember )( 
        IReflect * This,
         BSTR name,
         BindingFlags invokeAttr,
         _Binder *Binder,
         VARIANT Target,
         SAFEARRAY * args,
         SAFEARRAY * modifiers,
         _CultureInfo *culture,
         SAFEARRAY * namedParameters,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_UnderlyingSystemType )( 
        IReflect * This,
         _Type **pRetVal);

    END_INTERFACE
} IReflectVtbl;

interface IReflect
{
    CONST_VTBL struct IReflectVtbl *lpVtbl;
};

#endif 	

#ifndef __IObjectHandle_INTERFACE_DEFINED__
#define __IObjectHandle_INTERFACE_DEFINED__

EXTERN_C const IID IID_IObjectHandle;

typedef struct IObjectHandleVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IObjectHandle * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IObjectHandle * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IObjectHandle * This);

    HRESULT ( __stdcall *Unwrap )( 
        IObjectHandle * This,
         VARIANT *pRetVal);

    END_INTERFACE
} IObjectHandleVtbl;

interface IObjectHandle
{
    CONST_VTBL struct IObjectHandleVtbl *lpVtbl;
};

#endif 	

#ifndef __IHashCodeProvider_INTERFACE_DEFINED__
#define __IHashCodeProvider_INTERFACE_DEFINED__

EXTERN_C const IID IID_IHashCodeProvider;

typedef struct IHashCodeProviderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IHashCodeProvider * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IHashCodeProvider * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IHashCodeProvider * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IHashCodeProvider * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IHashCodeProvider * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IHashCodeProvider * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IHashCodeProvider * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetHashCode )( 
        IHashCodeProvider * This,
         VARIANT obj,
         long *pRetVal);

    END_INTERFACE
} IHashCodeProviderVtbl;

interface IHashCodeProvider
{
    CONST_VTBL struct IHashCodeProviderVtbl *lpVtbl;
};

#endif 	

#ifndef __IDictionary_INTERFACE_DEFINED__
#define __IDictionary_INTERFACE_DEFINED__

EXTERN_C const IID IID_IDictionary;

typedef struct IDictionaryVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IDictionary * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IDictionary * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IDictionary * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IDictionary * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IDictionary * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IDictionary * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IDictionary * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Item )( 
        IDictionary * This,
         VARIANT key,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *putref_Item )( 
        IDictionary * This,
         VARIANT key,
         VARIANT pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Keys )( 
        IDictionary * This,
         ICollection **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Values )( 
        IDictionary * This,
         ICollection **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Contains )( 
        IDictionary * This,
         VARIANT key,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Add )( 
        IDictionary * This,
         VARIANT key,
         VARIANT value);

     HRESULT ( STDMETHODCALLTYPE *Clear )( 
        IDictionary * This);

     HRESULT ( STDMETHODCALLTYPE *get_IsReadOnly )( 
        IDictionary * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_IsFixedSize )( 
        IDictionary * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
        IDictionary * This,
         IDictionaryEnumerator **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Remove )( 
        IDictionary * This,
         VARIANT key);

    END_INTERFACE
} IDictionaryVtbl;

interface IDictionary
{
    CONST_VTBL struct IDictionaryVtbl *lpVtbl;
};

#endif 	

#ifndef __IDictionaryEnumerator_INTERFACE_DEFINED__
#define __IDictionaryEnumerator_INTERFACE_DEFINED__

EXTERN_C const IID IID_IDictionaryEnumerator;

typedef struct IDictionaryEnumeratorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IDictionaryEnumerator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IDictionaryEnumerator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IDictionaryEnumerator * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IDictionaryEnumerator * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IDictionaryEnumerator * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IDictionaryEnumerator * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IDictionaryEnumerator * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_key )( 
        IDictionaryEnumerator * This,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_value )( 
        IDictionaryEnumerator * This,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Entry )( 
        IDictionaryEnumerator * This,
         DictionaryEntry *pRetVal);

    END_INTERFACE
} IDictionaryEnumeratorVtbl;

interface IDictionaryEnumerator
{
    CONST_VTBL struct IDictionaryEnumeratorVtbl *lpVtbl;
};

#endif 	

#ifndef __IDeserializationCallback_INTERFACE_DEFINED__
#define __IDeserializationCallback_INTERFACE_DEFINED__

EXTERN_C const IID IID_IDeserializationCallback;

typedef struct IDeserializationCallbackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IDeserializationCallback * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IDeserializationCallback * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IDeserializationCallback * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IDeserializationCallback * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IDeserializationCallback * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IDeserializationCallback * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IDeserializationCallback * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *OnDeserialization )( 
        IDeserializationCallback * This,
         VARIANT sender);

    END_INTERFACE
} IDeserializationCallbackVtbl;

interface IDeserializationCallback
{
    CONST_VTBL struct IDeserializationCallbackVtbl *lpVtbl;
};

#endif 	

#ifndef __ISymbolBinder_INTERFACE_DEFINED__
#define __ISymbolBinder_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISymbolBinder;

typedef struct ISymbolBinderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISymbolBinder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISymbolBinder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISymbolBinder * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISymbolBinder * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISymbolBinder * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISymbolBinder * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISymbolBinder * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetReader )( 
        ISymbolBinder * This,
         long importer,
         BSTR filename,
         BSTR searchPath,
         ISymbolReader **pRetVal);

    END_INTERFACE
} ISymbolBinderVtbl;

interface ISymbolBinder
{
    CONST_VTBL struct ISymbolBinderVtbl *lpVtbl;
};

#endif 	

#ifndef __ISymbolBinder1_INTERFACE_DEFINED__
#define __ISymbolBinder1_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISymbolBinder1;

typedef struct ISymbolBinder1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISymbolBinder1 * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISymbolBinder1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISymbolBinder1 * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISymbolBinder1 * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISymbolBinder1 * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISymbolBinder1 * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISymbolBinder1 * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetReader )( 
        ISymbolBinder1 * This,
         Int64 importer,
         BSTR filename,
         BSTR searchPath,
         ISymbolReader **pRetVal);

    END_INTERFACE
} ISymbolBinder1Vtbl;

interface ISymbolBinder1
{
    CONST_VTBL struct ISymbolBinder1Vtbl *lpVtbl;
};

#endif 	

#ifndef __ISymbolDocument_INTERFACE_DEFINED__
#define __ISymbolDocument_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISymbolDocument;

typedef struct ISymbolDocumentVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISymbolDocument * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISymbolDocument * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISymbolDocument * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISymbolDocument * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISymbolDocument * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISymbolDocument * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISymbolDocument * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Url )( 
        ISymbolDocument * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_DocumentType )( 
        ISymbolDocument * This,
         Guid *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Language )( 
        ISymbolDocument * This,
         Guid *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_LanguageVendor )( 
        ISymbolDocument * This,
         Guid *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_CheckSumAlgorithmId )( 
        ISymbolDocument * This,
         Guid *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetCheckSum )( 
        ISymbolDocument * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *FindClosestLine )( 
        ISymbolDocument * This,
         long line,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_HasEmbeddedSource )( 
        ISymbolDocument * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_SourceLength )( 
        ISymbolDocument * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetSourceRange )( 
        ISymbolDocument * This,
         long startLine,
         long startColumn,
         long endLine,
         long endColumn,
         SAFEARRAY * *pRetVal);

    END_INTERFACE
} ISymbolDocumentVtbl;

interface ISymbolDocument
{
    CONST_VTBL struct ISymbolDocumentVtbl *lpVtbl;
};

#endif 	

#ifndef __ISymbolDocumentWriter_INTERFACE_DEFINED__
#define __ISymbolDocumentWriter_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISymbolDocumentWriter;

typedef struct ISymbolDocumentWriterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISymbolDocumentWriter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISymbolDocumentWriter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISymbolDocumentWriter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISymbolDocumentWriter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISymbolDocumentWriter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISymbolDocumentWriter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISymbolDocumentWriter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *SetSource )( 
        ISymbolDocumentWriter * This,
         SAFEARRAY * Source);

     HRESULT ( STDMETHODCALLTYPE *SetCheckSum )( 
        ISymbolDocumentWriter * This,
         Guid algorithmId,
         SAFEARRAY * checkSum);

    END_INTERFACE
} ISymbolDocumentWriterVtbl;

interface ISymbolDocumentWriter
{
    CONST_VTBL struct ISymbolDocumentWriterVtbl *lpVtbl;
};

#endif 	

#ifndef __ISymbolMethod_INTERFACE_DEFINED__
#define __ISymbolMethod_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISymbolMethod;

typedef struct ISymbolMethodVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISymbolMethod * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISymbolMethod * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISymbolMethod * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISymbolMethod * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISymbolMethod * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISymbolMethod * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISymbolMethod * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Token )( 
        ISymbolMethod * This,
         SymbolToken *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_SequencePointCount )( 
        ISymbolMethod * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetSequencePoints )( 
        ISymbolMethod * This,
         SAFEARRAY * offsets,
         SAFEARRAY * documents,
         SAFEARRAY * lines,
         SAFEARRAY * columns,
         SAFEARRAY * endLines,
         SAFEARRAY * endColumns);

     HRESULT ( STDMETHODCALLTYPE *get_RootScope )( 
        ISymbolMethod * This,
         ISymbolScope **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetScope )( 
        ISymbolMethod * This,
         long offset,
         ISymbolScope **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetOffset )( 
        ISymbolMethod * This,
         ISymbolDocument *document,
         long line,
         long column,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetRanges )( 
        ISymbolMethod * This,
         ISymbolDocument *document,
         long line,
         long column,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetParameters )( 
        ISymbolMethod * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetNamespace )( 
        ISymbolMethod * This,
         ISymbolNamespace **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetSourceStartEnd )( 
        ISymbolMethod * This,
         SAFEARRAY * docs,
         SAFEARRAY * lines,
         SAFEARRAY * columns,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} ISymbolMethodVtbl;

interface ISymbolMethod
{
    CONST_VTBL struct ISymbolMethodVtbl *lpVtbl;
};

#endif 	

#ifndef __ISymbolNamespace_INTERFACE_DEFINED__
#define __ISymbolNamespace_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISymbolNamespace;

typedef struct ISymbolNamespaceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISymbolNamespace * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISymbolNamespace * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISymbolNamespace * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISymbolNamespace * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISymbolNamespace * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISymbolNamespace * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISymbolNamespace * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_name )( 
        ISymbolNamespace * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetNamespaces )( 
        ISymbolNamespace * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetVariables )( 
        ISymbolNamespace * This,
         SAFEARRAY * *pRetVal);

    END_INTERFACE
} ISymbolNamespaceVtbl;

interface ISymbolNamespace
{
    CONST_VTBL struct ISymbolNamespaceVtbl *lpVtbl;
};

#endif 	

#ifndef __ISymbolReader_INTERFACE_DEFINED__
#define __ISymbolReader_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISymbolReader;

typedef struct ISymbolReaderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISymbolReader * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISymbolReader * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISymbolReader * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISymbolReader * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISymbolReader * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISymbolReader * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISymbolReader * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetDocument )( 
        ISymbolReader * This,
         BSTR Url,
         Guid Language,
         Guid LanguageVendor,
         Guid DocumentType,
         ISymbolDocument **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetDocuments )( 
        ISymbolReader * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_UserEntryPoint )( 
        ISymbolReader * This,
         SymbolToken *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetMethod )( 
        ISymbolReader * This,
         SymbolToken Method,
         ISymbolMethod **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetMethod_2 )( 
        ISymbolReader * This,
         SymbolToken Method,
         long Version,
         ISymbolMethod **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetVariables )( 
        ISymbolReader * This,
         SymbolToken parent,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetGlobalVariables )( 
        ISymbolReader * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetMethodFromDocumentPosition )( 
        ISymbolReader * This,
         ISymbolDocument *document,
         long line,
         long column,
         ISymbolMethod **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetSymAttribute )( 
        ISymbolReader * This,
         SymbolToken parent,
         BSTR name,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetNamespaces )( 
        ISymbolReader * This,
         SAFEARRAY * *pRetVal);

    END_INTERFACE
} ISymbolReaderVtbl;

interface ISymbolReader
{
    CONST_VTBL struct ISymbolReaderVtbl *lpVtbl;
};

#endif 	

#ifndef __ISymbolScope_INTERFACE_DEFINED__
#define __ISymbolScope_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISymbolScope;

typedef struct ISymbolScopeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISymbolScope * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISymbolScope * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISymbolScope * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISymbolScope * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISymbolScope * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISymbolScope * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISymbolScope * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Method )( 
        ISymbolScope * This,
         ISymbolMethod **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_parent )( 
        ISymbolScope * This,
         ISymbolScope **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetChildren )( 
        ISymbolScope * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_StartOffset )( 
        ISymbolScope * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_EndOffset )( 
        ISymbolScope * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetLocals )( 
        ISymbolScope * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetNamespaces )( 
        ISymbolScope * This,
         SAFEARRAY * *pRetVal);

    END_INTERFACE
} ISymbolScopeVtbl;

interface ISymbolScope
{
    CONST_VTBL struct ISymbolScopeVtbl *lpVtbl;
};

#endif 	

#ifndef __ISymbolVariable_INTERFACE_DEFINED__
#define __ISymbolVariable_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISymbolVariable;

typedef struct ISymbolVariableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISymbolVariable * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISymbolVariable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISymbolVariable * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISymbolVariable * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISymbolVariable * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISymbolVariable * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISymbolVariable * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_name )( 
        ISymbolVariable * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
        ISymbolVariable * This,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetSignature )( 
        ISymbolVariable * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_AddressKind )( 
        ISymbolVariable * This,
         SymAddressKind *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_AddressField1 )( 
        ISymbolVariable * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_AddressField2 )( 
        ISymbolVariable * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_AddressField3 )( 
        ISymbolVariable * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_StartOffset )( 
        ISymbolVariable * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_EndOffset )( 
        ISymbolVariable * This,
         long *pRetVal);

    END_INTERFACE
} ISymbolVariableVtbl;

interface ISymbolVariable
{
    CONST_VTBL struct ISymbolVariableVtbl *lpVtbl;
};

#endif 	

#ifndef __ISymbolWriter_INTERFACE_DEFINED__
#define __ISymbolWriter_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISymbolWriter;

typedef struct ISymbolWriterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISymbolWriter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISymbolWriter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISymbolWriter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISymbolWriter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISymbolWriter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISymbolWriter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISymbolWriter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Initialize )( 
        ISymbolWriter * This,
         Int64 emitter,
         BSTR filename,
         VARIANT_BOOL fFullBuild);

     HRESULT ( STDMETHODCALLTYPE *DefineDocument )( 
        ISymbolWriter * This,
         BSTR Url,
         Guid Language,
         Guid LanguageVendor,
         Guid DocumentType,
         ISymbolDocumentWriter **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *SetUserEntryPoint )( 
        ISymbolWriter * This,
         SymbolToken entryMethod);

     HRESULT ( STDMETHODCALLTYPE *OpenMethod )( 
        ISymbolWriter * This,
         SymbolToken Method);

     HRESULT ( STDMETHODCALLTYPE *CloseMethod )( 
        ISymbolWriter * This);

     HRESULT ( STDMETHODCALLTYPE *DefineSequencePoints )( 
        ISymbolWriter * This,
         ISymbolDocumentWriter *document,
         SAFEARRAY * offsets,
         SAFEARRAY * lines,
         SAFEARRAY * columns,
         SAFEARRAY * endLines,
         SAFEARRAY * endColumns);

     HRESULT ( STDMETHODCALLTYPE *OpenScope )( 
        ISymbolWriter * This,
         long StartOffset,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *CloseScope )( 
        ISymbolWriter * This,
         long EndOffset);

     HRESULT ( STDMETHODCALLTYPE *SetScopeRange )( 
        ISymbolWriter * This,
         long scopeID,
         long StartOffset,
         long EndOffset);

     HRESULT ( STDMETHODCALLTYPE *DefineLocalVariable )( 
        ISymbolWriter * This,
         BSTR name,
         FieldAttributes Attributes,
         SAFEARRAY * signature,
         SymAddressKind addrKind,
         long addr1,
         long addr2,
         long addr3,
         long StartOffset,
         long EndOffset);

     HRESULT ( STDMETHODCALLTYPE *DefineParameter )( 
        ISymbolWriter * This,
         BSTR name,
         ParameterAttributes Attributes,
         long sequence,
         SymAddressKind addrKind,
         long addr1,
         long addr2,
         long addr3);

     HRESULT ( STDMETHODCALLTYPE *DefineField )( 
        ISymbolWriter * This,
         SymbolToken parent,
         BSTR name,
         FieldAttributes Attributes,
         SAFEARRAY * signature,
         SymAddressKind addrKind,
         long addr1,
         long addr2,
         long addr3);

     HRESULT ( STDMETHODCALLTYPE *DefineGlobalVariable )( 
        ISymbolWriter * This,
         BSTR name,
         FieldAttributes Attributes,
         SAFEARRAY * signature,
         SymAddressKind addrKind,
         long addr1,
         long addr2,
         long addr3);

     HRESULT ( STDMETHODCALLTYPE *Close )( 
        ISymbolWriter * This);

     HRESULT ( STDMETHODCALLTYPE *SetSymAttribute )( 
        ISymbolWriter * This,
         SymbolToken parent,
         BSTR name,
         SAFEARRAY * data);

     HRESULT ( STDMETHODCALLTYPE *OpenNamespace )( 
        ISymbolWriter * This,
         BSTR name);

     HRESULT ( STDMETHODCALLTYPE *CloseNamespace )( 
        ISymbolWriter * This);

     HRESULT ( STDMETHODCALLTYPE *UsingNamespace )( 
        ISymbolWriter * This,
         BSTR FullName);

     HRESULT ( STDMETHODCALLTYPE *SetMethodSourceRange )( 
        ISymbolWriter * This,
         ISymbolDocumentWriter *startDoc,
         long startLine,
         long startColumn,
         ISymbolDocumentWriter *endDoc,
         long endLine,
         long endColumn);

     HRESULT ( STDMETHODCALLTYPE *SetUnderlyingWriter )( 
        ISymbolWriter * This,
         Int64 underlyingWriter);

    END_INTERFACE
} ISymbolWriterVtbl;

interface ISymbolWriter
{
    CONST_VTBL struct ISymbolWriterVtbl *lpVtbl;
};

#endif 	

#ifndef ___Assembly_INTERFACE_DEFINED__
#define ___Assembly_INTERFACE_DEFINED__

EXTERN_C const IID IID__Assembly;

typedef struct _AssemblyVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Assembly * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Assembly * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Assembly * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Assembly * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Assembly * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Assembly * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Assembly * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ToString )( 
        _Assembly * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Equals )( 
        _Assembly * This,
         VARIANT other,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetHashCode )( 
        _Assembly * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetType )( 
        _Assembly * This,
         _Type **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_CodeBase )( 
        _Assembly * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_EscapedCodeBase )( 
        _Assembly * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetName )( 
        _Assembly * This,
         _AssemblyName **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetName_2 )( 
        _Assembly * This,
         VARIANT_BOOL copiedName,
         _AssemblyName **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
        _Assembly * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_EntryPoint )( 
        _Assembly * This,
         _MethodInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetType_2 )( 
        _Assembly * This,
         BSTR name,
         _Type **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetType_3 )( 
        _Assembly * This,
         BSTR name,
         VARIANT_BOOL throwOnError,
         _Type **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetExportedTypes )( 
        _Assembly * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetTypes )( 
        _Assembly * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetManifestResourceStream )( 
        _Assembly * This,
         _Type *Type,
         BSTR name,
         _Stream **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetManifestResourceStream_2 )( 
        _Assembly * This,
         BSTR name,
         _Stream **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetFile )( 
        _Assembly * This,
         BSTR name,
         _FileStream **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetFiles )( 
        _Assembly * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetFiles_2 )( 
        _Assembly * This,
         VARIANT_BOOL getResourceModules,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetManifestResourceNames )( 
        _Assembly * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetManifestResourceInfo )( 
        _Assembly * This,
         BSTR resourceName,
         _ManifestResourceInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Location )( 
        _Assembly * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Evidence )( 
        _Assembly * This,
         _Evidence **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetCustomAttributes )( 
        _Assembly * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetCustomAttributes_2 )( 
        _Assembly * This,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *IsDefined )( 
        _Assembly * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetObjectData )( 
        _Assembly * This,
         _SerializationInfo *info,
         StreamingContext Context);

     HRESULT ( STDMETHODCALLTYPE *add_ModuleResolve )( 
        _Assembly * This,
         _ModuleResolveEventHandler *value);

     HRESULT ( STDMETHODCALLTYPE *remove_ModuleResolve )( 
        _Assembly * This,
         _ModuleResolveEventHandler *value);

     HRESULT ( STDMETHODCALLTYPE *GetType_4 )( 
        _Assembly * This,
         BSTR name,
         VARIANT_BOOL throwOnError,
         VARIANT_BOOL ignoreCase,
         _Type **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetSatelliteAssembly )( 
        _Assembly * This,
         _CultureInfo *culture,
         _Assembly **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetSatelliteAssembly_2 )( 
        _Assembly * This,
         _CultureInfo *culture,
         _Version *Version,
         _Assembly **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *LoadModule )( 
        _Assembly * This,
         BSTR moduleName,
         SAFEARRAY * rawModule,
         _Module **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *LoadModule_2 )( 
        _Assembly * This,
         BSTR moduleName,
         SAFEARRAY * rawModule,
         SAFEARRAY * rawSymbolStore,
         _Module **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
        _Assembly * This,
         BSTR typeName,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *CreateInstance_2 )( 
        _Assembly * This,
         BSTR typeName,
         VARIANT_BOOL ignoreCase,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *CreateInstance_3 )( 
        _Assembly * This,
         BSTR typeName,
         VARIANT_BOOL ignoreCase,
         BindingFlags bindingAttr,
         _Binder *Binder,
         SAFEARRAY * args,
         _CultureInfo *culture,
         SAFEARRAY * activationAttributes,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetLoadedModules )( 
        _Assembly * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetLoadedModules_2 )( 
        _Assembly * This,
         VARIANT_BOOL getResourceModules,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetModules )( 
        _Assembly * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetModules_2 )( 
        _Assembly * This,
         VARIANT_BOOL getResourceModules,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetModule )( 
        _Assembly * This,
         BSTR name,
         _Module **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetReferencedAssemblies )( 
        _Assembly * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_GlobalAssemblyCache )( 
        _Assembly * This,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} _AssemblyVtbl;

interface _Assembly
{
    CONST_VTBL struct _AssemblyVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyName_INTERFACE_DEFINED__
#define ___AssemblyName_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyName;

typedef struct _AssemblyNameVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyName * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyName * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyName * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _AssemblyName * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _AssemblyName * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _AssemblyName * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _AssemblyName * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _AssemblyNameVtbl;

interface _AssemblyName
{
    CONST_VTBL struct _AssemblyNameVtbl *lpVtbl;
};

#endif 	

#ifndef ___MethodBase_INTERFACE_DEFINED__
#define ___MethodBase_INTERFACE_DEFINED__

EXTERN_C const IID IID__MethodBase;

typedef struct _MethodBaseVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MethodBase * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MethodBase * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MethodBase * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _MethodBase * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _MethodBase * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _MethodBase * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _MethodBase * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

     HRESULT ( __stdcall *get_ToString )( 
        _MethodBase * This,
         BSTR *pRetVal);

    HRESULT ( __stdcall *Equals )( 
        _MethodBase * This,
         VARIANT other,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetHashCode )( 
        _MethodBase * This,
         long *pRetVal);

    HRESULT ( __stdcall *GetType )( 
        _MethodBase * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_MemberType )( 
        _MethodBase * This,
         MemberTypes *pRetVal);

     HRESULT ( __stdcall *get_name )( 
        _MethodBase * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_DeclaringType )( 
        _MethodBase * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_ReflectedType )( 
        _MethodBase * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes )( 
        _MethodBase * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes_2 )( 
        _MethodBase * This,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *IsDefined )( 
        _MethodBase * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetParameters )( 
        _MethodBase * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetMethodImplementationFlags )( 
        _MethodBase * This,
         MethodImplAttributes *pRetVal);

     HRESULT ( __stdcall *get_MethodHandle )( 
        _MethodBase * This,
         RuntimeMethodHandle *pRetVal);

     HRESULT ( __stdcall *get_Attributes )( 
        _MethodBase * This,
         MethodAttributes *pRetVal);

     HRESULT ( __stdcall *get_CallingConvention )( 
        _MethodBase * This,
         CallingConventions *pRetVal);

    HRESULT ( __stdcall *Invoke_2 )( 
        _MethodBase * This,
         VARIANT obj,
         BindingFlags invokeAttr,
         _Binder *Binder,
         SAFEARRAY * parameters,
         _CultureInfo *culture,
         VARIANT *pRetVal);

     HRESULT ( __stdcall *get_IsPublic )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsPrivate )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamily )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsAssembly )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamilyAndAssembly )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamilyOrAssembly )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsStatic )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFinal )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsVirtual )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsHideBySig )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsAbstract )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsSpecialName )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsConstructor )( 
        _MethodBase * This,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *Invoke_3 )( 
        _MethodBase * This,
         VARIANT obj,
         SAFEARRAY * parameters,
         VARIANT *pRetVal);

    END_INTERFACE
} _MethodBaseVtbl;

interface _MethodBase
{
    CONST_VTBL struct _MethodBaseVtbl *lpVtbl;
};

#endif 	

#ifndef ___MethodInfo_INTERFACE_DEFINED__
#define ___MethodInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__MethodInfo;

typedef struct _MethodInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MethodInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MethodInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MethodInfo * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _MethodInfo * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _MethodInfo * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _MethodInfo * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _MethodInfo * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

     HRESULT ( __stdcall *get_ToString )( 
        _MethodInfo * This,
         BSTR *pRetVal);

    HRESULT ( __stdcall *Equals )( 
        _MethodInfo * This,
         VARIANT other,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetHashCode )( 
        _MethodInfo * This,
         long *pRetVal);

    HRESULT ( __stdcall *GetType )( 
        _MethodInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_MemberType )( 
        _MethodInfo * This,
         MemberTypes *pRetVal);

     HRESULT ( __stdcall *get_name )( 
        _MethodInfo * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_DeclaringType )( 
        _MethodInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_ReflectedType )( 
        _MethodInfo * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes )( 
        _MethodInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes_2 )( 
        _MethodInfo * This,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *IsDefined )( 
        _MethodInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetParameters )( 
        _MethodInfo * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetMethodImplementationFlags )( 
        _MethodInfo * This,
         MethodImplAttributes *pRetVal);

     HRESULT ( __stdcall *get_MethodHandle )( 
        _MethodInfo * This,
         RuntimeMethodHandle *pRetVal);

     HRESULT ( __stdcall *get_Attributes )( 
        _MethodInfo * This,
         MethodAttributes *pRetVal);

     HRESULT ( __stdcall *get_CallingConvention )( 
        _MethodInfo * This,
         CallingConventions *pRetVal);

    HRESULT ( __stdcall *Invoke_2 )( 
        _MethodInfo * This,
         VARIANT obj,
         BindingFlags invokeAttr,
         _Binder *Binder,
         SAFEARRAY * parameters,
         _CultureInfo *culture,
         VARIANT *pRetVal);

     HRESULT ( __stdcall *get_IsPublic )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsPrivate )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamily )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsAssembly )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamilyAndAssembly )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamilyOrAssembly )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsStatic )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFinal )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsVirtual )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsHideBySig )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsAbstract )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsSpecialName )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsConstructor )( 
        _MethodInfo * This,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *Invoke_3 )( 
        _MethodInfo * This,
         VARIANT obj,
         SAFEARRAY * parameters,
         VARIANT *pRetVal);

     HRESULT ( __stdcall *get_returnType )( 
        _MethodInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_ReturnTypeCustomAttributes )( 
        _MethodInfo * This,
         ICustomAttributeProvider **pRetVal);

    HRESULT ( __stdcall *GetBaseDefinition )( 
        _MethodInfo * This,
         _MethodInfo **pRetVal);

    END_INTERFACE
} _MethodInfoVtbl;

interface _MethodInfo
{
    CONST_VTBL struct _MethodInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___ConstructorInfo_INTERFACE_DEFINED__
#define ___ConstructorInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__ConstructorInfo;

typedef struct _ConstructorInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ConstructorInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ConstructorInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ConstructorInfo * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _ConstructorInfo * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _ConstructorInfo * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _ConstructorInfo * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _ConstructorInfo * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

     HRESULT ( __stdcall *get_ToString )( 
        _ConstructorInfo * This,
         BSTR *pRetVal);

    HRESULT ( __stdcall *Equals )( 
        _ConstructorInfo * This,
         VARIANT other,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetHashCode )( 
        _ConstructorInfo * This,
         long *pRetVal);

    HRESULT ( __stdcall *GetType )( 
        _ConstructorInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_MemberType )( 
        _ConstructorInfo * This,
         MemberTypes *pRetVal);

     HRESULT ( __stdcall *get_name )( 
        _ConstructorInfo * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_DeclaringType )( 
        _ConstructorInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_ReflectedType )( 
        _ConstructorInfo * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes )( 
        _ConstructorInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes_2 )( 
        _ConstructorInfo * This,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *IsDefined )( 
        _ConstructorInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetParameters )( 
        _ConstructorInfo * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetMethodImplementationFlags )( 
        _ConstructorInfo * This,
         MethodImplAttributes *pRetVal);

     HRESULT ( __stdcall *get_MethodHandle )( 
        _ConstructorInfo * This,
         RuntimeMethodHandle *pRetVal);

     HRESULT ( __stdcall *get_Attributes )( 
        _ConstructorInfo * This,
         MethodAttributes *pRetVal);

     HRESULT ( __stdcall *get_CallingConvention )( 
        _ConstructorInfo * This,
         CallingConventions *pRetVal);

    HRESULT ( __stdcall *Invoke_2 )( 
        _ConstructorInfo * This,
         VARIANT obj,
         BindingFlags invokeAttr,
         _Binder *Binder,
         SAFEARRAY * parameters,
         _CultureInfo *culture,
         VARIANT *pRetVal);

     HRESULT ( __stdcall *get_IsPublic )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsPrivate )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamily )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsAssembly )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamilyAndAssembly )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamilyOrAssembly )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsStatic )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFinal )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsVirtual )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsHideBySig )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsAbstract )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsSpecialName )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsConstructor )( 
        _ConstructorInfo * This,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *Invoke_3 )( 
        _ConstructorInfo * This,
         VARIANT obj,
         SAFEARRAY * parameters,
         VARIANT *pRetVal);

    HRESULT ( __stdcall *Invoke_4 )( 
        _ConstructorInfo * This,
         BindingFlags invokeAttr,
         _Binder *Binder,
         SAFEARRAY * parameters,
         _CultureInfo *culture,
         VARIANT *pRetVal);

    HRESULT ( __stdcall *Invoke_5 )( 
        _ConstructorInfo * This,
         SAFEARRAY * parameters,
         VARIANT *pRetVal);

    END_INTERFACE
} _ConstructorInfoVtbl;

interface _ConstructorInfo
{
    CONST_VTBL struct _ConstructorInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___FieldInfo_INTERFACE_DEFINED__
#define ___FieldInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__FieldInfo;

typedef struct _FieldInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FieldInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FieldInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FieldInfo * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _FieldInfo * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _FieldInfo * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _FieldInfo * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _FieldInfo * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

     HRESULT ( __stdcall *get_ToString )( 
        _FieldInfo * This,
         BSTR *pRetVal);

    HRESULT ( __stdcall *Equals )( 
        _FieldInfo * This,
         VARIANT other,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetHashCode )( 
        _FieldInfo * This,
         long *pRetVal);

    HRESULT ( __stdcall *GetType )( 
        _FieldInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_MemberType )( 
        _FieldInfo * This,
         MemberTypes *pRetVal);

     HRESULT ( __stdcall *get_name )( 
        _FieldInfo * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_DeclaringType )( 
        _FieldInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_ReflectedType )( 
        _FieldInfo * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes )( 
        _FieldInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes_2 )( 
        _FieldInfo * This,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *IsDefined )( 
        _FieldInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_FieldType )( 
        _FieldInfo * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetValue )( 
        _FieldInfo * This,
         VARIANT obj,
         VARIANT *pRetVal);

    HRESULT ( __stdcall *GetValueDirect )( 
        _FieldInfo * This,
         VARIANT obj,
         VARIANT *pRetVal);

    HRESULT ( __stdcall *SetValue )( 
        _FieldInfo * This,
         VARIANT obj,
         VARIANT value,
         BindingFlags invokeAttr,
         _Binder *Binder,
         _CultureInfo *culture);

    HRESULT ( __stdcall *SetValueDirect )( 
        _FieldInfo * This,
         VARIANT obj,
         VARIANT value);

     HRESULT ( __stdcall *get_FieldHandle )( 
        _FieldInfo * This,
         RuntimeFieldHandle *pRetVal);

     HRESULT ( __stdcall *get_Attributes )( 
        _FieldInfo * This,
         FieldAttributes *pRetVal);

    HRESULT ( __stdcall *SetValue_2 )( 
        _FieldInfo * This,
         VARIANT obj,
         VARIANT value);

     HRESULT ( __stdcall *get_IsPublic )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsPrivate )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamily )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsAssembly )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamilyAndAssembly )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsFamilyOrAssembly )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsStatic )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsInitOnly )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsLiteral )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsNotSerialized )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsSpecialName )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsPinvokeImpl )( 
        _FieldInfo * This,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} _FieldInfoVtbl;

interface _FieldInfo
{
    CONST_VTBL struct _FieldInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___PropertyInfo_INTERFACE_DEFINED__
#define ___PropertyInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__PropertyInfo;

typedef struct _PropertyInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _PropertyInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _PropertyInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _PropertyInfo * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _PropertyInfo * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _PropertyInfo * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _PropertyInfo * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _PropertyInfo * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

     HRESULT ( __stdcall *get_ToString )( 
        _PropertyInfo * This,
         BSTR *pRetVal);

    HRESULT ( __stdcall *Equals )( 
        _PropertyInfo * This,
         VARIANT other,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetHashCode )( 
        _PropertyInfo * This,
         long *pRetVal);

    HRESULT ( __stdcall *GetType )( 
        _PropertyInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_MemberType )( 
        _PropertyInfo * This,
         MemberTypes *pRetVal);

     HRESULT ( __stdcall *get_name )( 
        _PropertyInfo * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_DeclaringType )( 
        _PropertyInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_ReflectedType )( 
        _PropertyInfo * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes )( 
        _PropertyInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes_2 )( 
        _PropertyInfo * This,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *IsDefined )( 
        _PropertyInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_PropertyType )( 
        _PropertyInfo * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetValue )( 
        _PropertyInfo * This,
         VARIANT obj,
         SAFEARRAY * index,
         VARIANT *pRetVal);

    HRESULT ( __stdcall *GetValue_2 )( 
        _PropertyInfo * This,
         VARIANT obj,
         BindingFlags invokeAttr,
         _Binder *Binder,
         SAFEARRAY * index,
         _CultureInfo *culture,
         VARIANT *pRetVal);

    HRESULT ( __stdcall *SetValue )( 
        _PropertyInfo * This,
         VARIANT obj,
         VARIANT value,
         SAFEARRAY * index);

    HRESULT ( __stdcall *SetValue_2 )( 
        _PropertyInfo * This,
         VARIANT obj,
         VARIANT value,
         BindingFlags invokeAttr,
         _Binder *Binder,
         SAFEARRAY * index,
         _CultureInfo *culture);

    HRESULT ( __stdcall *GetAccessors )( 
        _PropertyInfo * This,
         VARIANT_BOOL nonPublic,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetGetMethod )( 
        _PropertyInfo * This,
         VARIANT_BOOL nonPublic,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetSetMethod )( 
        _PropertyInfo * This,
         VARIANT_BOOL nonPublic,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetIndexParameters )( 
        _PropertyInfo * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( __stdcall *get_Attributes )( 
        _PropertyInfo * This,
         PropertyAttributes *pRetVal);

     HRESULT ( __stdcall *get_CanRead )( 
        _PropertyInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_CanWrite )( 
        _PropertyInfo * This,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetAccessors_2 )( 
        _PropertyInfo * This,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetGetMethod_2 )( 
        _PropertyInfo * This,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetSetMethod_2 )( 
        _PropertyInfo * This,
         _MethodInfo **pRetVal);

     HRESULT ( __stdcall *get_IsSpecialName )( 
        _PropertyInfo * This,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} _PropertyInfoVtbl;

interface _PropertyInfo
{
    CONST_VTBL struct _PropertyInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___EventInfo_INTERFACE_DEFINED__
#define ___EventInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__EventInfo;

typedef struct _EventInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _EventInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _EventInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _EventInfo * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _EventInfo * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _EventInfo * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _EventInfo * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _EventInfo * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

     HRESULT ( __stdcall *get_ToString )( 
        _EventInfo * This,
         BSTR *pRetVal);

    HRESULT ( __stdcall *Equals )( 
        _EventInfo * This,
         VARIANT other,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetHashCode )( 
        _EventInfo * This,
         long *pRetVal);

    HRESULT ( __stdcall *GetType )( 
        _EventInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_MemberType )( 
        _EventInfo * This,
         MemberTypes *pRetVal);

     HRESULT ( __stdcall *get_name )( 
        _EventInfo * This,
         BSTR *pRetVal);

     HRESULT ( __stdcall *get_DeclaringType )( 
        _EventInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_ReflectedType )( 
        _EventInfo * This,
         _Type **pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes )( 
        _EventInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *GetCustomAttributes_2 )( 
        _EventInfo * This,
         VARIANT_BOOL inherit,
         SAFEARRAY * *pRetVal);

    HRESULT ( __stdcall *IsDefined )( 
        _EventInfo * This,
         _Type *attributeType,
         VARIANT_BOOL inherit,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *GetAddMethod )( 
        _EventInfo * This,
         VARIANT_BOOL nonPublic,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetRemoveMethod )( 
        _EventInfo * This,
         VARIANT_BOOL nonPublic,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetRaiseMethod )( 
        _EventInfo * This,
         VARIANT_BOOL nonPublic,
         _MethodInfo **pRetVal);

     HRESULT ( __stdcall *get_Attributes )( 
        _EventInfo * This,
         EventAttributes *pRetVal);

    HRESULT ( __stdcall *GetAddMethod_2 )( 
        _EventInfo * This,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetRemoveMethod_2 )( 
        _EventInfo * This,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *GetRaiseMethod_2 )( 
        _EventInfo * This,
         _MethodInfo **pRetVal);

    HRESULT ( __stdcall *AddEventHandler )( 
        _EventInfo * This,
         VARIANT Target,
         _Delegate *handler);

    HRESULT ( __stdcall *RemoveEventHandler )( 
        _EventInfo * This,
         VARIANT Target,
         _Delegate *handler);

     HRESULT ( __stdcall *get_EventHandlerType )( 
        _EventInfo * This,
         _Type **pRetVal);

     HRESULT ( __stdcall *get_IsSpecialName )( 
        _EventInfo * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( __stdcall *get_IsMulticast )( 
        _EventInfo * This,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} _EventInfoVtbl;

interface _EventInfo
{
    CONST_VTBL struct _EventInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___ParameterInfo_INTERFACE_DEFINED__
#define ___ParameterInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__ParameterInfo;

typedef struct _ParameterInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ParameterInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ParameterInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ParameterInfo * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _ParameterInfo * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _ParameterInfo * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _ParameterInfo * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _ParameterInfo * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _ParameterInfoVtbl;

interface _ParameterInfo
{
    CONST_VTBL struct _ParameterInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___Module_INTERFACE_DEFINED__
#define ___Module_INTERFACE_DEFINED__

EXTERN_C const IID IID__Module;

typedef struct _ModuleVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Module * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Module * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Module * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _Module * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _Module * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _Module * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _Module * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _ModuleVtbl;

interface _Module
{
    CONST_VTBL struct _ModuleVtbl *lpVtbl;
};

#endif 	

#ifndef __IFormatter_INTERFACE_DEFINED__
#define __IFormatter_INTERFACE_DEFINED__

EXTERN_C const IID IID_IFormatter;

typedef struct IFormatterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IFormatter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IFormatter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IFormatter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IFormatter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IFormatter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IFormatter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IFormatter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Deserialize )( 
        IFormatter * This,
         _Stream *serializationStream,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Serialize )( 
        IFormatter * This,
         _Stream *serializationStream,
         VARIANT graph);

     HRESULT ( STDMETHODCALLTYPE *get_SurrogateSelector )( 
        IFormatter * This,
         ISurrogateSelector **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *putref_SurrogateSelector )( 
        IFormatter * This,
         ISurrogateSelector *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Binder )( 
        IFormatter * This,
         _SerializationBinder **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *putref_Binder )( 
        IFormatter * This,
         _SerializationBinder *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Context )( 
        IFormatter * This,
         StreamingContext *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_Context )( 
        IFormatter * This,
         StreamingContext pRetVal);

    END_INTERFACE
} IFormatterVtbl;

interface IFormatter
{
    CONST_VTBL struct IFormatterVtbl *lpVtbl;
};

#endif 	

#ifndef __IFormatterConverter_INTERFACE_DEFINED__
#define __IFormatterConverter_INTERFACE_DEFINED__

EXTERN_C const IID IID_IFormatterConverter;

typedef struct IFormatterConverterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IFormatterConverter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IFormatterConverter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IFormatterConverter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IFormatterConverter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IFormatterConverter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IFormatterConverter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IFormatterConverter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Convert )( 
        IFormatterConverter * This,
         VARIANT value,
         _Type *Type,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Convert_2 )( 
        IFormatterConverter * This,
         VARIANT value,
         TypeCode TypeCode,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToBoolean )( 
        IFormatterConverter * This,
         VARIANT value,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToChar )( 
        IFormatterConverter * This,
         VARIANT value,
         unsigned short *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToSByte )( 
        IFormatterConverter * This,
         VARIANT value,
         unsigned char *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToByte )( 
        IFormatterConverter * This,
         VARIANT value,
         unsigned char *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToInt16 )( 
        IFormatterConverter * This,
         VARIANT value,
         short *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToUInt16 )( 
        IFormatterConverter * This,
         VARIANT value,
         unsigned short *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToInt32 )( 
        IFormatterConverter * This,
         VARIANT value,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToUInt32 )( 
        IFormatterConverter * This,
         VARIANT value,
         unsigned long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToInt64 )( 
        IFormatterConverter * This,
         VARIANT value,
         Int64 *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToUInt64 )( 
        IFormatterConverter * This,
         VARIANT value,
         UInt64 *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToSingle )( 
        IFormatterConverter * This,
         VARIANT value,
         Single *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToDouble )( 
        IFormatterConverter * This,
         VARIANT value,
         double *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToDecimal )( 
        IFormatterConverter * This,
         VARIANT value,
         wchar_t *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ToDateTime )( 
        IFormatterConverter * This,
         VARIANT value,
         DATE *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ToString )( 
        IFormatterConverter * This,
         VARIANT value,
         BSTR *pRetVal);

    END_INTERFACE
} IFormatterConverterVtbl;

interface IFormatterConverter
{
    CONST_VTBL struct IFormatterConverterVtbl *lpVtbl;
};

#endif 	

#ifndef __ISerializationSurrogate_INTERFACE_DEFINED__
#define __ISerializationSurrogate_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISerializationSurrogate;

typedef struct ISerializationSurrogateVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISerializationSurrogate * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISerializationSurrogate * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISerializationSurrogate * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISerializationSurrogate * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISerializationSurrogate * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISerializationSurrogate * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISerializationSurrogate * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetObjectData )( 
        ISerializationSurrogate * This,
         VARIANT obj,
         _SerializationInfo *info,
         StreamingContext Context);

     HRESULT ( STDMETHODCALLTYPE *SetObjectData )( 
        ISerializationSurrogate * This,
         VARIANT obj,
         _SerializationInfo *info,
         StreamingContext Context,
         ISurrogateSelector *selector,
         VARIANT *pRetVal);

    END_INTERFACE
} ISerializationSurrogateVtbl;

interface ISerializationSurrogate
{
    CONST_VTBL struct ISerializationSurrogateVtbl *lpVtbl;
};

#endif 	

#ifndef __ISurrogateSelector_INTERFACE_DEFINED__
#define __ISurrogateSelector_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISurrogateSelector;

typedef struct ISurrogateSelectorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISurrogateSelector * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISurrogateSelector * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISurrogateSelector * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISurrogateSelector * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISurrogateSelector * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISurrogateSelector * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISurrogateSelector * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *ChainSelector )( 
        ISurrogateSelector * This,
         ISurrogateSelector *selector);

     HRESULT ( STDMETHODCALLTYPE *GetSurrogate )( 
        ISurrogateSelector * This,
         _Type *Type,
         StreamingContext Context,
         ISurrogateSelector **selector,
         ISerializationSurrogate **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetNextSelector )( 
        ISurrogateSelector * This,
         ISurrogateSelector **pRetVal);

    END_INTERFACE
} ISurrogateSelectorVtbl;

interface ISurrogateSelector
{
    CONST_VTBL struct ISurrogateSelectorVtbl *lpVtbl;
};

#endif 	

#ifndef __IResourceReader_INTERFACE_DEFINED__
#define __IResourceReader_INTERFACE_DEFINED__

EXTERN_C const IID IID_IResourceReader;

typedef struct IResourceReaderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IResourceReader * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IResourceReader * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IResourceReader * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IResourceReader * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IResourceReader * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IResourceReader * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IResourceReader * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Close )( 
        IResourceReader * This);

     HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
        IResourceReader * This,
         IDictionaryEnumerator **pRetVal);

    END_INTERFACE
} IResourceReaderVtbl;

interface IResourceReader
{
    CONST_VTBL struct IResourceReaderVtbl *lpVtbl;
};

#endif 	

#ifndef __IResourceWriter_INTERFACE_DEFINED__
#define __IResourceWriter_INTERFACE_DEFINED__

EXTERN_C const IID IID_IResourceWriter;

typedef struct IResourceWriterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IResourceWriter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IResourceWriter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IResourceWriter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IResourceWriter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IResourceWriter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IResourceWriter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IResourceWriter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *AddResource )( 
        IResourceWriter * This,
         BSTR name,
         BSTR value);

     HRESULT ( STDMETHODCALLTYPE *AddResource_2 )( 
        IResourceWriter * This,
         BSTR name,
         VARIANT value);

     HRESULT ( STDMETHODCALLTYPE *AddResource_3 )( 
        IResourceWriter * This,
         BSTR name,
         SAFEARRAY * value);

     HRESULT ( STDMETHODCALLTYPE *Close )( 
        IResourceWriter * This);

     HRESULT ( STDMETHODCALLTYPE *Generate )( 
        IResourceWriter * This);

    END_INTERFACE
} IResourceWriterVtbl;

interface IResourceWriter
{
    CONST_VTBL struct IResourceWriterVtbl *lpVtbl;
};

#endif 	

#ifndef __ISecurityEncodable_INTERFACE_DEFINED__
#define __ISecurityEncodable_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISecurityEncodable;

typedef struct ISecurityEncodableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISecurityEncodable * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISecurityEncodable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISecurityEncodable * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISecurityEncodable * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISecurityEncodable * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISecurityEncodable * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISecurityEncodable * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *ToXml )( 
        ISecurityEncodable * This,
         _SecurityElement **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *FromXml )( 
        ISecurityEncodable * This,
         _SecurityElement *e);

    END_INTERFACE
} ISecurityEncodableVtbl;

interface ISecurityEncodable
{
    CONST_VTBL struct ISecurityEncodableVtbl *lpVtbl;
};

#endif 	

#ifndef __ISecurityPolicyEncodable_INTERFACE_DEFINED__
#define __ISecurityPolicyEncodable_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISecurityPolicyEncodable;

typedef struct ISecurityPolicyEncodableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISecurityPolicyEncodable * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISecurityPolicyEncodable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISecurityPolicyEncodable * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISecurityPolicyEncodable * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISecurityPolicyEncodable * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISecurityPolicyEncodable * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISecurityPolicyEncodable * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *ToXml )( 
        ISecurityPolicyEncodable * This,
         _PolicyLevel *level,
         _SecurityElement **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *FromXml )( 
        ISecurityPolicyEncodable * This,
         _SecurityElement *e,
         _PolicyLevel *level);

    END_INTERFACE
} ISecurityPolicyEncodableVtbl;

interface ISecurityPolicyEncodable
{
    CONST_VTBL struct ISecurityPolicyEncodableVtbl *lpVtbl;
};

#endif 	

#ifndef __IMembershipCondition_INTERFACE_DEFINED__
#define __IMembershipCondition_INTERFACE_DEFINED__

EXTERN_C const IID IID_IMembershipCondition;

typedef struct IMembershipConditionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IMembershipCondition * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IMembershipCondition * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IMembershipCondition * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IMembershipCondition * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IMembershipCondition * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IMembershipCondition * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IMembershipCondition * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Check )( 
        IMembershipCondition * This,
         _Evidence *Evidence,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Copy )( 
        IMembershipCondition * This,
         IMembershipCondition **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ToString )( 
        IMembershipCondition * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Equals )( 
        IMembershipCondition * This,
         VARIANT obj,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} IMembershipConditionVtbl;

interface IMembershipCondition
{
    CONST_VTBL struct IMembershipConditionVtbl *lpVtbl;
};

#endif 	

#ifndef __IIdentityPermissionFactory_INTERFACE_DEFINED__
#define __IIdentityPermissionFactory_INTERFACE_DEFINED__

EXTERN_C const IID IID_IIdentityPermissionFactory;

typedef struct IIdentityPermissionFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IIdentityPermissionFactory * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IIdentityPermissionFactory * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IIdentityPermissionFactory * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IIdentityPermissionFactory * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IIdentityPermissionFactory * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IIdentityPermissionFactory * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IIdentityPermissionFactory * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *CreateIdentityPermission )( 
        IIdentityPermissionFactory * This,
         _Evidence *Evidence,
         IPermission **pRetVal);

    END_INTERFACE
} IIdentityPermissionFactoryVtbl;

interface IIdentityPermissionFactory
{
    CONST_VTBL struct IIdentityPermissionFactoryVtbl *lpVtbl;
};

#endif 	

#ifndef __IApplicationTrustManager_INTERFACE_DEFINED__
#define __IApplicationTrustManager_INTERFACE_DEFINED__

EXTERN_C const IID IID_IApplicationTrustManager;

typedef struct IApplicationTrustManagerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IApplicationTrustManager * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IApplicationTrustManager * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IApplicationTrustManager * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IApplicationTrustManager * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IApplicationTrustManager * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IApplicationTrustManager * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IApplicationTrustManager * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *DetermineApplicationTrust )( 
        IApplicationTrustManager * This,
         IUnknown *activationContext,
         _TrustManagerContext *Context,
         _ApplicationTrust **pRetVal);

    END_INTERFACE
} IApplicationTrustManagerVtbl;

interface IApplicationTrustManager
{
    CONST_VTBL struct IApplicationTrustManagerVtbl *lpVtbl;
};

#endif 	

#ifndef __IIdentity_INTERFACE_DEFINED__
#define __IIdentity_INTERFACE_DEFINED__

EXTERN_C const IID IID_IIdentity;

typedef struct IIdentityVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IIdentity * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IIdentity * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IIdentity * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IIdentity * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IIdentity * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IIdentity * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IIdentity * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_name )( 
        IIdentity * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_AuthenticationType )( 
        IIdentity * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_IsAuthenticated )( 
        IIdentity * This,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} IIdentityVtbl;

interface IIdentity
{
    CONST_VTBL struct IIdentityVtbl *lpVtbl;
};

#endif 	

#ifndef __IPrincipal_INTERFACE_DEFINED__
#define __IPrincipal_INTERFACE_DEFINED__

EXTERN_C const IID IID_IPrincipal;

typedef struct IPrincipalVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IPrincipal * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IPrincipal * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IPrincipal * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IPrincipal * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IPrincipal * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IPrincipal * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IPrincipal * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Identity )( 
        IPrincipal * This,
         IIdentity **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *IsInRole )( 
        IPrincipal * This,
         BSTR role,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} IPrincipalVtbl;

interface IPrincipal
{
    CONST_VTBL struct IPrincipalVtbl *lpVtbl;
};

#endif 	

#ifndef __ICustomMarshaler_INTERFACE_DEFINED__
#define __ICustomMarshaler_INTERFACE_DEFINED__

EXTERN_C const IID IID_ICustomMarshaler;

typedef struct ICustomMarshalerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ICustomMarshaler * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ICustomMarshaler * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ICustomMarshaler * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ICustomMarshaler * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ICustomMarshaler * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ICustomMarshaler * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ICustomMarshaler * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *MarshalNativeToManaged )( 
        ICustomMarshaler * This,
         Int64 pNativeData,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *MarshalManagedToNative )( 
        ICustomMarshaler * This,
         VARIANT ManagedObj,
         Int64 *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *CleanUpNativeData )( 
        ICustomMarshaler * This,
         Int64 pNativeData);

     HRESULT ( STDMETHODCALLTYPE *CleanUpManagedData )( 
        ICustomMarshaler * This,
         VARIANT ManagedObj);

     HRESULT ( STDMETHODCALLTYPE *GetNativeDataSize )( 
        ICustomMarshaler * This,
         long *pRetVal);

    END_INTERFACE
} ICustomMarshalerVtbl;

interface ICustomMarshaler
{
    CONST_VTBL struct ICustomMarshalerVtbl *lpVtbl;
};

#endif 	

#ifndef __ITypeLibImporterNotifySink_INTERFACE_DEFINED__
#define __ITypeLibImporterNotifySink_INTERFACE_DEFINED__

EXTERN_C const IID IID_ITypeLibImporterNotifySink;

typedef struct ITypeLibImporterNotifySinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ITypeLibImporterNotifySink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ITypeLibImporterNotifySink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ITypeLibImporterNotifySink * This);

    HRESULT ( __stdcall *ReportEvent )( 
        ITypeLibImporterNotifySink * This,
         ImporterEventKind eventKind,
         long eventCode,
         BSTR eventMsg);

    HRESULT ( __stdcall *ResolveRef )( 
        ITypeLibImporterNotifySink * This,
         IUnknown *typeLib,
         _Assembly **pRetVal);

    END_INTERFACE
} ITypeLibImporterNotifySinkVtbl;

interface ITypeLibImporterNotifySink
{
    CONST_VTBL struct ITypeLibImporterNotifySinkVtbl *lpVtbl;
};

#endif 	

#ifndef __ICustomAdapter_INTERFACE_DEFINED__
#define __ICustomAdapter_INTERFACE_DEFINED__

EXTERN_C const IID IID_ICustomAdapter;

typedef struct ICustomAdapterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ICustomAdapter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ICustomAdapter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ICustomAdapter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ICustomAdapter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ICustomAdapter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ICustomAdapter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ICustomAdapter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetUnderlyingObject )( 
        ICustomAdapter * This,
         IUnknown **pRetVal);

    END_INTERFACE
} ICustomAdapterVtbl;

interface ICustomAdapter
{
    CONST_VTBL struct ICustomAdapterVtbl *lpVtbl;
};

#endif 	

#ifndef __ICustomFactory_INTERFACE_DEFINED__
#define __ICustomFactory_INTERFACE_DEFINED__

EXTERN_C const IID IID_ICustomFactory;

typedef struct ICustomFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ICustomFactory * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ICustomFactory * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ICustomFactory * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ICustomFactory * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ICustomFactory * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ICustomFactory * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ICustomFactory * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *CreateInstance )( 
        ICustomFactory * This,
         _Type *serverType,
         _MarshalByRefObject **pRetVal);

    END_INTERFACE
} ICustomFactoryVtbl;

interface ICustomFactory
{
    CONST_VTBL struct ICustomFactoryVtbl *lpVtbl;
};

#endif 	

#ifndef __IRegistrationServices_INTERFACE_DEFINED__
#define __IRegistrationServices_INTERFACE_DEFINED__

EXTERN_C const IID IID_IRegistrationServices;

typedef struct IRegistrationServicesVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IRegistrationServices * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IRegistrationServices * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IRegistrationServices * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IRegistrationServices * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IRegistrationServices * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IRegistrationServices * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IRegistrationServices * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *RegisterAssembly )( 
        IRegistrationServices * This,
         _Assembly *Assembly,
         AssemblyRegistrationFlags flags,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *UnregisterAssembly )( 
        IRegistrationServices * This,
         _Assembly *Assembly,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetRegistrableTypesInAssembly )( 
        IRegistrationServices * This,
         _Assembly *Assembly,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetProgIdForType )( 
        IRegistrationServices * This,
         _Type *Type,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *RegisterTypeForComClients )( 
        IRegistrationServices * This,
         _Type *Type,
         Guid *G);

     HRESULT ( STDMETHODCALLTYPE *GetManagedCategoryGuid )( 
        IRegistrationServices * This,
         Guid *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *TypeRequiresRegistration )( 
        IRegistrationServices * This,
         _Type *Type,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *TypeRepresentsComType )( 
        IRegistrationServices * This,
         _Type *Type,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} IRegistrationServicesVtbl;

interface IRegistrationServices
{
    CONST_VTBL struct IRegistrationServicesVtbl *lpVtbl;
};

#endif 	

#ifndef __ITypeLibExporterNotifySink_INTERFACE_DEFINED__
#define __ITypeLibExporterNotifySink_INTERFACE_DEFINED__

EXTERN_C const IID IID_ITypeLibExporterNotifySink;

typedef struct ITypeLibExporterNotifySinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ITypeLibExporterNotifySink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ITypeLibExporterNotifySink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ITypeLibExporterNotifySink * This);

    HRESULT ( __stdcall *ReportEvent )( 
        ITypeLibExporterNotifySink * This,
         ExporterEventKind eventKind,
         long eventCode,
         BSTR eventMsg);

    HRESULT ( __stdcall *ResolveRef )( 
        ITypeLibExporterNotifySink * This,
         _Assembly *Assembly,
         IUnknown **pRetVal);

    END_INTERFACE
} ITypeLibExporterNotifySinkVtbl;

interface ITypeLibExporterNotifySink
{
    CONST_VTBL struct ITypeLibExporterNotifySinkVtbl *lpVtbl;
};

#endif 	

#ifndef __ITypeLibConverter_INTERFACE_DEFINED__
#define __ITypeLibConverter_INTERFACE_DEFINED__

EXTERN_C const IID IID_ITypeLibConverter;

typedef struct ITypeLibConverterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ITypeLibConverter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ITypeLibConverter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ITypeLibConverter * This);

    HRESULT ( __stdcall *ConvertTypeLibToAssembly )( 
        ITypeLibConverter * This,
         IUnknown *typeLib,
         BSTR asmFileName,
         TypeLibImporterFlags flags,
         ITypeLibImporterNotifySink *notifySink,
         SAFEARRAY * publicKey,
         _StrongNameKeyPair *keyPair,
         BSTR asmNamespace,
         _Version *asmVersion,
         _AssemblyBuilder **pRetVal);

    HRESULT ( __stdcall *ConvertAssemblyToTypeLib )( 
        ITypeLibConverter * This,
         _Assembly *Assembly,
         BSTR typeLibName,
         TypeLibExporterFlags flags,
         ITypeLibExporterNotifySink *notifySink,
         IUnknown **pRetVal);

    HRESULT ( __stdcall *GetPrimaryInteropAssembly )( 
        ITypeLibConverter * This,
         Guid G,
         long major,
         long minor,
         long lcid,
         BSTR *asmName,
         BSTR *asmCodeBase,
         VARIANT_BOOL *pRetVal);

    HRESULT ( __stdcall *ConvertTypeLibToAssembly_2 )( 
        ITypeLibConverter * This,
         IUnknown *typeLib,
         BSTR asmFileName,
         long flags,
         ITypeLibImporterNotifySink *notifySink,
         SAFEARRAY * publicKey,
         _StrongNameKeyPair *keyPair,
         VARIANT_BOOL unsafeInterfaces,
         _AssemblyBuilder **pRetVal);

    END_INTERFACE
} ITypeLibConverterVtbl;

interface ITypeLibConverter
{
    CONST_VTBL struct ITypeLibConverterVtbl *lpVtbl;
};

#endif 	

#ifndef __ITypeLibExporterNameProvider_INTERFACE_DEFINED__
#define __ITypeLibExporterNameProvider_INTERFACE_DEFINED__

EXTERN_C const IID IID_ITypeLibExporterNameProvider;

typedef struct ITypeLibExporterNameProviderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ITypeLibExporterNameProvider * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ITypeLibExporterNameProvider * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ITypeLibExporterNameProvider * This);

    HRESULT ( __stdcall *GetNames )( 
        ITypeLibExporterNameProvider * This,
         SAFEARRAY * *pRetVal);

    END_INTERFACE
} ITypeLibExporterNameProviderVtbl;

interface ITypeLibExporterNameProvider
{
    CONST_VTBL struct ITypeLibExporterNameProviderVtbl *lpVtbl;
};

#endif 	

#ifndef __IExpando_INTERFACE_DEFINED__
#define __IExpando_INTERFACE_DEFINED__

EXTERN_C const IID IID_IExpando;

typedef struct IExpandoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IExpando * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IExpando * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IExpando * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IExpando * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IExpando * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IExpando * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IExpando * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *AddField )( 
        IExpando * This,
         BSTR name,
         _FieldInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *AddProperty )( 
        IExpando * This,
         BSTR name,
         _PropertyInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *AddMethod )( 
        IExpando * This,
         BSTR name,
         _Delegate *Method,
         _MethodInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
        IExpando * This,
         _MemberInfo *m);

    END_INTERFACE
} IExpandoVtbl;

interface IExpando
{
    CONST_VTBL struct IExpandoVtbl *lpVtbl;
};

#endif 	

#ifndef __IPermission_INTERFACE_DEFINED__
#define __IPermission_INTERFACE_DEFINED__

EXTERN_C const IID IID_IPermission;

typedef struct IPermissionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IPermission * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IPermission * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IPermission * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IPermission * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IPermission * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IPermission * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IPermission * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Copy )( 
        IPermission * This,
         IPermission **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Intersect )( 
        IPermission * This,
         IPermission *Target,
         IPermission **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Union )( 
        IPermission * This,
         IPermission *Target,
         IPermission **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *IsSubsetOf )( 
        IPermission * This,
         IPermission *Target,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Demand )( 
        IPermission * This);

    END_INTERFACE
} IPermissionVtbl;

interface IPermission
{
    CONST_VTBL struct IPermissionVtbl *lpVtbl;
};

#endif 	

#ifndef __IStackWalk_INTERFACE_DEFINED__
#define __IStackWalk_INTERFACE_DEFINED__

EXTERN_C const IID IID_IStackWalk;

typedef struct IStackWalkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IStackWalk * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IStackWalk * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IStackWalk * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IStackWalk * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IStackWalk * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IStackWalk * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IStackWalk * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Assert )( 
        IStackWalk * This);

     HRESULT ( STDMETHODCALLTYPE *Demand )( 
        IStackWalk * This);

     HRESULT ( STDMETHODCALLTYPE *Deny )( 
        IStackWalk * This);

     HRESULT ( STDMETHODCALLTYPE *PermitOnly )( 
        IStackWalk * This);

    END_INTERFACE
} IStackWalkVtbl;

interface IStackWalk
{
    CONST_VTBL struct IStackWalkVtbl *lpVtbl;
};

#endif 	

#ifndef __IUnrestrictedPermission_INTERFACE_DEFINED__
#define __IUnrestrictedPermission_INTERFACE_DEFINED__

EXTERN_C const IID IID_IUnrestrictedPermission;

typedef struct IUnrestrictedPermissionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IUnrestrictedPermission * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IUnrestrictedPermission * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IUnrestrictedPermission * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IUnrestrictedPermission * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IUnrestrictedPermission * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IUnrestrictedPermission * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IUnrestrictedPermission * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *IsUnrestricted )( 
        IUnrestrictedPermission * This,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} IUnrestrictedPermissionVtbl;

interface IUnrestrictedPermission
{
    CONST_VTBL struct IUnrestrictedPermissionVtbl *lpVtbl;
};

#endif 	

#ifndef __IContextAttribute_INTERFACE_DEFINED__
#define __IContextAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID_IContextAttribute;

typedef struct IContextAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IContextAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IContextAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IContextAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IContextAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IContextAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IContextAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IContextAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *IsContextOK )( 
        IContextAttribute * This,
         _Context *ctx,
         IConstructionCallMessage *msg,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetPropertiesForNewContext )( 
        IContextAttribute * This,
         IConstructionCallMessage *msg);

    END_INTERFACE
} IContextAttributeVtbl;

interface IContextAttribute
{
    CONST_VTBL struct IContextAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef __IContextProperty_INTERFACE_DEFINED__
#define __IContextProperty_INTERFACE_DEFINED__

EXTERN_C const IID IID_IContextProperty;

typedef struct IContextPropertyVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IContextProperty * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IContextProperty * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IContextProperty * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IContextProperty * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IContextProperty * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IContextProperty * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IContextProperty * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_name )( 
        IContextProperty * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *IsNewContextOK )( 
        IContextProperty * This,
         _Context *newCtx,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Freeze )( 
        IContextProperty * This,
         _Context *newContext);

    END_INTERFACE
} IContextPropertyVtbl;

interface IContextProperty
{
    CONST_VTBL struct IContextPropertyVtbl *lpVtbl;
};

#endif 	

#ifndef __IActivator_INTERFACE_DEFINED__
#define __IActivator_INTERFACE_DEFINED__

EXTERN_C const IID IID_IActivator;

typedef struct IActivatorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IActivator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IActivator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IActivator * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IActivator * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IActivator * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IActivator * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IActivator * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_NextActivator )( 
        IActivator * This,
         IActivator **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *putref_NextActivator )( 
        IActivator * This,
         IActivator *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Activate )( 
        IActivator * This,
         IConstructionCallMessage *msg,
         IConstructionReturnMessage **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_level )( 
        IActivator * This,
         ActivatorLevel *pRetVal);

    END_INTERFACE
} IActivatorVtbl;

interface IActivator
{
    CONST_VTBL struct IActivatorVtbl *lpVtbl;
};

#endif 	

#ifndef __IMessageSink_INTERFACE_DEFINED__
#define __IMessageSink_INTERFACE_DEFINED__

EXTERN_C const IID IID_IMessageSink;

typedef struct IMessageSinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IMessageSink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IMessageSink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IMessageSink * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IMessageSink * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IMessageSink * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IMessageSink * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IMessageSink * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *SyncProcessMessage )( 
        IMessageSink * This,
         IMessage *msg,
         IMessage **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *AsyncProcessMessage )( 
        IMessageSink * This,
         IMessage *msg,
         IMessageSink *replySink,
         IMessageCtrl **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_NextSink )( 
        IMessageSink * This,
         IMessageSink **pRetVal);

    END_INTERFACE
} IMessageSinkVtbl;

interface IMessageSink
{
    CONST_VTBL struct IMessageSinkVtbl *lpVtbl;
};

#endif 	

#ifndef __ILogicalThreadAffinative_INTERFACE_DEFINED__
#define __ILogicalThreadAffinative_INTERFACE_DEFINED__

EXTERN_C const IID IID_ILogicalThreadAffinative;

typedef struct ILogicalThreadAffinativeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ILogicalThreadAffinative * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ILogicalThreadAffinative * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ILogicalThreadAffinative * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ILogicalThreadAffinative * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ILogicalThreadAffinative * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ILogicalThreadAffinative * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ILogicalThreadAffinative * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} ILogicalThreadAffinativeVtbl;

interface ILogicalThreadAffinative
{
    CONST_VTBL struct ILogicalThreadAffinativeVtbl *lpVtbl;
};

#endif 	

#ifndef __IClientResponseChannelSinkStack_INTERFACE_DEFINED__
#define __IClientResponseChannelSinkStack_INTERFACE_DEFINED__

EXTERN_C const IID IID_IClientResponseChannelSinkStack;

typedef struct IClientResponseChannelSinkStackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IClientResponseChannelSinkStack * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IClientResponseChannelSinkStack * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IClientResponseChannelSinkStack * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IClientResponseChannelSinkStack * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IClientResponseChannelSinkStack * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IClientResponseChannelSinkStack * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IClientResponseChannelSinkStack * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *AsyncProcessResponse )( 
        IClientResponseChannelSinkStack * This,
         ITransportHeaders *headers,
         _Stream *Stream);

     HRESULT ( STDMETHODCALLTYPE *DispatchReplyMessage )( 
        IClientResponseChannelSinkStack * This,
         IMessage *msg);

     HRESULT ( STDMETHODCALLTYPE *DispatchException )( 
        IClientResponseChannelSinkStack * This,
         _Exception *e);

    END_INTERFACE
} IClientResponseChannelSinkStackVtbl;

interface IClientResponseChannelSinkStack
{
    CONST_VTBL struct IClientResponseChannelSinkStackVtbl *lpVtbl;
};

#endif 	

#ifndef __IClientChannelSinkStack_INTERFACE_DEFINED__
#define __IClientChannelSinkStack_INTERFACE_DEFINED__

EXTERN_C const IID IID_IClientChannelSinkStack;

typedef struct IClientChannelSinkStackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IClientChannelSinkStack * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IClientChannelSinkStack * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IClientChannelSinkStack * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IClientChannelSinkStack * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IClientChannelSinkStack * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IClientChannelSinkStack * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IClientChannelSinkStack * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Push )( 
        IClientChannelSinkStack * This,
         IClientChannelSink *sink,
         VARIANT state);

     HRESULT ( STDMETHODCALLTYPE *Pop )( 
        IClientChannelSinkStack * This,
         IClientChannelSink *sink,
         VARIANT *pRetVal);

    END_INTERFACE
} IClientChannelSinkStackVtbl;

interface IClientChannelSinkStack
{
    CONST_VTBL struct IClientChannelSinkStackVtbl *lpVtbl;
};

#endif 	

#ifndef __IServerResponseChannelSinkStack_INTERFACE_DEFINED__
#define __IServerResponseChannelSinkStack_INTERFACE_DEFINED__

EXTERN_C const IID IID_IServerResponseChannelSinkStack;

typedef struct IServerResponseChannelSinkStackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IServerResponseChannelSinkStack * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IServerResponseChannelSinkStack * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IServerResponseChannelSinkStack * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IServerResponseChannelSinkStack * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IServerResponseChannelSinkStack * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IServerResponseChannelSinkStack * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IServerResponseChannelSinkStack * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *AsyncProcessResponse )( 
        IServerResponseChannelSinkStack * This,
         IMessage *msg,
         ITransportHeaders *headers,
         _Stream *Stream);

     HRESULT ( STDMETHODCALLTYPE *GetResponseStream )( 
        IServerResponseChannelSinkStack * This,
         IMessage *msg,
         ITransportHeaders *headers,
         _Stream **pRetVal);

    END_INTERFACE
} IServerResponseChannelSinkStackVtbl;

interface IServerResponseChannelSinkStack
{
    CONST_VTBL struct IServerResponseChannelSinkStackVtbl *lpVtbl;
};

#endif 	

#ifndef __IServerChannelSinkStack_INTERFACE_DEFINED__
#define __IServerChannelSinkStack_INTERFACE_DEFINED__

EXTERN_C const IID IID_IServerChannelSinkStack;

typedef struct IServerChannelSinkStackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IServerChannelSinkStack * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IServerChannelSinkStack * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IServerChannelSinkStack * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IServerChannelSinkStack * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IServerChannelSinkStack * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IServerChannelSinkStack * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IServerChannelSinkStack * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Push )( 
        IServerChannelSinkStack * This,
         IServerChannelSink *sink,
         VARIANT state);

     HRESULT ( STDMETHODCALLTYPE *Pop )( 
        IServerChannelSinkStack * This,
         IServerChannelSink *sink,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Store )( 
        IServerChannelSinkStack * This,
         IServerChannelSink *sink,
         VARIANT state);

     HRESULT ( STDMETHODCALLTYPE *StoreAndDispatch )( 
        IServerChannelSinkStack * This,
         IServerChannelSink *sink,
         VARIANT state);

     HRESULT ( STDMETHODCALLTYPE *ServerCallback )( 
        IServerChannelSinkStack * This,
         IAsyncResult *ar);

    END_INTERFACE
} IServerChannelSinkStackVtbl;

interface IServerChannelSinkStack
{
    CONST_VTBL struct IServerChannelSinkStackVtbl *lpVtbl;
};

#endif 	

#ifndef __ISponsor_INTERFACE_DEFINED__
#define __ISponsor_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISponsor;

typedef struct ISponsorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISponsor * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISponsor * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISponsor * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISponsor * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISponsor * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISponsor * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISponsor * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Renewal )( 
        ISponsor * This,
         ILease *lease,
         TimeSpan *pRetVal);

    END_INTERFACE
} ISponsorVtbl;

interface ISponsor
{
    CONST_VTBL struct ISponsorVtbl *lpVtbl;
};

#endif 	

#ifndef __IContextPropertyActivator_INTERFACE_DEFINED__
#define __IContextPropertyActivator_INTERFACE_DEFINED__

EXTERN_C const IID IID_IContextPropertyActivator;

typedef struct IContextPropertyActivatorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IContextPropertyActivator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IContextPropertyActivator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IContextPropertyActivator * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IContextPropertyActivator * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IContextPropertyActivator * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IContextPropertyActivator * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IContextPropertyActivator * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *IsOKToActivate )( 
        IContextPropertyActivator * This,
         IConstructionCallMessage *msg,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *CollectFromClientContext )( 
        IContextPropertyActivator * This,
         IConstructionCallMessage *msg);

     HRESULT ( STDMETHODCALLTYPE *DeliverClientContextToServerContext )( 
        IContextPropertyActivator * This,
         IConstructionCallMessage *msg,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *CollectFromServerContext )( 
        IContextPropertyActivator * This,
         IConstructionReturnMessage *msg);

     HRESULT ( STDMETHODCALLTYPE *DeliverServerContextToClientContext )( 
        IContextPropertyActivator * This,
         IConstructionReturnMessage *msg,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} IContextPropertyActivatorVtbl;

interface IContextPropertyActivator
{
    CONST_VTBL struct IContextPropertyActivatorVtbl *lpVtbl;
};

#endif 	

#ifndef __IChannel_INTERFACE_DEFINED__
#define __IChannel_INTERFACE_DEFINED__

EXTERN_C const IID IID_IChannel;

typedef struct IChannelVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IChannel * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IChannel * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IChannel * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IChannel * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IChannel * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IChannel * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IChannel * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ChannelPriority )( 
        IChannel * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ChannelName )( 
        IChannel * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Parse )( 
        IChannel * This,
         BSTR Url,
         BSTR *objectURI,
         BSTR *pRetVal);

    END_INTERFACE
} IChannelVtbl;

interface IChannel
{
    CONST_VTBL struct IChannelVtbl *lpVtbl;
};

#endif 	

#ifndef __IChannelSender_INTERFACE_DEFINED__
#define __IChannelSender_INTERFACE_DEFINED__

EXTERN_C const IID IID_IChannelSender;

typedef struct IChannelSenderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IChannelSender * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IChannelSender * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IChannelSender * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IChannelSender * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IChannelSender * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IChannelSender * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IChannelSender * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *CreateMessageSink )( 
        IChannelSender * This,
         BSTR Url,
         VARIANT remoteChannelData,
         BSTR *objectURI,
         IMessageSink **pRetVal);

    END_INTERFACE
} IChannelSenderVtbl;

interface IChannelSender
{
    CONST_VTBL struct IChannelSenderVtbl *lpVtbl;
};

#endif 	

#ifndef __IChannelReceiver_INTERFACE_DEFINED__
#define __IChannelReceiver_INTERFACE_DEFINED__

EXTERN_C const IID IID_IChannelReceiver;

typedef struct IChannelReceiverVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IChannelReceiver * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IChannelReceiver * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IChannelReceiver * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IChannelReceiver * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IChannelReceiver * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IChannelReceiver * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IChannelReceiver * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ChannelData )( 
        IChannelReceiver * This,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetUrlsForUri )( 
        IChannelReceiver * This,
         BSTR objectURI,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *StartListening )( 
        IChannelReceiver * This,
         VARIANT data);

     HRESULT ( STDMETHODCALLTYPE *StopListening )( 
        IChannelReceiver * This,
         VARIANT data);

    END_INTERFACE
} IChannelReceiverVtbl;

interface IChannelReceiver
{
    CONST_VTBL struct IChannelReceiverVtbl *lpVtbl;
};

#endif 	

#ifndef __IServerChannelSinkProvider_INTERFACE_DEFINED__
#define __IServerChannelSinkProvider_INTERFACE_DEFINED__

EXTERN_C const IID IID_IServerChannelSinkProvider;

typedef struct IServerChannelSinkProviderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IServerChannelSinkProvider * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IServerChannelSinkProvider * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IServerChannelSinkProvider * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IServerChannelSinkProvider * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IServerChannelSinkProvider * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IServerChannelSinkProvider * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IServerChannelSinkProvider * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetChannelData )( 
        IServerChannelSinkProvider * This,
         IChannelDataStore *ChannelData);

     HRESULT ( STDMETHODCALLTYPE *CreateSink )( 
        IServerChannelSinkProvider * This,
         IChannelReceiver *channel,
         IServerChannelSink **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Next )( 
        IServerChannelSinkProvider * This,
         IServerChannelSinkProvider **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *putref_Next )( 
        IServerChannelSinkProvider * This,
         IServerChannelSinkProvider *pRetVal);

    END_INTERFACE
} IServerChannelSinkProviderVtbl;

interface IServerChannelSinkProvider
{
    CONST_VTBL struct IServerChannelSinkProviderVtbl *lpVtbl;
};

#endif 	

#ifndef __IChannelSinkBase_INTERFACE_DEFINED__
#define __IChannelSinkBase_INTERFACE_DEFINED__

EXTERN_C const IID IID_IChannelSinkBase;

typedef struct IChannelSinkBaseVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IChannelSinkBase * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IChannelSinkBase * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IChannelSinkBase * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IChannelSinkBase * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IChannelSinkBase * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IChannelSinkBase * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IChannelSinkBase * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
        IChannelSinkBase * This,
         IDictionary **pRetVal);

    END_INTERFACE
} IChannelSinkBaseVtbl;

interface IChannelSinkBase
{
    CONST_VTBL struct IChannelSinkBaseVtbl *lpVtbl;
};

#endif 	

#ifndef __IServerChannelSink_INTERFACE_DEFINED__
#define __IServerChannelSink_INTERFACE_DEFINED__

EXTERN_C const IID IID_IServerChannelSink;

typedef struct IServerChannelSinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IServerChannelSink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IServerChannelSink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IServerChannelSink * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IServerChannelSink * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IServerChannelSink * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IServerChannelSink * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IServerChannelSink * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *ProcessMessage )( 
        IServerChannelSink * This,
         IServerChannelSinkStack *sinkStack,
         IMessage *requestMsg,
         ITransportHeaders *requestHeaders,
         _Stream *requestStream,
         IMessage **responseMsg,
         ITransportHeaders **responseHeaders,
         _Stream **responseStream,
         ServerProcessing *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *AsyncProcessResponse )( 
        IServerChannelSink * This,
         IServerResponseChannelSinkStack *sinkStack,
         VARIANT state,
         IMessage *msg,
         ITransportHeaders *headers,
         _Stream *Stream);

     HRESULT ( STDMETHODCALLTYPE *GetResponseStream )( 
        IServerChannelSink * This,
         IServerResponseChannelSinkStack *sinkStack,
         VARIANT state,
         IMessage *msg,
         ITransportHeaders *headers,
         _Stream **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_NextChannelSink )( 
        IServerChannelSink * This,
         IServerChannelSink **pRetVal);

    END_INTERFACE
} IServerChannelSinkVtbl;

interface IServerChannelSink
{
    CONST_VTBL struct IServerChannelSinkVtbl *lpVtbl;
};

#endif 	

#ifndef __IMessage_INTERFACE_DEFINED__
#define __IMessage_INTERFACE_DEFINED__

EXTERN_C const IID IID_IMessage;

typedef struct IMessageVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IMessage * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IMessage * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IMessage * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IMessage * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IMessage * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IMessage * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IMessage * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
        IMessage * This,
         IDictionary **pRetVal);

    END_INTERFACE
} IMessageVtbl;

interface IMessage
{
    CONST_VTBL struct IMessageVtbl *lpVtbl;
};

#endif 	

#ifndef __IMethodMessage_INTERFACE_DEFINED__
#define __IMethodMessage_INTERFACE_DEFINED__

EXTERN_C const IID IID_IMethodMessage;

typedef struct IMethodMessageVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IMethodMessage * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IMethodMessage * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IMethodMessage * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IMethodMessage * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IMethodMessage * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IMethodMessage * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IMethodMessage * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Uri )( 
        IMethodMessage * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_MethodName )( 
        IMethodMessage * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_typeName )( 
        IMethodMessage * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_MethodSignature )( 
        IMethodMessage * This,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ArgCount )( 
        IMethodMessage * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetArgName )( 
        IMethodMessage * This,
         long index,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetArg )( 
        IMethodMessage * This,
         long argNum,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_args )( 
        IMethodMessage * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_HasVarArgs )( 
        IMethodMessage * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_LogicalCallContext )( 
        IMethodMessage * This,
         _LogicalCallContext **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_MethodBase )( 
        IMethodMessage * This,
         _MethodBase **pRetVal);

    END_INTERFACE
} IMethodMessageVtbl;

interface IMethodMessage
{
    CONST_VTBL struct IMethodMessageVtbl *lpVtbl;
};

#endif 	

#ifndef __IMethodCallMessage_INTERFACE_DEFINED__
#define __IMethodCallMessage_INTERFACE_DEFINED__

EXTERN_C const IID IID_IMethodCallMessage;

typedef struct IMethodCallMessageVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IMethodCallMessage * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IMethodCallMessage * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IMethodCallMessage * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IMethodCallMessage * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IMethodCallMessage * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IMethodCallMessage * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IMethodCallMessage * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_InArgCount )( 
        IMethodCallMessage * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetInArgName )( 
        IMethodCallMessage * This,
         long index,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetInArg )( 
        IMethodCallMessage * This,
         long argNum,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_InArgs )( 
        IMethodCallMessage * This,
         SAFEARRAY * *pRetVal);

    END_INTERFACE
} IMethodCallMessageVtbl;

interface IMethodCallMessage
{
    CONST_VTBL struct IMethodCallMessageVtbl *lpVtbl;
};

#endif 	

#ifndef __IConstructionCallMessage_INTERFACE_DEFINED__
#define __IConstructionCallMessage_INTERFACE_DEFINED__

EXTERN_C const IID IID_IConstructionCallMessage;

typedef struct IConstructionCallMessageVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IConstructionCallMessage * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IConstructionCallMessage * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IConstructionCallMessage * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IConstructionCallMessage * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IConstructionCallMessage * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IConstructionCallMessage * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IConstructionCallMessage * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Activator )( 
        IConstructionCallMessage * This,
         IActivator **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *putref_Activator )( 
        IConstructionCallMessage * This,
         IActivator *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_CallSiteActivationAttributes )( 
        IConstructionCallMessage * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ActivationTypeName )( 
        IConstructionCallMessage * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ActivationType )( 
        IConstructionCallMessage * This,
         _Type **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ContextProperties )( 
        IConstructionCallMessage * This,
         IList **pRetVal);

    END_INTERFACE
} IConstructionCallMessageVtbl;

interface IConstructionCallMessage
{
    CONST_VTBL struct IConstructionCallMessageVtbl *lpVtbl;
};

#endif 	

#ifndef __IMethodReturnMessage_INTERFACE_DEFINED__
#define __IMethodReturnMessage_INTERFACE_DEFINED__

EXTERN_C const IID IID_IMethodReturnMessage;

typedef struct IMethodReturnMessageVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IMethodReturnMessage * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IMethodReturnMessage * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IMethodReturnMessage * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IMethodReturnMessage * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IMethodReturnMessage * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IMethodReturnMessage * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IMethodReturnMessage * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_OutArgCount )( 
        IMethodReturnMessage * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetOutArgName )( 
        IMethodReturnMessage * This,
         long index,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetOutArg )( 
        IMethodReturnMessage * This,
         long argNum,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_OutArgs )( 
        IMethodReturnMessage * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Exception )( 
        IMethodReturnMessage * This,
         _Exception **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ReturnValue )( 
        IMethodReturnMessage * This,
         VARIANT *pRetVal);

    END_INTERFACE
} IMethodReturnMessageVtbl;

interface IMethodReturnMessage
{
    CONST_VTBL struct IMethodReturnMessageVtbl *lpVtbl;
};

#endif 	

#ifndef __IConstructionReturnMessage_INTERFACE_DEFINED__
#define __IConstructionReturnMessage_INTERFACE_DEFINED__

EXTERN_C const IID IID_IConstructionReturnMessage;

typedef struct IConstructionReturnMessageVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IConstructionReturnMessage * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IConstructionReturnMessage * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IConstructionReturnMessage * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IConstructionReturnMessage * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IConstructionReturnMessage * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IConstructionReturnMessage * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IConstructionReturnMessage * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} IConstructionReturnMessageVtbl;

interface IConstructionReturnMessage
{
    CONST_VTBL struct IConstructionReturnMessageVtbl *lpVtbl;
};

#endif 	

#ifndef __IChannelReceiverHook_INTERFACE_DEFINED__
#define __IChannelReceiverHook_INTERFACE_DEFINED__

EXTERN_C const IID IID_IChannelReceiverHook;

typedef struct IChannelReceiverHookVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IChannelReceiverHook * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IChannelReceiverHook * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IChannelReceiverHook * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IChannelReceiverHook * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IChannelReceiverHook * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IChannelReceiverHook * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IChannelReceiverHook * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ChannelScheme )( 
        IChannelReceiverHook * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_WantsToListen )( 
        IChannelReceiverHook * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ChannelSinkChain )( 
        IChannelReceiverHook * This,
         IServerChannelSink **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *AddHookChannelUri )( 
        IChannelReceiverHook * This,
         BSTR channelUri);

    END_INTERFACE
} IChannelReceiverHookVtbl;

interface IChannelReceiverHook
{
    CONST_VTBL struct IChannelReceiverHookVtbl *lpVtbl;
};

#endif 	

#ifndef __IClientChannelSinkProvider_INTERFACE_DEFINED__
#define __IClientChannelSinkProvider_INTERFACE_DEFINED__

EXTERN_C const IID IID_IClientChannelSinkProvider;

typedef struct IClientChannelSinkProviderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IClientChannelSinkProvider * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IClientChannelSinkProvider * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IClientChannelSinkProvider * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IClientChannelSinkProvider * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IClientChannelSinkProvider * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IClientChannelSinkProvider * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IClientChannelSinkProvider * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *CreateSink )( 
        IClientChannelSinkProvider * This,
         IChannelSender *channel,
         BSTR Url,
         VARIANT remoteChannelData,
         IClientChannelSink **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Next )( 
        IClientChannelSinkProvider * This,
         IClientChannelSinkProvider **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *putref_Next )( 
        IClientChannelSinkProvider * This,
         IClientChannelSinkProvider *pRetVal);

    END_INTERFACE
} IClientChannelSinkProviderVtbl;

interface IClientChannelSinkProvider
{
    CONST_VTBL struct IClientChannelSinkProviderVtbl *lpVtbl;
};

#endif 	

#ifndef __IClientFormatterSinkProvider_INTERFACE_DEFINED__
#define __IClientFormatterSinkProvider_INTERFACE_DEFINED__

EXTERN_C const IID IID_IClientFormatterSinkProvider;

typedef struct IClientFormatterSinkProviderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IClientFormatterSinkProvider * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IClientFormatterSinkProvider * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IClientFormatterSinkProvider * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IClientFormatterSinkProvider * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IClientFormatterSinkProvider * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IClientFormatterSinkProvider * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IClientFormatterSinkProvider * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} IClientFormatterSinkProviderVtbl;

interface IClientFormatterSinkProvider
{
    CONST_VTBL struct IClientFormatterSinkProviderVtbl *lpVtbl;
};

#endif 	

#ifndef __IServerFormatterSinkProvider_INTERFACE_DEFINED__
#define __IServerFormatterSinkProvider_INTERFACE_DEFINED__

EXTERN_C const IID IID_IServerFormatterSinkProvider;

typedef struct IServerFormatterSinkProviderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IServerFormatterSinkProvider * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IServerFormatterSinkProvider * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IServerFormatterSinkProvider * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IServerFormatterSinkProvider * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IServerFormatterSinkProvider * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IServerFormatterSinkProvider * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IServerFormatterSinkProvider * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} IServerFormatterSinkProviderVtbl;

interface IServerFormatterSinkProvider
{
    CONST_VTBL struct IServerFormatterSinkProviderVtbl *lpVtbl;
};

#endif 	

#ifndef __IClientChannelSink_INTERFACE_DEFINED__
#define __IClientChannelSink_INTERFACE_DEFINED__

EXTERN_C const IID IID_IClientChannelSink;

typedef struct IClientChannelSinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IClientChannelSink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IClientChannelSink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IClientChannelSink * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IClientChannelSink * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IClientChannelSink * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IClientChannelSink * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IClientChannelSink * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *ProcessMessage )( 
        IClientChannelSink * This,
         IMessage *msg,
         ITransportHeaders *requestHeaders,
         _Stream *requestStream,
         ITransportHeaders **responseHeaders,
         _Stream **responseStream);

     HRESULT ( STDMETHODCALLTYPE *AsyncProcessRequest )( 
        IClientChannelSink * This,
         IClientChannelSinkStack *sinkStack,
         IMessage *msg,
         ITransportHeaders *headers,
         _Stream *Stream);

     HRESULT ( STDMETHODCALLTYPE *AsyncProcessResponse )( 
        IClientChannelSink * This,
         IClientResponseChannelSinkStack *sinkStack,
         VARIANT state,
         ITransportHeaders *headers,
         _Stream *Stream);

     HRESULT ( STDMETHODCALLTYPE *GetRequestStream )( 
        IClientChannelSink * This,
         IMessage *msg,
         ITransportHeaders *headers,
         _Stream **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_NextChannelSink )( 
        IClientChannelSink * This,
         IClientChannelSink **pRetVal);

    END_INTERFACE
} IClientChannelSinkVtbl;

interface IClientChannelSink
{
    CONST_VTBL struct IClientChannelSinkVtbl *lpVtbl;
};

#endif 	

#ifndef __IClientFormatterSink_INTERFACE_DEFINED__
#define __IClientFormatterSink_INTERFACE_DEFINED__

EXTERN_C const IID IID_IClientFormatterSink;

typedef struct IClientFormatterSinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IClientFormatterSink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IClientFormatterSink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IClientFormatterSink * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IClientFormatterSink * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IClientFormatterSink * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IClientFormatterSink * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IClientFormatterSink * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} IClientFormatterSinkVtbl;

interface IClientFormatterSink
{
    CONST_VTBL struct IClientFormatterSinkVtbl *lpVtbl;
};

#endif 	

#ifndef __IChannelDataStore_INTERFACE_DEFINED__
#define __IChannelDataStore_INTERFACE_DEFINED__

EXTERN_C const IID IID_IChannelDataStore;

typedef struct IChannelDataStoreVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IChannelDataStore * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IChannelDataStore * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IChannelDataStore * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IChannelDataStore * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IChannelDataStore * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IChannelDataStore * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IChannelDataStore * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ChannelUris )( 
        IChannelDataStore * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Item )( 
        IChannelDataStore * This,
         VARIANT key,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *putref_Item )( 
        IChannelDataStore * This,
         VARIANT key,
         VARIANT pRetVal);

    END_INTERFACE
} IChannelDataStoreVtbl;

interface IChannelDataStore
{
    CONST_VTBL struct IChannelDataStoreVtbl *lpVtbl;
};

#endif 	

#ifndef __ITransportHeaders_INTERFACE_DEFINED__
#define __ITransportHeaders_INTERFACE_DEFINED__

EXTERN_C const IID IID_ITransportHeaders;

typedef struct ITransportHeadersVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ITransportHeaders * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ITransportHeaders * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ITransportHeaders * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ITransportHeaders * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ITransportHeaders * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ITransportHeaders * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ITransportHeaders * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_Item )( 
        ITransportHeaders * This,
         VARIANT key,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *putref_Item )( 
        ITransportHeaders * This,
         VARIANT key,
         VARIANT pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetEnumerator )( 
        ITransportHeaders * This,
         IEnumVARIANT **pRetVal);

    END_INTERFACE
} ITransportHeadersVtbl;

interface ITransportHeaders
{
    CONST_VTBL struct ITransportHeadersVtbl *lpVtbl;
};

#endif 	

#ifndef __IContributeClientContextSink_INTERFACE_DEFINED__
#define __IContributeClientContextSink_INTERFACE_DEFINED__

EXTERN_C const IID IID_IContributeClientContextSink;

typedef struct IContributeClientContextSinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IContributeClientContextSink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IContributeClientContextSink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IContributeClientContextSink * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IContributeClientContextSink * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IContributeClientContextSink * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IContributeClientContextSink * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IContributeClientContextSink * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetClientContextSink )( 
        IContributeClientContextSink * This,
         IMessageSink *NextSink,
         IMessageSink **pRetVal);

    END_INTERFACE
} IContributeClientContextSinkVtbl;

interface IContributeClientContextSink
{
    CONST_VTBL struct IContributeClientContextSinkVtbl *lpVtbl;
};

#endif 	

#ifndef __IContributeDynamicSink_INTERFACE_DEFINED__
#define __IContributeDynamicSink_INTERFACE_DEFINED__

EXTERN_C const IID IID_IContributeDynamicSink;

typedef struct IContributeDynamicSinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IContributeDynamicSink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IContributeDynamicSink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IContributeDynamicSink * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IContributeDynamicSink * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IContributeDynamicSink * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IContributeDynamicSink * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IContributeDynamicSink * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetDynamicSink )( 
        IContributeDynamicSink * This,
         IDynamicMessageSink **pRetVal);

    END_INTERFACE
} IContributeDynamicSinkVtbl;

interface IContributeDynamicSink
{
    CONST_VTBL struct IContributeDynamicSinkVtbl *lpVtbl;
};

#endif 	

#ifndef __IContributeEnvoySink_INTERFACE_DEFINED__
#define __IContributeEnvoySink_INTERFACE_DEFINED__

EXTERN_C const IID IID_IContributeEnvoySink;

typedef struct IContributeEnvoySinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IContributeEnvoySink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IContributeEnvoySink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IContributeEnvoySink * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IContributeEnvoySink * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IContributeEnvoySink * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IContributeEnvoySink * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IContributeEnvoySink * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetEnvoySink )( 
        IContributeEnvoySink * This,
         _MarshalByRefObject *obj,
         IMessageSink *NextSink,
         IMessageSink **pRetVal);

    END_INTERFACE
} IContributeEnvoySinkVtbl;

interface IContributeEnvoySink
{
    CONST_VTBL struct IContributeEnvoySinkVtbl *lpVtbl;
};

#endif 	

#ifndef __IContributeObjectSink_INTERFACE_DEFINED__
#define __IContributeObjectSink_INTERFACE_DEFINED__

EXTERN_C const IID IID_IContributeObjectSink;

typedef struct IContributeObjectSinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IContributeObjectSink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IContributeObjectSink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IContributeObjectSink * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IContributeObjectSink * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IContributeObjectSink * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IContributeObjectSink * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IContributeObjectSink * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetObjectSink )( 
        IContributeObjectSink * This,
         _MarshalByRefObject *obj,
         IMessageSink *NextSink,
         IMessageSink **pRetVal);

    END_INTERFACE
} IContributeObjectSinkVtbl;

interface IContributeObjectSink
{
    CONST_VTBL struct IContributeObjectSinkVtbl *lpVtbl;
};

#endif 	

#ifndef __IContributeServerContextSink_INTERFACE_DEFINED__
#define __IContributeServerContextSink_INTERFACE_DEFINED__

EXTERN_C const IID IID_IContributeServerContextSink;

typedef struct IContributeServerContextSinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IContributeServerContextSink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IContributeServerContextSink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IContributeServerContextSink * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IContributeServerContextSink * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IContributeServerContextSink * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IContributeServerContextSink * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IContributeServerContextSink * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetServerContextSink )( 
        IContributeServerContextSink * This,
         IMessageSink *NextSink,
         IMessageSink **pRetVal);

    END_INTERFACE
} IContributeServerContextSinkVtbl;

interface IContributeServerContextSink
{
    CONST_VTBL struct IContributeServerContextSinkVtbl *lpVtbl;
};

#endif 	

#ifndef __IDynamicProperty_INTERFACE_DEFINED__
#define __IDynamicProperty_INTERFACE_DEFINED__

EXTERN_C const IID IID_IDynamicProperty;

typedef struct IDynamicPropertyVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IDynamicProperty * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IDynamicProperty * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IDynamicProperty * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IDynamicProperty * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IDynamicProperty * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IDynamicProperty * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IDynamicProperty * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_name )( 
        IDynamicProperty * This,
         BSTR *pRetVal);

    END_INTERFACE
} IDynamicPropertyVtbl;

interface IDynamicProperty
{
    CONST_VTBL struct IDynamicPropertyVtbl *lpVtbl;
};

#endif 	

#ifndef __IDynamicMessageSink_INTERFACE_DEFINED__
#define __IDynamicMessageSink_INTERFACE_DEFINED__

EXTERN_C const IID IID_IDynamicMessageSink;

typedef struct IDynamicMessageSinkVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IDynamicMessageSink * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IDynamicMessageSink * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IDynamicMessageSink * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IDynamicMessageSink * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IDynamicMessageSink * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IDynamicMessageSink * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IDynamicMessageSink * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *ProcessMessageStart )( 
        IDynamicMessageSink * This,
         IMessage *reqMsg,
         VARIANT_BOOL bCliSide,
         VARIANT_BOOL bAsync);

     HRESULT ( STDMETHODCALLTYPE *ProcessMessageFinish )( 
        IDynamicMessageSink * This,
         IMessage *replyMsg,
         VARIANT_BOOL bCliSide,
         VARIANT_BOOL bAsync);

    END_INTERFACE
} IDynamicMessageSinkVtbl;

interface IDynamicMessageSink
{
    CONST_VTBL struct IDynamicMessageSinkVtbl *lpVtbl;
};

#endif 	

#ifndef __ILease_INTERFACE_DEFINED__
#define __ILease_INTERFACE_DEFINED__

EXTERN_C const IID IID_ILease;

typedef struct ILeaseVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ILease * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ILease * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ILease * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ILease * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ILease * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ILease * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ILease * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Register )( 
        ILease * This,
         ISponsor *obj,
         TimeSpan renewalTime);

     HRESULT ( STDMETHODCALLTYPE *Register_2 )( 
        ILease * This,
         ISponsor *obj);

     HRESULT ( STDMETHODCALLTYPE *Unregister )( 
        ILease * This,
         ISponsor *obj);

     HRESULT ( STDMETHODCALLTYPE *Renew )( 
        ILease * This,
         TimeSpan renewalTime,
         TimeSpan *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_RenewOnCallTime )( 
        ILease * This,
         TimeSpan *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_RenewOnCallTime )( 
        ILease * This,
         TimeSpan pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_SponsorshipTimeout )( 
        ILease * This,
         TimeSpan *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_SponsorshipTimeout )( 
        ILease * This,
         TimeSpan pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_InitialLeaseTime )( 
        ILease * This,
         TimeSpan *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_InitialLeaseTime )( 
        ILease * This,
         TimeSpan pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_CurrentLeaseTime )( 
        ILease * This,
         TimeSpan *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_CurrentState )( 
        ILease * This,
         LeaseState *pRetVal);

    END_INTERFACE
} ILeaseVtbl;

interface ILease
{
    CONST_VTBL struct ILeaseVtbl *lpVtbl;
};

#endif 	

#ifndef __IMessageCtrl_INTERFACE_DEFINED__
#define __IMessageCtrl_INTERFACE_DEFINED__

EXTERN_C const IID IID_IMessageCtrl;

typedef struct IMessageCtrlVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IMessageCtrl * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IMessageCtrl * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IMessageCtrl * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IMessageCtrl * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IMessageCtrl * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IMessageCtrl * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IMessageCtrl * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Cancel )( 
        IMessageCtrl * This,
         long msToCancel);

    END_INTERFACE
} IMessageCtrlVtbl;

interface IMessageCtrl
{
    CONST_VTBL struct IMessageCtrlVtbl *lpVtbl;
};

#endif 	

#ifndef __IRemotingFormatter_INTERFACE_DEFINED__
#define __IRemotingFormatter_INTERFACE_DEFINED__

EXTERN_C const IID IID_IRemotingFormatter;

typedef struct IRemotingFormatterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IRemotingFormatter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IRemotingFormatter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IRemotingFormatter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IRemotingFormatter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IRemotingFormatter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IRemotingFormatter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IRemotingFormatter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Deserialize )( 
        IRemotingFormatter * This,
         _Stream *serializationStream,
         _HeaderHandler *handler,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Serialize )( 
        IRemotingFormatter * This,
         _Stream *serializationStream,
         VARIANT graph,
         SAFEARRAY * headers);

    END_INTERFACE
} IRemotingFormatterVtbl;

interface IRemotingFormatter
{
    CONST_VTBL struct IRemotingFormatterVtbl *lpVtbl;
};

#endif 	

#ifndef __IFieldInfo_INTERFACE_DEFINED__
#define __IFieldInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID_IFieldInfo;

typedef struct IFieldInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IFieldInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IFieldInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IFieldInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IFieldInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IFieldInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IFieldInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IFieldInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_FieldNames )( 
        IFieldInfo * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_FieldNames )( 
        IFieldInfo * This,
         SAFEARRAY * pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_FieldTypes )( 
        IFieldInfo * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_FieldTypes )( 
        IFieldInfo * This,
         SAFEARRAY * pRetVal);

    END_INTERFACE
} IFieldInfoVtbl;

interface IFieldInfo
{
    CONST_VTBL struct IFieldInfoVtbl *lpVtbl;
};

#endif 	

#ifndef __IRemotingTypeInfo_INTERFACE_DEFINED__
#define __IRemotingTypeInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID_IRemotingTypeInfo;

typedef struct IRemotingTypeInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IRemotingTypeInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IRemotingTypeInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IRemotingTypeInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IRemotingTypeInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IRemotingTypeInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IRemotingTypeInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IRemotingTypeInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_typeName )( 
        IRemotingTypeInfo * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_typeName )( 
        IRemotingTypeInfo * This,
         BSTR pRetVal);

     HRESULT ( STDMETHODCALLTYPE *CanCastTo )( 
        IRemotingTypeInfo * This,
         _Type *fromType,
         VARIANT o,
         VARIANT_BOOL *pRetVal);

    END_INTERFACE
} IRemotingTypeInfoVtbl;

interface IRemotingTypeInfo
{
    CONST_VTBL struct IRemotingTypeInfoVtbl *lpVtbl;
};

#endif 	

#ifndef __IChannelInfo_INTERFACE_DEFINED__
#define __IChannelInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID_IChannelInfo;

typedef struct IChannelInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IChannelInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IChannelInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IChannelInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IChannelInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IChannelInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IChannelInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IChannelInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ChannelData )( 
        IChannelInfo * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_ChannelData )( 
        IChannelInfo * This,
         SAFEARRAY * pRetVal);

    END_INTERFACE
} IChannelInfoVtbl;

interface IChannelInfo
{
    CONST_VTBL struct IChannelInfoVtbl *lpVtbl;
};

#endif 	

#ifndef __IEnvoyInfo_INTERFACE_DEFINED__
#define __IEnvoyInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID_IEnvoyInfo;

typedef struct IEnvoyInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        IEnvoyInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        IEnvoyInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        IEnvoyInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        IEnvoyInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        IEnvoyInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        IEnvoyInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        IEnvoyInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_EnvoySinks )( 
        IEnvoyInfo * This,
         IMessageSink **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *putref_EnvoySinks )( 
        IEnvoyInfo * This,
         IMessageSink *pRetVal);

    END_INTERFACE
} IEnvoyInfoVtbl;

interface IEnvoyInfo
{
    CONST_VTBL struct IEnvoyInfoVtbl *lpVtbl;
};

#endif 	

#ifndef __ISoapXsd_INTERFACE_DEFINED__
#define __ISoapXsd_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISoapXsd;

typedef struct ISoapXsdVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISoapXsd * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISoapXsd * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISoapXsd * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISoapXsd * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISoapXsd * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISoapXsd * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISoapXsd * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *GetXsdType )( 
        ISoapXsd * This,
         BSTR *pRetVal);

    END_INTERFACE
} ISoapXsdVtbl;

interface ISoapXsd
{
    CONST_VTBL struct ISoapXsdVtbl *lpVtbl;
};

#endif 	

#ifndef __ITrackingHandler_INTERFACE_DEFINED__
#define __ITrackingHandler_INTERFACE_DEFINED__

EXTERN_C const IID IID_ITrackingHandler;

typedef struct ITrackingHandlerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ITrackingHandler * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ITrackingHandler * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ITrackingHandler * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ITrackingHandler * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ITrackingHandler * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ITrackingHandler * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ITrackingHandler * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *MarshaledObject )( 
        ITrackingHandler * This,
         VARIANT obj,
         _ObjRef *or);

     HRESULT ( STDMETHODCALLTYPE *UnmarshaledObject )( 
        ITrackingHandler * This,
         VARIANT obj,
         _ObjRef *or);

     HRESULT ( STDMETHODCALLTYPE *DisconnectedObject )( 
        ITrackingHandler * This,
         VARIANT obj);

    END_INTERFACE
} ITrackingHandlerVtbl;

interface ITrackingHandler
{
    CONST_VTBL struct ITrackingHandlerVtbl *lpVtbl;
};

#endif 	

#ifndef __INormalizeForIsolatedStorage_INTERFACE_DEFINED__
#define __INormalizeForIsolatedStorage_INTERFACE_DEFINED__

EXTERN_C const IID IID_INormalizeForIsolatedStorage;

typedef struct INormalizeForIsolatedStorageVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        INormalizeForIsolatedStorage * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        INormalizeForIsolatedStorage * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        INormalizeForIsolatedStorage * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        INormalizeForIsolatedStorage * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        INormalizeForIsolatedStorage * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        INormalizeForIsolatedStorage * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        INormalizeForIsolatedStorage * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *Normalize )( 
        INormalizeForIsolatedStorage * This,
         VARIANT *pRetVal);

    END_INTERFACE
} INormalizeForIsolatedStorageVtbl;

interface INormalizeForIsolatedStorage
{
    CONST_VTBL struct INormalizeForIsolatedStorageVtbl *lpVtbl;
};

#endif 	

#ifndef __ISoapMessage_INTERFACE_DEFINED__
#define __ISoapMessage_INTERFACE_DEFINED__

EXTERN_C const IID IID_ISoapMessage;

typedef struct ISoapMessageVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ISoapMessage * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ISoapMessage * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ISoapMessage * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ISoapMessage * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ISoapMessage * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ISoapMessage * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ISoapMessage * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ParamNames )( 
        ISoapMessage * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_ParamNames )( 
        ISoapMessage * This,
         SAFEARRAY * pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ParamValues )( 
        ISoapMessage * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_ParamValues )( 
        ISoapMessage * This,
         SAFEARRAY * pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_ParamTypes )( 
        ISoapMessage * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_ParamTypes )( 
        ISoapMessage * This,
         SAFEARRAY * pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_MethodName )( 
        ISoapMessage * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_MethodName )( 
        ISoapMessage * This,
         BSTR pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_XmlNameSpace )( 
        ISoapMessage * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_XmlNameSpace )( 
        ISoapMessage * This,
         BSTR pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_headers )( 
        ISoapMessage * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *put_headers )( 
        ISoapMessage * This,
         SAFEARRAY * pRetVal);

    END_INTERFACE
} ISoapMessageVtbl;

interface ISoapMessage
{
    CONST_VTBL struct ISoapMessageVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyBuilder_INTERFACE_DEFINED__
#define ___AssemblyBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyBuilder;

typedef struct _AssemblyBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _AssemblyBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _AssemblyBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _AssemblyBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _AssemblyBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _AssemblyBuilderVtbl;

interface _AssemblyBuilder
{
    CONST_VTBL struct _AssemblyBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___ConstructorBuilder_INTERFACE_DEFINED__
#define ___ConstructorBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__ConstructorBuilder;

typedef struct _ConstructorBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ConstructorBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ConstructorBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ConstructorBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _ConstructorBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _ConstructorBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _ConstructorBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _ConstructorBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _ConstructorBuilderVtbl;

interface _ConstructorBuilder
{
    CONST_VTBL struct _ConstructorBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___CustomAttributeBuilder_INTERFACE_DEFINED__
#define ___CustomAttributeBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__CustomAttributeBuilder;

typedef struct _CustomAttributeBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CustomAttributeBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CustomAttributeBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CustomAttributeBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _CustomAttributeBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _CustomAttributeBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _CustomAttributeBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _CustomAttributeBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _CustomAttributeBuilderVtbl;

interface _CustomAttributeBuilder
{
    CONST_VTBL struct _CustomAttributeBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___EnumBuilder_INTERFACE_DEFINED__
#define ___EnumBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__EnumBuilder;

typedef struct _EnumBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _EnumBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _EnumBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _EnumBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _EnumBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _EnumBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _EnumBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _EnumBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _EnumBuilderVtbl;

interface _EnumBuilder
{
    CONST_VTBL struct _EnumBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___EventBuilder_INTERFACE_DEFINED__
#define ___EventBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__EventBuilder;

typedef struct _EventBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _EventBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _EventBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _EventBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _EventBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _EventBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _EventBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _EventBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _EventBuilderVtbl;

interface _EventBuilder
{
    CONST_VTBL struct _EventBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___FieldBuilder_INTERFACE_DEFINED__
#define ___FieldBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__FieldBuilder;

typedef struct _FieldBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FieldBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FieldBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FieldBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _FieldBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _FieldBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _FieldBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _FieldBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _FieldBuilderVtbl;

interface _FieldBuilder
{
    CONST_VTBL struct _FieldBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___ILGenerator_INTERFACE_DEFINED__
#define ___ILGenerator_INTERFACE_DEFINED__

EXTERN_C const IID IID__ILGenerator;

typedef struct _ILGeneratorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ILGenerator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ILGenerator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ILGenerator * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _ILGenerator * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _ILGenerator * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _ILGenerator * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _ILGenerator * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _ILGeneratorVtbl;

interface _ILGenerator
{
    CONST_VTBL struct _ILGeneratorVtbl *lpVtbl;
};

#endif 	

#ifndef ___LocalBuilder_INTERFACE_DEFINED__
#define ___LocalBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__LocalBuilder;

typedef struct _LocalBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _LocalBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _LocalBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _LocalBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _LocalBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _LocalBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _LocalBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _LocalBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _LocalBuilderVtbl;

interface _LocalBuilder
{
    CONST_VTBL struct _LocalBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___MethodBuilder_INTERFACE_DEFINED__
#define ___MethodBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__MethodBuilder;

typedef struct _MethodBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MethodBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MethodBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MethodBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _MethodBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _MethodBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _MethodBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _MethodBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _MethodBuilderVtbl;

interface _MethodBuilder
{
    CONST_VTBL struct _MethodBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___MethodRental_INTERFACE_DEFINED__
#define ___MethodRental_INTERFACE_DEFINED__

EXTERN_C const IID IID__MethodRental;

typedef struct _MethodRentalVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MethodRental * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MethodRental * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MethodRental * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _MethodRental * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _MethodRental * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _MethodRental * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _MethodRental * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _MethodRentalVtbl;

interface _MethodRental
{
    CONST_VTBL struct _MethodRentalVtbl *lpVtbl;
};

#endif 	

#ifndef ___ModuleBuilder_INTERFACE_DEFINED__
#define ___ModuleBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__ModuleBuilder;

typedef struct _ModuleBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ModuleBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ModuleBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ModuleBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _ModuleBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _ModuleBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _ModuleBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _ModuleBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _ModuleBuilderVtbl;

interface _ModuleBuilder
{
    CONST_VTBL struct _ModuleBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___ParameterBuilder_INTERFACE_DEFINED__
#define ___ParameterBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__ParameterBuilder;

typedef struct _ParameterBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ParameterBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ParameterBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ParameterBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _ParameterBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _ParameterBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _ParameterBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _ParameterBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _ParameterBuilderVtbl;

interface _ParameterBuilder
{
    CONST_VTBL struct _ParameterBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___PropertyBuilder_INTERFACE_DEFINED__
#define ___PropertyBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__PropertyBuilder;

typedef struct _PropertyBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _PropertyBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _PropertyBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _PropertyBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _PropertyBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _PropertyBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _PropertyBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _PropertyBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _PropertyBuilderVtbl;

interface _PropertyBuilder
{
    CONST_VTBL struct _PropertyBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___SignatureHelper_INTERFACE_DEFINED__
#define ___SignatureHelper_INTERFACE_DEFINED__

EXTERN_C const IID IID__SignatureHelper;

typedef struct _SignatureHelperVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SignatureHelper * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SignatureHelper * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SignatureHelper * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _SignatureHelper * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _SignatureHelper * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _SignatureHelper * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _SignatureHelper * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _SignatureHelperVtbl;

interface _SignatureHelper
{
    CONST_VTBL struct _SignatureHelperVtbl *lpVtbl;
};

#endif 	

#ifndef ___TypeBuilder_INTERFACE_DEFINED__
#define ___TypeBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__TypeBuilder;

typedef struct _TypeBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TypeBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TypeBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TypeBuilder * This);

    HRESULT ( __stdcall *GetTypeInfoCount )( 
        _TypeBuilder * This,
         unsigned long *pcTInfo);

    HRESULT ( __stdcall *GetTypeInfo )( 
        _TypeBuilder * This,
         unsigned long iTInfo,
         unsigned long lcid,
         Int64 ppTInfo);

    HRESULT ( __stdcall *GetIDsOfNames )( 
        _TypeBuilder * This,
         Guid *riid,
         Int64 rgszNames,
         unsigned long cNames,
         unsigned long lcid,
         Int64 rgDispId);

    HRESULT ( __stdcall *Invoke )( 
        _TypeBuilder * This,
         unsigned long dispIdMember,
         Guid *riid,
         unsigned long lcid,
         short wFlags,
         Int64 pDispParams,
         Int64 pVarResult,
         Int64 pExcepInfo,
         Int64 puArgErr);

    END_INTERFACE
} _TypeBuilderVtbl;

interface _TypeBuilder
{
    CONST_VTBL struct _TypeBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef __ICryptoTransform_INTERFACE_DEFINED__
#define __ICryptoTransform_INTERFACE_DEFINED__

EXTERN_C const IID IID_ICryptoTransform;

typedef struct ICryptoTransformVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ICryptoTransform * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ICryptoTransform * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ICryptoTransform * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ICryptoTransform * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ICryptoTransform * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ICryptoTransform * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ICryptoTransform * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_InputBlockSize )( 
        ICryptoTransform * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_OutputBlockSize )( 
        ICryptoTransform * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_CanTransformMultipleBlocks )( 
        ICryptoTransform * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_CanReuseTransform )( 
        ICryptoTransform * This,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *TransformBlock )( 
        ICryptoTransform * This,
         SAFEARRAY * inputBuffer,
         long inputOffset,
         long inputCount,
         SAFEARRAY * outputBuffer,
         long outputOffset,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *TransformFinalBlock )( 
        ICryptoTransform * This,
         SAFEARRAY * inputBuffer,
         long inputOffset,
         long inputCount,
         SAFEARRAY * *pRetVal);

    END_INTERFACE
} ICryptoTransformVtbl;

interface ICryptoTransform
{
    CONST_VTBL struct ICryptoTransformVtbl *lpVtbl;
};

#endif 	

#ifndef __ICspAsymmetricAlgorithm_INTERFACE_DEFINED__
#define __ICspAsymmetricAlgorithm_INTERFACE_DEFINED__

EXTERN_C const IID IID_ICspAsymmetricAlgorithm;

typedef struct ICspAsymmetricAlgorithmVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        ICspAsymmetricAlgorithm * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        ICspAsymmetricAlgorithm * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        ICspAsymmetricAlgorithm * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        ICspAsymmetricAlgorithm * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        ICspAsymmetricAlgorithm * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        ICspAsymmetricAlgorithm * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        ICspAsymmetricAlgorithm * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_CspKeyContainerInfo )( 
        ICspAsymmetricAlgorithm * This,
         _CspKeyContainerInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ExportCspBlob )( 
        ICspAsymmetricAlgorithm * This,
         VARIANT_BOOL includePrivateParameters,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ImportCspBlob )( 
        ICspAsymmetricAlgorithm * This,
         SAFEARRAY * rawData);

    END_INTERFACE
} ICspAsymmetricAlgorithmVtbl;

interface ICspAsymmetricAlgorithm
{
    CONST_VTBL struct ICspAsymmetricAlgorithmVtbl *lpVtbl;
};

#endif 	

#ifndef ___Object_INTERFACE_DEFINED__
#define ___Object_INTERFACE_DEFINED__

EXTERN_C const IID IID__Object;

typedef struct _ObjectVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Object * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Object * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Object * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Object * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Object * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Object * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Object * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ToString )( 
        _Object * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Equals )( 
        _Object * This,
         VARIANT obj,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetHashCode )( 
        _Object * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetType )( 
        _Object * This,
         _Type **pRetVal);

    END_INTERFACE
} _ObjectVtbl;

interface _Object
{
    CONST_VTBL struct _ObjectVtbl *lpVtbl;
};

#endif 	

#ifndef ___Array_INTERFACE_DEFINED__
#define ___Array_INTERFACE_DEFINED__

EXTERN_C const IID IID__Array;

typedef struct _ArrayVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Array * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Array * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Array * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Array * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Array * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Array * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Array * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ArrayVtbl;

interface _Array
{
    CONST_VTBL struct _ArrayVtbl *lpVtbl;
};

#endif 	

#ifndef ___ValueType_INTERFACE_DEFINED__
#define ___ValueType_INTERFACE_DEFINED__

EXTERN_C const IID IID__ValueType;

typedef struct _ValueTypeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ValueType * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ValueType * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ValueType * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ValueType * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ValueType * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ValueType * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ValueType * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ValueTypeVtbl;

interface _ValueType
{
    CONST_VTBL struct _ValueTypeVtbl *lpVtbl;
};

#endif 	

#ifndef ___Enum_INTERFACE_DEFINED__
#define ___Enum_INTERFACE_DEFINED__

EXTERN_C const IID IID__Enum;

typedef struct _EnumVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Enum * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Enum * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Enum * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Enum * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Enum * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Enum * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Enum * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _EnumVtbl;

interface _Enum
{
    CONST_VTBL struct _EnumVtbl *lpVtbl;
};

#endif 	

#ifndef ___String_INTERFACE_DEFINED__
#define ___String_INTERFACE_DEFINED__

EXTERN_C const IID IID__String;

typedef struct _StringVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _String * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _String * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _String * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _String * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _String * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _String * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _String * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StringVtbl;

interface _String
{
    CONST_VTBL struct _StringVtbl *lpVtbl;
};

#endif 	

#ifndef ___StringComparer_INTERFACE_DEFINED__
#define ___StringComparer_INTERFACE_DEFINED__

EXTERN_C const IID IID__StringComparer;

typedef struct _StringComparerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _StringComparer * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _StringComparer * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _StringComparer * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _StringComparer * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _StringComparer * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _StringComparer * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _StringComparer * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StringComparerVtbl;

interface _StringComparer
{
    CONST_VTBL struct _StringComparerVtbl *lpVtbl;
};

#endif 	

#ifndef ___StringBuilder_INTERFACE_DEFINED__
#define ___StringBuilder_INTERFACE_DEFINED__

EXTERN_C const IID IID__StringBuilder;

typedef struct _StringBuilderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _StringBuilder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _StringBuilder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _StringBuilder * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _StringBuilder * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _StringBuilder * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _StringBuilder * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _StringBuilder * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StringBuilderVtbl;

interface _StringBuilder
{
    CONST_VTBL struct _StringBuilderVtbl *lpVtbl;
};

#endif 	

#ifndef ___SystemException_INTERFACE_DEFINED__
#define ___SystemException_INTERFACE_DEFINED__

EXTERN_C const IID IID__SystemException;

typedef struct _SystemExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SystemException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SystemException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SystemException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SystemException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SystemException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SystemException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SystemException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SystemExceptionVtbl;

interface _SystemException
{
    CONST_VTBL struct _SystemExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___OutOfMemoryException_INTERFACE_DEFINED__
#define ___OutOfMemoryException_INTERFACE_DEFINED__

EXTERN_C const IID IID__OutOfMemoryException;

typedef struct _OutOfMemoryExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _OutOfMemoryException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _OutOfMemoryException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _OutOfMemoryException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _OutOfMemoryException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _OutOfMemoryException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _OutOfMemoryException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _OutOfMemoryException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OutOfMemoryExceptionVtbl;

interface _OutOfMemoryException
{
    CONST_VTBL struct _OutOfMemoryExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___StackOverflowException_INTERFACE_DEFINED__
#define ___StackOverflowException_INTERFACE_DEFINED__

EXTERN_C const IID IID__StackOverflowException;

typedef struct _StackOverflowExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _StackOverflowException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _StackOverflowException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _StackOverflowException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _StackOverflowException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _StackOverflowException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _StackOverflowException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _StackOverflowException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StackOverflowExceptionVtbl;

interface _StackOverflowException
{
    CONST_VTBL struct _StackOverflowExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___DataMisalignedException_INTERFACE_DEFINED__
#define ___DataMisalignedException_INTERFACE_DEFINED__

EXTERN_C const IID IID__DataMisalignedException;

typedef struct _DataMisalignedExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DataMisalignedException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DataMisalignedException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DataMisalignedException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DataMisalignedException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DataMisalignedException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DataMisalignedException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DataMisalignedException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DataMisalignedExceptionVtbl;

interface _DataMisalignedException
{
    CONST_VTBL struct _DataMisalignedExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ExecutionEngineException_INTERFACE_DEFINED__
#define ___ExecutionEngineException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ExecutionEngineException;

typedef struct _ExecutionEngineExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ExecutionEngineException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ExecutionEngineException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ExecutionEngineException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ExecutionEngineException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ExecutionEngineException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ExecutionEngineException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ExecutionEngineException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ExecutionEngineExceptionVtbl;

interface _ExecutionEngineException
{
    CONST_VTBL struct _ExecutionEngineExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___Delegate_INTERFACE_DEFINED__
#define ___Delegate_INTERFACE_DEFINED__

EXTERN_C const IID IID__Delegate;

typedef struct _DelegateVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Delegate * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Delegate * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Delegate * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Delegate * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Delegate * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Delegate * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Delegate * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ToString )( 
        _Delegate * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Equals )( 
        _Delegate * This,
         VARIANT obj,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetHashCode )( 
        _Delegate * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetType )( 
        _Delegate * This,
         _Type **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetInvocationList )( 
        _Delegate * This,
         SAFEARRAY * *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Clone )( 
        _Delegate * This,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetObjectData )( 
        _Delegate * This,
         _SerializationInfo *info,
         StreamingContext Context);

     HRESULT ( STDMETHODCALLTYPE *DynamicInvoke )( 
        _Delegate * This,
         SAFEARRAY * args,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Method )( 
        _Delegate * This,
         _MethodInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *get_Target )( 
        _Delegate * This,
         VARIANT *pRetVal);

    END_INTERFACE
} _DelegateVtbl;

interface _Delegate
{
    CONST_VTBL struct _DelegateVtbl *lpVtbl;
};

#endif 	

#ifndef ___MulticastDelegate_INTERFACE_DEFINED__
#define ___MulticastDelegate_INTERFACE_DEFINED__

EXTERN_C const IID IID__MulticastDelegate;

typedef struct _MulticastDelegateVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MulticastDelegate * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MulticastDelegate * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MulticastDelegate * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MulticastDelegate * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MulticastDelegate * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MulticastDelegate * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MulticastDelegate * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MulticastDelegateVtbl;

interface _MulticastDelegate
{
    CONST_VTBL struct _MulticastDelegateVtbl *lpVtbl;
};

#endif 	

#ifndef ___MemberAccessException_INTERFACE_DEFINED__
#define ___MemberAccessException_INTERFACE_DEFINED__

EXTERN_C const IID IID__MemberAccessException;

typedef struct _MemberAccessExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MemberAccessException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MemberAccessException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MemberAccessException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MemberAccessException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MemberAccessException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MemberAccessException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MemberAccessException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MemberAccessExceptionVtbl;

interface _MemberAccessException
{
    CONST_VTBL struct _MemberAccessExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___AccessViolationException_INTERFACE_DEFINED__
#define ___AccessViolationException_INTERFACE_DEFINED__

EXTERN_C const IID IID__AccessViolationException;

typedef struct _AccessViolationExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AccessViolationException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AccessViolationException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AccessViolationException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AccessViolationException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AccessViolationException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AccessViolationException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AccessViolationException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AccessViolationExceptionVtbl;

interface _AccessViolationException
{
    CONST_VTBL struct _AccessViolationExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ApplicationActivator_INTERFACE_DEFINED__
#define ___ApplicationActivator_INTERFACE_DEFINED__

EXTERN_C const IID IID__ApplicationActivator;

typedef struct _ApplicationActivatorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ApplicationActivator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ApplicationActivator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ApplicationActivator * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ApplicationActivator * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ApplicationActivator * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ApplicationActivator * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ApplicationActivator * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ApplicationActivatorVtbl;

interface _ApplicationActivator
{
    CONST_VTBL struct _ApplicationActivatorVtbl *lpVtbl;
};

#endif 	

#ifndef ___ApplicationException_INTERFACE_DEFINED__
#define ___ApplicationException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ApplicationException;

typedef struct _ApplicationExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ApplicationException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ApplicationException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ApplicationException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ApplicationException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ApplicationException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ApplicationException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ApplicationException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ApplicationExceptionVtbl;

interface _ApplicationException
{
    CONST_VTBL struct _ApplicationExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___EventArgs_INTERFACE_DEFINED__
#define ___EventArgs_INTERFACE_DEFINED__

EXTERN_C const IID IID__EventArgs;

typedef struct _EventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _EventArgs * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _EventArgs * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _EventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _EventArgs * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _EventArgs * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _EventArgs * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _EventArgs * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _EventArgsVtbl;

interface _EventArgs
{
    CONST_VTBL struct _EventArgsVtbl *lpVtbl;
};

#endif 	

#ifndef ___ResolveEventArgs_INTERFACE_DEFINED__
#define ___ResolveEventArgs_INTERFACE_DEFINED__

EXTERN_C const IID IID__ResolveEventArgs;

typedef struct _ResolveEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ResolveEventArgs * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ResolveEventArgs * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ResolveEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ResolveEventArgs * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ResolveEventArgs * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ResolveEventArgs * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ResolveEventArgs * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ResolveEventArgsVtbl;

interface _ResolveEventArgs
{
    CONST_VTBL struct _ResolveEventArgsVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyLoadEventArgs_INTERFACE_DEFINED__
#define ___AssemblyLoadEventArgs_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyLoadEventArgs;

typedef struct _AssemblyLoadEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyLoadEventArgs * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyLoadEventArgs * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyLoadEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyLoadEventArgs * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyLoadEventArgs * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyLoadEventArgs * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyLoadEventArgs * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyLoadEventArgsVtbl;

interface _AssemblyLoadEventArgs
{
    CONST_VTBL struct _AssemblyLoadEventArgsVtbl *lpVtbl;
};

#endif 	

#ifndef ___ResolveEventHandler_INTERFACE_DEFINED__
#define ___ResolveEventHandler_INTERFACE_DEFINED__

EXTERN_C const IID IID__ResolveEventHandler;

typedef struct _ResolveEventHandlerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ResolveEventHandler * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ResolveEventHandler * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ResolveEventHandler * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ResolveEventHandler * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ResolveEventHandler * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ResolveEventHandler * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ResolveEventHandler * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ResolveEventHandlerVtbl;

interface _ResolveEventHandler
{
    CONST_VTBL struct _ResolveEventHandlerVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyLoadEventHandler_INTERFACE_DEFINED__
#define ___AssemblyLoadEventHandler_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyLoadEventHandler;

typedef struct _AssemblyLoadEventHandlerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyLoadEventHandler * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyLoadEventHandler * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyLoadEventHandler * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyLoadEventHandler * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyLoadEventHandler * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyLoadEventHandler * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyLoadEventHandler * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyLoadEventHandlerVtbl;

interface _AssemblyLoadEventHandler
{
    CONST_VTBL struct _AssemblyLoadEventHandlerVtbl *lpVtbl;
};

#endif 	

#ifndef ___AppDomainInitializer_INTERFACE_DEFINED__
#define ___AppDomainInitializer_INTERFACE_DEFINED__

EXTERN_C const IID IID__AppDomainInitializer;

typedef struct _AppDomainInitializerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AppDomainInitializer * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AppDomainInitializer * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AppDomainInitializer * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AppDomainInitializer * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AppDomainInitializer * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AppDomainInitializer * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AppDomainInitializer * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AppDomainInitializerVtbl;

interface _AppDomainInitializer
{
    CONST_VTBL struct _AppDomainInitializerVtbl *lpVtbl;
};

#endif 	

#ifndef ___MarshalByRefObject_INTERFACE_DEFINED__
#define ___MarshalByRefObject_INTERFACE_DEFINED__

EXTERN_C const IID IID__MarshalByRefObject;

typedef struct _MarshalByRefObjectVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MarshalByRefObject * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MarshalByRefObject * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MarshalByRefObject * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MarshalByRefObject * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MarshalByRefObject * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MarshalByRefObject * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MarshalByRefObject * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MarshalByRefObjectVtbl;

interface _MarshalByRefObject
{
    CONST_VTBL struct _MarshalByRefObjectVtbl *lpVtbl;
};

#endif 	

#ifndef ___CrossAppDomainDelegate_INTERFACE_DEFINED__
#define ___CrossAppDomainDelegate_INTERFACE_DEFINED__

EXTERN_C const IID IID__CrossAppDomainDelegate;

typedef struct _CrossAppDomainDelegateVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CrossAppDomainDelegate * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CrossAppDomainDelegate * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CrossAppDomainDelegate * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CrossAppDomainDelegate * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CrossAppDomainDelegate * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CrossAppDomainDelegate * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CrossAppDomainDelegate * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CrossAppDomainDelegateVtbl;

interface _CrossAppDomainDelegate
{
    CONST_VTBL struct _CrossAppDomainDelegateVtbl *lpVtbl;
};

#endif 	

#ifndef ___AppDomainManager_INTERFACE_DEFINED__
#define ___AppDomainManager_INTERFACE_DEFINED__

EXTERN_C const IID IID__AppDomainManager;

typedef struct _AppDomainManagerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AppDomainManager * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AppDomainManager * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AppDomainManager * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AppDomainManager * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AppDomainManager * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AppDomainManager * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AppDomainManager * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AppDomainManagerVtbl;

interface _AppDomainManager
{
    CONST_VTBL struct _AppDomainManagerVtbl *lpVtbl;
};

#endif 	

#ifndef ___LoaderOptimizationAttribute_INTERFACE_DEFINED__
#define ___LoaderOptimizationAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__LoaderOptimizationAttribute;

typedef struct _LoaderOptimizationAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _LoaderOptimizationAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _LoaderOptimizationAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _LoaderOptimizationAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _LoaderOptimizationAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _LoaderOptimizationAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _LoaderOptimizationAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _LoaderOptimizationAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _LoaderOptimizationAttributeVtbl;

interface _LoaderOptimizationAttribute
{
    CONST_VTBL struct _LoaderOptimizationAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AppDomainUnloadedException_INTERFACE_DEFINED__
#define ___AppDomainUnloadedException_INTERFACE_DEFINED__

EXTERN_C const IID IID__AppDomainUnloadedException;

typedef struct _AppDomainUnloadedExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AppDomainUnloadedException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AppDomainUnloadedException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AppDomainUnloadedException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AppDomainUnloadedException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AppDomainUnloadedException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AppDomainUnloadedException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AppDomainUnloadedException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AppDomainUnloadedExceptionVtbl;

interface _AppDomainUnloadedException
{
    CONST_VTBL struct _AppDomainUnloadedExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ActivationArguments_INTERFACE_DEFINED__
#define ___ActivationArguments_INTERFACE_DEFINED__

EXTERN_C const IID IID__ActivationArguments;

typedef struct _ActivationArgumentsVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ActivationArguments * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ActivationArguments * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ActivationArguments * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ActivationArguments * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ActivationArguments * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ActivationArguments * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ActivationArguments * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ActivationArgumentsVtbl;

interface _ActivationArguments
{
    CONST_VTBL struct _ActivationArgumentsVtbl *lpVtbl;
};

#endif 	

#ifndef ___ApplicationId_INTERFACE_DEFINED__
#define ___ApplicationId_INTERFACE_DEFINED__

EXTERN_C const IID IID__ApplicationId;

typedef struct _ApplicationIdVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ApplicationId * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ApplicationId * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ApplicationId * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ApplicationId * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ApplicationId * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ApplicationId * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ApplicationId * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ApplicationIdVtbl;

interface _ApplicationId
{
    CONST_VTBL struct _ApplicationIdVtbl *lpVtbl;
};

#endif 	

#ifndef ___ArgumentException_INTERFACE_DEFINED__
#define ___ArgumentException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ArgumentException;

typedef struct _ArgumentExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ArgumentException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ArgumentException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ArgumentException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ArgumentException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ArgumentException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ArgumentException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ArgumentException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ArgumentExceptionVtbl;

interface _ArgumentException
{
    CONST_VTBL struct _ArgumentExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ArgumentNullException_INTERFACE_DEFINED__
#define ___ArgumentNullException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ArgumentNullException;

typedef struct _ArgumentNullExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ArgumentNullException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ArgumentNullException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ArgumentNullException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ArgumentNullException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ArgumentNullException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ArgumentNullException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ArgumentNullException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ArgumentNullExceptionVtbl;

interface _ArgumentNullException
{
    CONST_VTBL struct _ArgumentNullExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ArgumentOutOfRangeException_INTERFACE_DEFINED__
#define ___ArgumentOutOfRangeException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ArgumentOutOfRangeException;

typedef struct _ArgumentOutOfRangeExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ArgumentOutOfRangeException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ArgumentOutOfRangeException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ArgumentOutOfRangeException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ArgumentOutOfRangeException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ArgumentOutOfRangeException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ArgumentOutOfRangeException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ArgumentOutOfRangeException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ArgumentOutOfRangeExceptionVtbl;

interface _ArgumentOutOfRangeException
{
    CONST_VTBL struct _ArgumentOutOfRangeExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ArithmeticException_INTERFACE_DEFINED__
#define ___ArithmeticException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ArithmeticException;

typedef struct _ArithmeticExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ArithmeticException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ArithmeticException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ArithmeticException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ArithmeticException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ArithmeticException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ArithmeticException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ArithmeticException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ArithmeticExceptionVtbl;

interface _ArithmeticException
{
    CONST_VTBL struct _ArithmeticExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ArrayTypeMismatchException_INTERFACE_DEFINED__
#define ___ArrayTypeMismatchException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ArrayTypeMismatchException;

typedef struct _ArrayTypeMismatchExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ArrayTypeMismatchException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ArrayTypeMismatchException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ArrayTypeMismatchException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ArrayTypeMismatchException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ArrayTypeMismatchException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ArrayTypeMismatchException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ArrayTypeMismatchException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ArrayTypeMismatchExceptionVtbl;

interface _ArrayTypeMismatchException
{
    CONST_VTBL struct _ArrayTypeMismatchExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___AsyncCallback_INTERFACE_DEFINED__
#define ___AsyncCallback_INTERFACE_DEFINED__

EXTERN_C const IID IID__AsyncCallback;

typedef struct _AsyncCallbackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AsyncCallback * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AsyncCallback * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AsyncCallback * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AsyncCallback * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AsyncCallback * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AsyncCallback * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AsyncCallback * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AsyncCallbackVtbl;

interface _AsyncCallback
{
    CONST_VTBL struct _AsyncCallbackVtbl *lpVtbl;
};

#endif 	

#ifndef ___AttributeUsageAttribute_INTERFACE_DEFINED__
#define ___AttributeUsageAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AttributeUsageAttribute;

typedef struct _AttributeUsageAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AttributeUsageAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AttributeUsageAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AttributeUsageAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AttributeUsageAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AttributeUsageAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AttributeUsageAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AttributeUsageAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AttributeUsageAttributeVtbl;

interface _AttributeUsageAttribute
{
    CONST_VTBL struct _AttributeUsageAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___BadImageFormatException_INTERFACE_DEFINED__
#define ___BadImageFormatException_INTERFACE_DEFINED__

EXTERN_C const IID IID__BadImageFormatException;

typedef struct _BadImageFormatExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _BadImageFormatException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _BadImageFormatException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _BadImageFormatException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _BadImageFormatException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _BadImageFormatException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _BadImageFormatException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _BadImageFormatException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _BadImageFormatExceptionVtbl;

interface _BadImageFormatException
{
    CONST_VTBL struct _BadImageFormatExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___Buffer_INTERFACE_DEFINED__
#define ___Buffer_INTERFACE_DEFINED__

EXTERN_C const IID IID__Buffer;

typedef struct _BufferVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Buffer * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Buffer * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Buffer * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Buffer * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Buffer * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Buffer * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Buffer * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _BufferVtbl;

interface _Buffer
{
    CONST_VTBL struct _BufferVtbl *lpVtbl;
};

#endif 	

#ifndef ___CannotUnloadAppDomainException_INTERFACE_DEFINED__
#define ___CannotUnloadAppDomainException_INTERFACE_DEFINED__

EXTERN_C const IID IID__CannotUnloadAppDomainException;

typedef struct _CannotUnloadAppDomainExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CannotUnloadAppDomainException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CannotUnloadAppDomainException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CannotUnloadAppDomainException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CannotUnloadAppDomainException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CannotUnloadAppDomainException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CannotUnloadAppDomainException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CannotUnloadAppDomainException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CannotUnloadAppDomainExceptionVtbl;

interface _CannotUnloadAppDomainException
{
    CONST_VTBL struct _CannotUnloadAppDomainExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___CharEnumerator_INTERFACE_DEFINED__
#define ___CharEnumerator_INTERFACE_DEFINED__

EXTERN_C const IID IID__CharEnumerator;

typedef struct _CharEnumeratorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CharEnumerator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CharEnumerator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CharEnumerator * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CharEnumerator * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CharEnumerator * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CharEnumerator * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CharEnumerator * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CharEnumeratorVtbl;

interface _CharEnumerator
{
    CONST_VTBL struct _CharEnumeratorVtbl *lpVtbl;
};

#endif 	

#ifndef ___CLSCompliantAttribute_INTERFACE_DEFINED__
#define ___CLSCompliantAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__CLSCompliantAttribute;

typedef struct _CLSCompliantAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CLSCompliantAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CLSCompliantAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CLSCompliantAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CLSCompliantAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CLSCompliantAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CLSCompliantAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CLSCompliantAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CLSCompliantAttributeVtbl;

interface _CLSCompliantAttribute
{
    CONST_VTBL struct _CLSCompliantAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___TypeUnloadedException_INTERFACE_DEFINED__
#define ___TypeUnloadedException_INTERFACE_DEFINED__

EXTERN_C const IID IID__TypeUnloadedException;

typedef struct _TypeUnloadedExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TypeUnloadedException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TypeUnloadedException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TypeUnloadedException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TypeUnloadedException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TypeUnloadedException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TypeUnloadedException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TypeUnloadedException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TypeUnloadedExceptionVtbl;

interface _TypeUnloadedException
{
    CONST_VTBL struct _TypeUnloadedExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___CriticalFinalizerObject_INTERFACE_DEFINED__
#define ___CriticalFinalizerObject_INTERFACE_DEFINED__

EXTERN_C const IID IID__CriticalFinalizerObject;

typedef struct _CriticalFinalizerObjectVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CriticalFinalizerObject * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CriticalFinalizerObject * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CriticalFinalizerObject * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CriticalFinalizerObject * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CriticalFinalizerObject * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CriticalFinalizerObject * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CriticalFinalizerObject * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CriticalFinalizerObjectVtbl;

interface _CriticalFinalizerObject
{
    CONST_VTBL struct _CriticalFinalizerObjectVtbl *lpVtbl;
};

#endif 	

#ifndef ___ContextMarshalException_INTERFACE_DEFINED__
#define ___ContextMarshalException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ContextMarshalException;

typedef struct _ContextMarshalExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ContextMarshalException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ContextMarshalException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ContextMarshalException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ContextMarshalException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ContextMarshalException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ContextMarshalException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ContextMarshalException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ContextMarshalExceptionVtbl;

interface _ContextMarshalException
{
    CONST_VTBL struct _ContextMarshalExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ContextBoundObject_INTERFACE_DEFINED__
#define ___ContextBoundObject_INTERFACE_DEFINED__

EXTERN_C const IID IID__ContextBoundObject;

typedef struct _ContextBoundObjectVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ContextBoundObject * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ContextBoundObject * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ContextBoundObject * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ContextBoundObject * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ContextBoundObject * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ContextBoundObject * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ContextBoundObject * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ContextBoundObjectVtbl;

interface _ContextBoundObject
{
    CONST_VTBL struct _ContextBoundObjectVtbl *lpVtbl;
};

#endif 	

#ifndef ___ContextStaticAttribute_INTERFACE_DEFINED__
#define ___ContextStaticAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ContextStaticAttribute;

typedef struct _ContextStaticAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ContextStaticAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ContextStaticAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ContextStaticAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ContextStaticAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ContextStaticAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ContextStaticAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ContextStaticAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ContextStaticAttributeVtbl;

interface _ContextStaticAttribute
{
    CONST_VTBL struct _ContextStaticAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___TimeZone_INTERFACE_DEFINED__
#define ___TimeZone_INTERFACE_DEFINED__

EXTERN_C const IID IID__TimeZone;

typedef struct _TimeZoneVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TimeZone * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TimeZone * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TimeZone * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TimeZone * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TimeZone * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TimeZone * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TimeZone * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TimeZoneVtbl;

interface _TimeZone
{
    CONST_VTBL struct _TimeZoneVtbl *lpVtbl;
};

#endif 	

#ifndef ___DBNull_INTERFACE_DEFINED__
#define ___DBNull_INTERFACE_DEFINED__

EXTERN_C const IID IID__DBNull;

typedef struct _DBNullVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DBNull * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DBNull * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DBNull * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DBNull * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DBNull * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DBNull * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DBNull * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DBNullVtbl;

interface _DBNull
{
    CONST_VTBL struct _DBNullVtbl *lpVtbl;
};

#endif 	

#ifndef ___Binder_INTERFACE_DEFINED__
#define ___Binder_INTERFACE_DEFINED__

EXTERN_C const IID IID__Binder;

typedef struct _BinderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Binder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Binder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Binder * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Binder * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Binder * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Binder * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Binder * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

     HRESULT ( STDMETHODCALLTYPE *get_ToString )( 
        _Binder * This,
         BSTR *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *Equals )( 
        _Binder * This,
         VARIANT obj,
         VARIANT_BOOL *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetHashCode )( 
        _Binder * This,
         long *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *GetType )( 
        _Binder * This,
         _Type **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *BindToMethod )( 
        _Binder * This,
         BindingFlags bindingAttr,
         SAFEARRAY * match,
         SAFEARRAY * *args,
         SAFEARRAY * modifiers,
         _CultureInfo *culture,
         SAFEARRAY * names,
         VARIANT *state,
         _MethodBase **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *BindToField )( 
        _Binder * This,
         BindingFlags bindingAttr,
         SAFEARRAY * match,
         VARIANT value,
         _CultureInfo *culture,
         _FieldInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *SelectMethod )( 
        _Binder * This,
         BindingFlags bindingAttr,
         SAFEARRAY * match,
         SAFEARRAY * types,
         SAFEARRAY * modifiers,
         _MethodBase **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *SelectProperty )( 
        _Binder * This,
         BindingFlags bindingAttr,
         SAFEARRAY * match,
         _Type *returnType,
         SAFEARRAY * indexes,
         SAFEARRAY * modifiers,
         _PropertyInfo **pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ChangeType )( 
        _Binder * This,
         VARIANT value,
         _Type *Type,
         _CultureInfo *culture,
         VARIANT *pRetVal);

     HRESULT ( STDMETHODCALLTYPE *ReorderArgumentArray )( 
        _Binder * This,
         SAFEARRAY * *args,
         VARIANT state);

    END_INTERFACE
} _BinderVtbl;

interface _Binder
{
    CONST_VTBL struct _BinderVtbl *lpVtbl;
};

#endif 	

#ifndef ___DivideByZeroException_INTERFACE_DEFINED__
#define ___DivideByZeroException_INTERFACE_DEFINED__

EXTERN_C const IID IID__DivideByZeroException;

typedef struct _DivideByZeroExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DivideByZeroException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DivideByZeroException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DivideByZeroException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DivideByZeroException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DivideByZeroException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DivideByZeroException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DivideByZeroException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DivideByZeroExceptionVtbl;

interface _DivideByZeroException
{
    CONST_VTBL struct _DivideByZeroExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___DuplicateWaitObjectException_INTERFACE_DEFINED__
#define ___DuplicateWaitObjectException_INTERFACE_DEFINED__

EXTERN_C const IID IID__DuplicateWaitObjectException;

typedef struct _DuplicateWaitObjectExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DuplicateWaitObjectException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DuplicateWaitObjectException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DuplicateWaitObjectException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DuplicateWaitObjectException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DuplicateWaitObjectException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DuplicateWaitObjectException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DuplicateWaitObjectException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DuplicateWaitObjectExceptionVtbl;

interface _DuplicateWaitObjectException
{
    CONST_VTBL struct _DuplicateWaitObjectExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___TypeLoadException_INTERFACE_DEFINED__
#define ___TypeLoadException_INTERFACE_DEFINED__

EXTERN_C const IID IID__TypeLoadException;

typedef struct _TypeLoadExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TypeLoadException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TypeLoadException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TypeLoadException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TypeLoadException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TypeLoadException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TypeLoadException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TypeLoadException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TypeLoadExceptionVtbl;

interface _TypeLoadException
{
    CONST_VTBL struct _TypeLoadExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___EntryPointNotFoundException_INTERFACE_DEFINED__
#define ___EntryPointNotFoundException_INTERFACE_DEFINED__

EXTERN_C const IID IID__EntryPointNotFoundException;

typedef struct _EntryPointNotFoundExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _EntryPointNotFoundException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _EntryPointNotFoundException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _EntryPointNotFoundException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _EntryPointNotFoundException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _EntryPointNotFoundException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _EntryPointNotFoundException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _EntryPointNotFoundException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _EntryPointNotFoundExceptionVtbl;

interface _EntryPointNotFoundException
{
    CONST_VTBL struct _EntryPointNotFoundExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___DllNotFoundException_INTERFACE_DEFINED__
#define ___DllNotFoundException_INTERFACE_DEFINED__

EXTERN_C const IID IID__DllNotFoundException;

typedef struct _DllNotFoundExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DllNotFoundException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DllNotFoundException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DllNotFoundException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DllNotFoundException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DllNotFoundException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DllNotFoundException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DllNotFoundException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DllNotFoundExceptionVtbl;

interface _DllNotFoundException
{
    CONST_VTBL struct _DllNotFoundExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___Environment_INTERFACE_DEFINED__
#define ___Environment_INTERFACE_DEFINED__

EXTERN_C const IID IID__Environment;

typedef struct _EnvironmentVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Environment * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Environment * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Environment * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Environment * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Environment * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Environment * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Environment * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _EnvironmentVtbl;

interface _Environment
{
    CONST_VTBL struct _EnvironmentVtbl *lpVtbl;
};

#endif 	

#ifndef ___EventHandler_INTERFACE_DEFINED__
#define ___EventHandler_INTERFACE_DEFINED__

EXTERN_C const IID IID__EventHandler;

typedef struct _EventHandlerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _EventHandler * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _EventHandler * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _EventHandler * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _EventHandler * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _EventHandler * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _EventHandler * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _EventHandler * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _EventHandlerVtbl;

interface _EventHandler
{
    CONST_VTBL struct _EventHandlerVtbl *lpVtbl;
};

#endif 	

#ifndef ___FieldAccessException_INTERFACE_DEFINED__
#define ___FieldAccessException_INTERFACE_DEFINED__

EXTERN_C const IID IID__FieldAccessException;

typedef struct _FieldAccessExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FieldAccessException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FieldAccessException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FieldAccessException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FieldAccessException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FieldAccessException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FieldAccessException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FieldAccessException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FieldAccessExceptionVtbl;

interface _FieldAccessException
{
    CONST_VTBL struct _FieldAccessExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___FlagsAttribute_INTERFACE_DEFINED__
#define ___FlagsAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__FlagsAttribute;

typedef struct _FlagsAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FlagsAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FlagsAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FlagsAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FlagsAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FlagsAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FlagsAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FlagsAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FlagsAttributeVtbl;

interface _FlagsAttribute
{
    CONST_VTBL struct _FlagsAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___FormatException_INTERFACE_DEFINED__
#define ___FormatException_INTERFACE_DEFINED__

EXTERN_C const IID IID__FormatException;

typedef struct _FormatExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FormatException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FormatException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FormatException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FormatException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FormatException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FormatException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FormatException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FormatExceptionVtbl;

interface _FormatException
{
    CONST_VTBL struct _FormatExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___IndexOutOfRangeException_INTERFACE_DEFINED__
#define ___IndexOutOfRangeException_INTERFACE_DEFINED__

EXTERN_C const IID IID__IndexOutOfRangeException;

typedef struct _IndexOutOfRangeExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _IndexOutOfRangeException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _IndexOutOfRangeException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _IndexOutOfRangeException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _IndexOutOfRangeException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _IndexOutOfRangeException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _IndexOutOfRangeException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _IndexOutOfRangeException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _IndexOutOfRangeExceptionVtbl;

interface _IndexOutOfRangeException
{
    CONST_VTBL struct _IndexOutOfRangeExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___InvalidCastException_INTERFACE_DEFINED__
#define ___InvalidCastException_INTERFACE_DEFINED__

EXTERN_C const IID IID__InvalidCastException;

typedef struct _InvalidCastExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _InvalidCastException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _InvalidCastException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _InvalidCastException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _InvalidCastException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _InvalidCastException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _InvalidCastException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _InvalidCastException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _InvalidCastExceptionVtbl;

interface _InvalidCastException
{
    CONST_VTBL struct _InvalidCastExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___InvalidOperationException_INTERFACE_DEFINED__
#define ___InvalidOperationException_INTERFACE_DEFINED__

EXTERN_C const IID IID__InvalidOperationException;

typedef struct _InvalidOperationExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _InvalidOperationException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _InvalidOperationException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _InvalidOperationException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _InvalidOperationException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _InvalidOperationException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _InvalidOperationException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _InvalidOperationException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _InvalidOperationExceptionVtbl;

interface _InvalidOperationException
{
    CONST_VTBL struct _InvalidOperationExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___InvalidProgramException_INTERFACE_DEFINED__
#define ___InvalidProgramException_INTERFACE_DEFINED__

EXTERN_C const IID IID__InvalidProgramException;

typedef struct _InvalidProgramExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _InvalidProgramException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _InvalidProgramException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _InvalidProgramException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _InvalidProgramException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _InvalidProgramException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _InvalidProgramException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _InvalidProgramException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _InvalidProgramExceptionVtbl;

interface _InvalidProgramException
{
    CONST_VTBL struct _InvalidProgramExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___LocalDataStoreSlot_INTERFACE_DEFINED__
#define ___LocalDataStoreSlot_INTERFACE_DEFINED__

EXTERN_C const IID IID__LocalDataStoreSlot;

typedef struct _LocalDataStoreSlotVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _LocalDataStoreSlot * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _LocalDataStoreSlot * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _LocalDataStoreSlot * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _LocalDataStoreSlot * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _LocalDataStoreSlot * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _LocalDataStoreSlot * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _LocalDataStoreSlot * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _LocalDataStoreSlotVtbl;

interface _LocalDataStoreSlot
{
    CONST_VTBL struct _LocalDataStoreSlotVtbl *lpVtbl;
};

#endif 	

#ifndef ___MethodAccessException_INTERFACE_DEFINED__
#define ___MethodAccessException_INTERFACE_DEFINED__

EXTERN_C const IID IID__MethodAccessException;

typedef struct _MethodAccessExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MethodAccessException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MethodAccessException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MethodAccessException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MethodAccessException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MethodAccessException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MethodAccessException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MethodAccessException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MethodAccessExceptionVtbl;

interface _MethodAccessException
{
    CONST_VTBL struct _MethodAccessExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___MissingMemberException_INTERFACE_DEFINED__
#define ___MissingMemberException_INTERFACE_DEFINED__

EXTERN_C const IID IID__MissingMemberException;

typedef struct _MissingMemberExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MissingMemberException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MissingMemberException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MissingMemberException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MissingMemberException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MissingMemberException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MissingMemberException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MissingMemberException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MissingMemberExceptionVtbl;

interface _MissingMemberException
{
    CONST_VTBL struct _MissingMemberExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___MissingFieldException_INTERFACE_DEFINED__
#define ___MissingFieldException_INTERFACE_DEFINED__

EXTERN_C const IID IID__MissingFieldException;

typedef struct _MissingFieldExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MissingFieldException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MissingFieldException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MissingFieldException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MissingFieldException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MissingFieldException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MissingFieldException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MissingFieldException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MissingFieldExceptionVtbl;

interface _MissingFieldException
{
    CONST_VTBL struct _MissingFieldExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___MissingMethodException_INTERFACE_DEFINED__
#define ___MissingMethodException_INTERFACE_DEFINED__

EXTERN_C const IID IID__MissingMethodException;

typedef struct _MissingMethodExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MissingMethodException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MissingMethodException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MissingMethodException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MissingMethodException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MissingMethodException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MissingMethodException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MissingMethodException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MissingMethodExceptionVtbl;

interface _MissingMethodException
{
    CONST_VTBL struct _MissingMethodExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___MulticastNotSupportedException_INTERFACE_DEFINED__
#define ___MulticastNotSupportedException_INTERFACE_DEFINED__

EXTERN_C const IID IID__MulticastNotSupportedException;

typedef struct _MulticastNotSupportedExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MulticastNotSupportedException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MulticastNotSupportedException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MulticastNotSupportedException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MulticastNotSupportedException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MulticastNotSupportedException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MulticastNotSupportedException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MulticastNotSupportedException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MulticastNotSupportedExceptionVtbl;

interface _MulticastNotSupportedException
{
    CONST_VTBL struct _MulticastNotSupportedExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___NonSerializedAttribute_INTERFACE_DEFINED__
#define ___NonSerializedAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__NonSerializedAttribute;

typedef struct _NonSerializedAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _NonSerializedAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _NonSerializedAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _NonSerializedAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _NonSerializedAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _NonSerializedAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _NonSerializedAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _NonSerializedAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _NonSerializedAttributeVtbl;

interface _NonSerializedAttribute
{
    CONST_VTBL struct _NonSerializedAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___NotFiniteNumberException_INTERFACE_DEFINED__
#define ___NotFiniteNumberException_INTERFACE_DEFINED__

EXTERN_C const IID IID__NotFiniteNumberException;

typedef struct _NotFiniteNumberExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _NotFiniteNumberException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _NotFiniteNumberException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _NotFiniteNumberException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _NotFiniteNumberException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _NotFiniteNumberException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _NotFiniteNumberException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _NotFiniteNumberException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _NotFiniteNumberExceptionVtbl;

interface _NotFiniteNumberException
{
    CONST_VTBL struct _NotFiniteNumberExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___NotImplementedException_INTERFACE_DEFINED__
#define ___NotImplementedException_INTERFACE_DEFINED__

EXTERN_C const IID IID__NotImplementedException;

typedef struct _NotImplementedExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _NotImplementedException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _NotImplementedException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _NotImplementedException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _NotImplementedException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _NotImplementedException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _NotImplementedException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _NotImplementedException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _NotImplementedExceptionVtbl;

interface _NotImplementedException
{
    CONST_VTBL struct _NotImplementedExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___NotSupportedException_INTERFACE_DEFINED__
#define ___NotSupportedException_INTERFACE_DEFINED__

EXTERN_C const IID IID__NotSupportedException;

typedef struct _NotSupportedExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _NotSupportedException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _NotSupportedException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _NotSupportedException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _NotSupportedException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _NotSupportedException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _NotSupportedException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _NotSupportedException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _NotSupportedExceptionVtbl;

interface _NotSupportedException
{
    CONST_VTBL struct _NotSupportedExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___NullReferenceException_INTERFACE_DEFINED__
#define ___NullReferenceException_INTERFACE_DEFINED__

EXTERN_C const IID IID__NullReferenceException;

typedef struct _NullReferenceExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _NullReferenceException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _NullReferenceException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _NullReferenceException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _NullReferenceException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _NullReferenceException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _NullReferenceException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _NullReferenceException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _NullReferenceExceptionVtbl;

interface _NullReferenceException
{
    CONST_VTBL struct _NullReferenceExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ObjectDisposedException_INTERFACE_DEFINED__
#define ___ObjectDisposedException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ObjectDisposedException;

typedef struct _ObjectDisposedExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ObjectDisposedException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ObjectDisposedException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ObjectDisposedException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ObjectDisposedException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ObjectDisposedException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ObjectDisposedException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ObjectDisposedException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ObjectDisposedExceptionVtbl;

interface _ObjectDisposedException
{
    CONST_VTBL struct _ObjectDisposedExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ObsoleteAttribute_INTERFACE_DEFINED__
#define ___ObsoleteAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ObsoleteAttribute;

typedef struct _ObsoleteAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ObsoleteAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ObsoleteAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ObsoleteAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ObsoleteAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ObsoleteAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ObsoleteAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ObsoleteAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ObsoleteAttributeVtbl;

interface _ObsoleteAttribute
{
    CONST_VTBL struct _ObsoleteAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___OperatingSystem_INTERFACE_DEFINED__
#define ___OperatingSystem_INTERFACE_DEFINED__

EXTERN_C const IID IID__OperatingSystem;

typedef struct _OperatingSystemVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _OperatingSystem * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _OperatingSystem * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _OperatingSystem * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _OperatingSystem * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _OperatingSystem * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _OperatingSystem * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _OperatingSystem * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OperatingSystemVtbl;

interface _OperatingSystem
{
    CONST_VTBL struct _OperatingSystemVtbl *lpVtbl;
};

#endif 	

#ifndef ___OperationCanceledException_INTERFACE_DEFINED__
#define ___OperationCanceledException_INTERFACE_DEFINED__

EXTERN_C const IID IID__OperationCanceledException;

typedef struct _OperationCanceledExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _OperationCanceledException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _OperationCanceledException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _OperationCanceledException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _OperationCanceledException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _OperationCanceledException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _OperationCanceledException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _OperationCanceledException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OperationCanceledExceptionVtbl;

interface _OperationCanceledException
{
    CONST_VTBL struct _OperationCanceledExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___OverflowException_INTERFACE_DEFINED__
#define ___OverflowException_INTERFACE_DEFINED__

EXTERN_C const IID IID__OverflowException;

typedef struct _OverflowExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _OverflowException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _OverflowException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _OverflowException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _OverflowException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _OverflowException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _OverflowException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _OverflowException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OverflowExceptionVtbl;

interface _OverflowException
{
    CONST_VTBL struct _OverflowExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ParamArrayAttribute_INTERFACE_DEFINED__
#define ___ParamArrayAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ParamArrayAttribute;

typedef struct _ParamArrayAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ParamArrayAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ParamArrayAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ParamArrayAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ParamArrayAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ParamArrayAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ParamArrayAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ParamArrayAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ParamArrayAttributeVtbl;

interface _ParamArrayAttribute
{
    CONST_VTBL struct _ParamArrayAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___PlatformNotSupportedException_INTERFACE_DEFINED__
#define ___PlatformNotSupportedException_INTERFACE_DEFINED__

EXTERN_C const IID IID__PlatformNotSupportedException;

typedef struct _PlatformNotSupportedExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _PlatformNotSupportedException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _PlatformNotSupportedException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _PlatformNotSupportedException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _PlatformNotSupportedException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _PlatformNotSupportedException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _PlatformNotSupportedException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _PlatformNotSupportedException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _PlatformNotSupportedExceptionVtbl;

interface _PlatformNotSupportedException
{
    CONST_VTBL struct _PlatformNotSupportedExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___Random_INTERFACE_DEFINED__
#define ___Random_INTERFACE_DEFINED__

EXTERN_C const IID IID__Random;

typedef struct _RandomVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Random * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Random * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Random * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Random * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Random * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Random * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Random * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _RandomVtbl;

interface _Random
{
    CONST_VTBL struct _RandomVtbl *lpVtbl;
};

#endif 	

#ifndef ___RankException_INTERFACE_DEFINED__
#define ___RankException_INTERFACE_DEFINED__

EXTERN_C const IID IID__RankException;

typedef struct _RankExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _RankException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _RankException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _RankException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _RankException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _RankException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _RankException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _RankException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _RankExceptionVtbl;

interface _RankException
{
    CONST_VTBL struct _RankExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___SerializableAttribute_INTERFACE_DEFINED__
#define ___SerializableAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__SerializableAttribute;

typedef struct _SerializableAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SerializableAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SerializableAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SerializableAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SerializableAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SerializableAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SerializableAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SerializableAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SerializableAttributeVtbl;

interface _SerializableAttribute
{
    CONST_VTBL struct _SerializableAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___TimeoutException_INTERFACE_DEFINED__
#define ___TimeoutException_INTERFACE_DEFINED__

EXTERN_C const IID IID__TimeoutException;

typedef struct _TimeoutExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TimeoutException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TimeoutException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TimeoutException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TimeoutException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TimeoutException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TimeoutException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TimeoutException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TimeoutExceptionVtbl;

interface _TimeoutException
{
    CONST_VTBL struct _TimeoutExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___TypeInitializationException_INTERFACE_DEFINED__
#define ___TypeInitializationException_INTERFACE_DEFINED__

EXTERN_C const IID IID__TypeInitializationException;

typedef struct _TypeInitializationExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TypeInitializationException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TypeInitializationException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TypeInitializationException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TypeInitializationException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TypeInitializationException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TypeInitializationException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TypeInitializationException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TypeInitializationExceptionVtbl;

interface _TypeInitializationException
{
    CONST_VTBL struct _TypeInitializationExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___UnauthorizedAccessException_INTERFACE_DEFINED__
#define ___UnauthorizedAccessException_INTERFACE_DEFINED__

EXTERN_C const IID IID__UnauthorizedAccessException;

typedef struct _UnauthorizedAccessExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _UnauthorizedAccessException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _UnauthorizedAccessException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _UnauthorizedAccessException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _UnauthorizedAccessException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _UnauthorizedAccessException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _UnauthorizedAccessException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _UnauthorizedAccessException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _UnauthorizedAccessExceptionVtbl;

interface _UnauthorizedAccessException
{
    CONST_VTBL struct _UnauthorizedAccessExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___UnhandledExceptionEventArgs_INTERFACE_DEFINED__
#define ___UnhandledExceptionEventArgs_INTERFACE_DEFINED__

EXTERN_C const IID IID__UnhandledExceptionEventArgs;

typedef struct _UnhandledExceptionEventArgsVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _UnhandledExceptionEventArgs * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _UnhandledExceptionEventArgs * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _UnhandledExceptionEventArgs * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _UnhandledExceptionEventArgs * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _UnhandledExceptionEventArgs * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _UnhandledExceptionEventArgs * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _UnhandledExceptionEventArgs * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _UnhandledExceptionEventArgsVtbl;

interface _UnhandledExceptionEventArgs
{
    CONST_VTBL struct _UnhandledExceptionEventArgsVtbl *lpVtbl;
};

#endif 	

#ifndef ___UnhandledExceptionEventHandler_INTERFACE_DEFINED__
#define ___UnhandledExceptionEventHandler_INTERFACE_DEFINED__

EXTERN_C const IID IID__UnhandledExceptionEventHandler;

typedef struct _UnhandledExceptionEventHandlerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _UnhandledExceptionEventHandler * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _UnhandledExceptionEventHandler * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _UnhandledExceptionEventHandler * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _UnhandledExceptionEventHandler * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _UnhandledExceptionEventHandler * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _UnhandledExceptionEventHandler * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _UnhandledExceptionEventHandler * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _UnhandledExceptionEventHandlerVtbl;

interface _UnhandledExceptionEventHandler
{
    CONST_VTBL struct _UnhandledExceptionEventHandlerVtbl *lpVtbl;
};

#endif 	

#ifndef ___Version_INTERFACE_DEFINED__
#define ___Version_INTERFACE_DEFINED__

EXTERN_C const IID IID__Version;

typedef struct _VersionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Version * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Version * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Version * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Version * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Version * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Version * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Version * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _VersionVtbl;

interface _Version
{
    CONST_VTBL struct _VersionVtbl *lpVtbl;
};

#endif 	

#ifndef ___WeakReference_INTERFACE_DEFINED__
#define ___WeakReference_INTERFACE_DEFINED__

EXTERN_C const IID IID__WeakReference;

typedef struct _WeakReferenceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _WeakReference * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _WeakReference * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _WeakReference * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _WeakReference * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _WeakReference * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _WeakReference * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _WeakReference * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _WeakReferenceVtbl;

interface _WeakReference
{
    CONST_VTBL struct _WeakReferenceVtbl *lpVtbl;
};

#endif 	

#ifndef ___WaitHandle_INTERFACE_DEFINED__
#define ___WaitHandle_INTERFACE_DEFINED__

EXTERN_C const IID IID__WaitHandle;

typedef struct _WaitHandleVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _WaitHandle * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _WaitHandle * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _WaitHandle * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _WaitHandle * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _WaitHandle * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _WaitHandle * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _WaitHandle * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _WaitHandleVtbl;

interface _WaitHandle
{
    CONST_VTBL struct _WaitHandleVtbl *lpVtbl;
};

#endif 	

#ifndef ___EventWaitHandle_INTERFACE_DEFINED__
#define ___EventWaitHandle_INTERFACE_DEFINED__

EXTERN_C const IID IID__EventWaitHandle;

typedef struct _EventWaitHandleVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _EventWaitHandle * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _EventWaitHandle * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _EventWaitHandle * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _EventWaitHandle * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _EventWaitHandle * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _EventWaitHandle * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _EventWaitHandle * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _EventWaitHandleVtbl;

interface _EventWaitHandle
{
    CONST_VTBL struct _EventWaitHandleVtbl *lpVtbl;
};

#endif 	

#ifndef ___AutoResetEvent_INTERFACE_DEFINED__
#define ___AutoResetEvent_INTERFACE_DEFINED__

EXTERN_C const IID IID__AutoResetEvent;

typedef struct _AutoResetEventVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AutoResetEvent * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AutoResetEvent * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AutoResetEvent * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AutoResetEvent * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AutoResetEvent * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AutoResetEvent * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AutoResetEvent * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AutoResetEventVtbl;

interface _AutoResetEvent
{
    CONST_VTBL struct _AutoResetEventVtbl *lpVtbl;
};

#endif 	

#ifndef ___ContextCallback_INTERFACE_DEFINED__
#define ___ContextCallback_INTERFACE_DEFINED__

EXTERN_C const IID IID__ContextCallback;

typedef struct _ContextCallbackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ContextCallback * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ContextCallback * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ContextCallback * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ContextCallback * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ContextCallback * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ContextCallback * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ContextCallback * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ContextCallbackVtbl;

interface _ContextCallback
{
    CONST_VTBL struct _ContextCallbackVtbl *lpVtbl;
};

#endif 	

#ifndef ___ManualResetEvent_INTERFACE_DEFINED__
#define ___ManualResetEvent_INTERFACE_DEFINED__

EXTERN_C const IID IID__ManualResetEvent;

typedef struct _ManualResetEventVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ManualResetEvent * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ManualResetEvent * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ManualResetEvent * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ManualResetEvent * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ManualResetEvent * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ManualResetEvent * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ManualResetEvent * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ManualResetEventVtbl;

interface _ManualResetEvent
{
    CONST_VTBL struct _ManualResetEventVtbl *lpVtbl;
};

#endif 	

#ifndef ___Monitor_INTERFACE_DEFINED__
#define ___Monitor_INTERFACE_DEFINED__

EXTERN_C const IID IID__Monitor;

typedef struct _MonitorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Monitor * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Monitor * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Monitor * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Monitor * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Monitor * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Monitor * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Monitor * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MonitorVtbl;

interface _Monitor
{
    CONST_VTBL struct _MonitorVtbl *lpVtbl;
};

#endif 	

#ifndef ___Mutex_INTERFACE_DEFINED__
#define ___Mutex_INTERFACE_DEFINED__

EXTERN_C const IID IID__Mutex;

typedef struct _MutexVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Mutex * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Mutex * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Mutex * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Mutex * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Mutex * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Mutex * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Mutex * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MutexVtbl;

interface _Mutex
{
    CONST_VTBL struct _MutexVtbl *lpVtbl;
};

#endif 	

#ifndef ___Overlapped_INTERFACE_DEFINED__
#define ___Overlapped_INTERFACE_DEFINED__

EXTERN_C const IID IID__Overlapped;

typedef struct _OverlappedVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Overlapped * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Overlapped * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Overlapped * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Overlapped * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Overlapped * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Overlapped * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Overlapped * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OverlappedVtbl;

interface _Overlapped
{
    CONST_VTBL struct _OverlappedVtbl *lpVtbl;
};

#endif 	

#ifndef ___ReaderWriterLock_INTERFACE_DEFINED__
#define ___ReaderWriterLock_INTERFACE_DEFINED__

EXTERN_C const IID IID__ReaderWriterLock;

typedef struct _ReaderWriterLockVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ReaderWriterLock * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ReaderWriterLock * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ReaderWriterLock * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ReaderWriterLock * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ReaderWriterLock * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ReaderWriterLock * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ReaderWriterLock * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ReaderWriterLockVtbl;

interface _ReaderWriterLock
{
    CONST_VTBL struct _ReaderWriterLockVtbl *lpVtbl;
};

#endif 	

#ifndef ___SynchronizationLockException_INTERFACE_DEFINED__
#define ___SynchronizationLockException_INTERFACE_DEFINED__

EXTERN_C const IID IID__SynchronizationLockException;

typedef struct _SynchronizationLockExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SynchronizationLockException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SynchronizationLockException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SynchronizationLockException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SynchronizationLockException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SynchronizationLockException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SynchronizationLockException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SynchronizationLockException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SynchronizationLockExceptionVtbl;

interface _SynchronizationLockException
{
    CONST_VTBL struct _SynchronizationLockExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ThreadAbortException_INTERFACE_DEFINED__
#define ___ThreadAbortException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ThreadAbortException;

typedef struct _ThreadAbortExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ThreadAbortException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ThreadAbortException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ThreadAbortException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ThreadAbortException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ThreadAbortException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ThreadAbortException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ThreadAbortException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ThreadAbortExceptionVtbl;

interface _ThreadAbortException
{
    CONST_VTBL struct _ThreadAbortExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ThreadInterruptedException_INTERFACE_DEFINED__
#define ___ThreadInterruptedException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ThreadInterruptedException;

typedef struct _ThreadInterruptedExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ThreadInterruptedException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ThreadInterruptedException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ThreadInterruptedException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ThreadInterruptedException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ThreadInterruptedException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ThreadInterruptedException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ThreadInterruptedException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ThreadInterruptedExceptionVtbl;

interface _ThreadInterruptedException
{
    CONST_VTBL struct _ThreadInterruptedExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___RegisteredWaitHandle_INTERFACE_DEFINED__
#define ___RegisteredWaitHandle_INTERFACE_DEFINED__

EXTERN_C const IID IID__RegisteredWaitHandle;

typedef struct _RegisteredWaitHandleVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _RegisteredWaitHandle * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _RegisteredWaitHandle * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _RegisteredWaitHandle * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _RegisteredWaitHandle * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _RegisteredWaitHandle * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _RegisteredWaitHandle * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _RegisteredWaitHandle * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _RegisteredWaitHandleVtbl;

interface _RegisteredWaitHandle
{
    CONST_VTBL struct _RegisteredWaitHandleVtbl *lpVtbl;
};

#endif 	

#ifndef ___WaitCallback_INTERFACE_DEFINED__
#define ___WaitCallback_INTERFACE_DEFINED__

EXTERN_C const IID IID__WaitCallback;

typedef struct _WaitCallbackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _WaitCallback * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _WaitCallback * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _WaitCallback * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _WaitCallback * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _WaitCallback * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _WaitCallback * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _WaitCallback * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _WaitCallbackVtbl;

interface _WaitCallback
{
    CONST_VTBL struct _WaitCallbackVtbl *lpVtbl;
};

#endif 	

#ifndef ___WaitOrTimerCallback_INTERFACE_DEFINED__
#define ___WaitOrTimerCallback_INTERFACE_DEFINED__

EXTERN_C const IID IID__WaitOrTimerCallback;

typedef struct _WaitOrTimerCallbackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _WaitOrTimerCallback * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _WaitOrTimerCallback * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _WaitOrTimerCallback * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _WaitOrTimerCallback * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _WaitOrTimerCallback * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _WaitOrTimerCallback * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _WaitOrTimerCallback * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _WaitOrTimerCallbackVtbl;

interface _WaitOrTimerCallback
{
    CONST_VTBL struct _WaitOrTimerCallbackVtbl *lpVtbl;
};

#endif 	

#ifndef ___IOCompletionCallback_INTERFACE_DEFINED__
#define ___IOCompletionCallback_INTERFACE_DEFINED__

EXTERN_C const IID IID__IOCompletionCallback;

typedef struct _IOCompletionCallbackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _IOCompletionCallback * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _IOCompletionCallback * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _IOCompletionCallback * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _IOCompletionCallback * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _IOCompletionCallback * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _IOCompletionCallback * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _IOCompletionCallback * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _IOCompletionCallbackVtbl;

interface _IOCompletionCallback
{
    CONST_VTBL struct _IOCompletionCallbackVtbl *lpVtbl;
};

#endif 	

#ifndef ___ThreadStart_INTERFACE_DEFINED__
#define ___ThreadStart_INTERFACE_DEFINED__

EXTERN_C const IID IID__ThreadStart;

typedef struct _ThreadStartVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ThreadStart * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ThreadStart * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ThreadStart * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ThreadStart * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ThreadStart * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ThreadStart * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ThreadStart * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ThreadStartVtbl;

interface _ThreadStart
{
    CONST_VTBL struct _ThreadStartVtbl *lpVtbl;
};

#endif 	

#ifndef ___ThreadStateException_INTERFACE_DEFINED__
#define ___ThreadStateException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ThreadStateException;

typedef struct _ThreadStateExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ThreadStateException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ThreadStateException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ThreadStateException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ThreadStateException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ThreadStateException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ThreadStateException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ThreadStateException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ThreadStateExceptionVtbl;

interface _ThreadStateException
{
    CONST_VTBL struct _ThreadStateExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ThreadStaticAttribute_INTERFACE_DEFINED__
#define ___ThreadStaticAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ThreadStaticAttribute;

typedef struct _ThreadStaticAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ThreadStaticAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ThreadStaticAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ThreadStaticAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ThreadStaticAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ThreadStaticAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ThreadStaticAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ThreadStaticAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ThreadStaticAttributeVtbl;

interface _ThreadStaticAttribute
{
    CONST_VTBL struct _ThreadStaticAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___Timeout_INTERFACE_DEFINED__
#define ___Timeout_INTERFACE_DEFINED__

EXTERN_C const IID IID__Timeout;

typedef struct _TimeoutVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Timeout * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Timeout * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Timeout * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Timeout * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Timeout * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Timeout * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Timeout * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TimeoutVtbl;

interface _Timeout
{
    CONST_VTBL struct _TimeoutVtbl *lpVtbl;
};

#endif 	

#ifndef ___TimerCallback_INTERFACE_DEFINED__
#define ___TimerCallback_INTERFACE_DEFINED__

EXTERN_C const IID IID__TimerCallback;

typedef struct _TimerCallbackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TimerCallback * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TimerCallback * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TimerCallback * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TimerCallback * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TimerCallback * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TimerCallback * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TimerCallback * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TimerCallbackVtbl;

interface _TimerCallback
{
    CONST_VTBL struct _TimerCallbackVtbl *lpVtbl;
};

#endif 	

#ifndef ___Timer_INTERFACE_DEFINED__
#define ___Timer_INTERFACE_DEFINED__

EXTERN_C const IID IID__Timer;

typedef struct _TimerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Timer * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Timer * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Timer * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Timer * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Timer * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Timer * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Timer * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TimerVtbl;

interface _Timer
{
    CONST_VTBL struct _TimerVtbl *lpVtbl;
};

#endif 	

#ifndef ___STAThreadAttribute_INTERFACE_DEFINED__
#define ___STAThreadAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__STAThreadAttribute;

typedef struct _STAThreadAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _STAThreadAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _STAThreadAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _STAThreadAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _STAThreadAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _STAThreadAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _STAThreadAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _STAThreadAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _STAThreadAttributeVtbl;

interface _STAThreadAttribute
{
    CONST_VTBL struct _STAThreadAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___MTAThreadAttribute_INTERFACE_DEFINED__
#define ___MTAThreadAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__MTAThreadAttribute;

typedef struct _MTAThreadAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MTAThreadAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MTAThreadAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MTAThreadAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MTAThreadAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MTAThreadAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MTAThreadAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MTAThreadAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MTAThreadAttributeVtbl;

interface _MTAThreadAttribute
{
    CONST_VTBL struct _MTAThreadAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ArrayList_INTERFACE_DEFINED__
#define ___ArrayList_INTERFACE_DEFINED__

EXTERN_C const IID IID__ArrayList;

typedef struct _ArrayListVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ArrayList * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ArrayList * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ArrayList * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ArrayList * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ArrayList * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ArrayList * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ArrayList * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ArrayListVtbl;

interface _ArrayList
{
    CONST_VTBL struct _ArrayListVtbl *lpVtbl;
};

#endif 	

#ifndef ___BitArray_INTERFACE_DEFINED__
#define ___BitArray_INTERFACE_DEFINED__

EXTERN_C const IID IID__BitArray;

typedef struct _BitArrayVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _BitArray * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _BitArray * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _BitArray * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _BitArray * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _BitArray * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _BitArray * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _BitArray * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _BitArrayVtbl;

interface _BitArray
{
    CONST_VTBL struct _BitArrayVtbl *lpVtbl;
};

#endif 	

#ifndef ___CaseInsensitiveComparer_INTERFACE_DEFINED__
#define ___CaseInsensitiveComparer_INTERFACE_DEFINED__

EXTERN_C const IID IID__CaseInsensitiveComparer;

typedef struct _CaseInsensitiveComparerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CaseInsensitiveComparer * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CaseInsensitiveComparer * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CaseInsensitiveComparer * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CaseInsensitiveComparer * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CaseInsensitiveComparer * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CaseInsensitiveComparer * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CaseInsensitiveComparer * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CaseInsensitiveComparerVtbl;

interface _CaseInsensitiveComparer
{
    CONST_VTBL struct _CaseInsensitiveComparerVtbl *lpVtbl;
};

#endif 	

#ifndef ___CaseInsensitiveHashCodeProvider_INTERFACE_DEFINED__
#define ___CaseInsensitiveHashCodeProvider_INTERFACE_DEFINED__

EXTERN_C const IID IID__CaseInsensitiveHashCodeProvider;

typedef struct _CaseInsensitiveHashCodeProviderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CaseInsensitiveHashCodeProvider * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CaseInsensitiveHashCodeProvider * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CaseInsensitiveHashCodeProvider * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CaseInsensitiveHashCodeProvider * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CaseInsensitiveHashCodeProvider * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CaseInsensitiveHashCodeProvider * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CaseInsensitiveHashCodeProvider * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CaseInsensitiveHashCodeProviderVtbl;

interface _CaseInsensitiveHashCodeProvider
{
    CONST_VTBL struct _CaseInsensitiveHashCodeProviderVtbl *lpVtbl;
};

#endif 	

#ifndef ___CollectionBase_INTERFACE_DEFINED__
#define ___CollectionBase_INTERFACE_DEFINED__

EXTERN_C const IID IID__CollectionBase;

typedef struct _CollectionBaseVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CollectionBase * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CollectionBase * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CollectionBase * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CollectionBase * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CollectionBase * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CollectionBase * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CollectionBase * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CollectionBaseVtbl;

interface _CollectionBase
{
    CONST_VTBL struct _CollectionBaseVtbl *lpVtbl;
};

#endif 	

#ifndef ___Comparer_INTERFACE_DEFINED__
#define ___Comparer_INTERFACE_DEFINED__

EXTERN_C const IID IID__Comparer;

typedef struct _ComparerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Comparer * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Comparer * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Comparer * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Comparer * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Comparer * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Comparer * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Comparer * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ComparerVtbl;

interface _Comparer
{
    CONST_VTBL struct _ComparerVtbl *lpVtbl;
};

#endif 	

#ifndef ___DictionaryBase_INTERFACE_DEFINED__
#define ___DictionaryBase_INTERFACE_DEFINED__

EXTERN_C const IID IID__DictionaryBase;

typedef struct _DictionaryBaseVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DictionaryBase * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DictionaryBase * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DictionaryBase * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DictionaryBase * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DictionaryBase * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DictionaryBase * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DictionaryBase * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DictionaryBaseVtbl;

interface _DictionaryBase
{
    CONST_VTBL struct _DictionaryBaseVtbl *lpVtbl;
};

#endif 	

#ifndef ___Hashtable_INTERFACE_DEFINED__
#define ___Hashtable_INTERFACE_DEFINED__

EXTERN_C const IID IID__Hashtable;

typedef struct _HashtableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Hashtable * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Hashtable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Hashtable * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Hashtable * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Hashtable * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Hashtable * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Hashtable * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _HashtableVtbl;

interface _Hashtable
{
    CONST_VTBL struct _HashtableVtbl *lpVtbl;
};

#endif 	

#ifndef ___Queue_INTERFACE_DEFINED__
#define ___Queue_INTERFACE_DEFINED__

EXTERN_C const IID IID__Queue;

typedef struct _QueueVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Queue * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Queue * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Queue * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Queue * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Queue * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Queue * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Queue * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _QueueVtbl;

interface _Queue
{
    CONST_VTBL struct _QueueVtbl *lpVtbl;
};

#endif 	

#ifndef ___ReadOnlyCollectionBase_INTERFACE_DEFINED__
#define ___ReadOnlyCollectionBase_INTERFACE_DEFINED__

EXTERN_C const IID IID__ReadOnlyCollectionBase;

typedef struct _ReadOnlyCollectionBaseVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ReadOnlyCollectionBase * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ReadOnlyCollectionBase * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ReadOnlyCollectionBase * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ReadOnlyCollectionBase * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ReadOnlyCollectionBase * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ReadOnlyCollectionBase * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ReadOnlyCollectionBase * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ReadOnlyCollectionBaseVtbl;

interface _ReadOnlyCollectionBase
{
    CONST_VTBL struct _ReadOnlyCollectionBaseVtbl *lpVtbl;
};

#endif 	

#ifndef ___SortedList_INTERFACE_DEFINED__
#define ___SortedList_INTERFACE_DEFINED__

EXTERN_C const IID IID__SortedList;

typedef struct _SortedListVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SortedList * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SortedList * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SortedList * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SortedList * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SortedList * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SortedList * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SortedList * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SortedListVtbl;

interface _SortedList
{
    CONST_VTBL struct _SortedListVtbl *lpVtbl;
};

#endif 	

#ifndef ___Stack_INTERFACE_DEFINED__
#define ___Stack_INTERFACE_DEFINED__

EXTERN_C const IID IID__Stack;

typedef struct _StackVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Stack * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Stack * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Stack * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Stack * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Stack * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Stack * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Stack * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StackVtbl;

interface _Stack
{
    CONST_VTBL struct _StackVtbl *lpVtbl;
};

#endif 	

#ifndef ___Nullable_INTERFACE_DEFINED__
#define ___Nullable_INTERFACE_DEFINED__

EXTERN_C const IID IID__Nullable;

typedef struct _NullableVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Nullable * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Nullable * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Nullable * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Nullable * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Nullable * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Nullable * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Nullable * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _NullableVtbl;

interface _Nullable
{
    CONST_VTBL struct _NullableVtbl *lpVtbl;
};

#endif 	

#ifndef ___KeyNotFoundException_INTERFACE_DEFINED__
#define ___KeyNotFoundException_INTERFACE_DEFINED__

EXTERN_C const IID IID__KeyNotFoundException;

typedef struct _KeyNotFoundExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _KeyNotFoundException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _KeyNotFoundException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _KeyNotFoundException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _KeyNotFoundException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _KeyNotFoundException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _KeyNotFoundException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _KeyNotFoundException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _KeyNotFoundExceptionVtbl;

interface _KeyNotFoundException
{
    CONST_VTBL struct _KeyNotFoundExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ConditionalAttribute_INTERFACE_DEFINED__
#define ___ConditionalAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ConditionalAttribute;

typedef struct _ConditionalAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ConditionalAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ConditionalAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ConditionalAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ConditionalAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ConditionalAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ConditionalAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ConditionalAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ConditionalAttributeVtbl;

interface _ConditionalAttribute
{
    CONST_VTBL struct _ConditionalAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___Debugger_INTERFACE_DEFINED__
#define ___Debugger_INTERFACE_DEFINED__

EXTERN_C const IID IID__Debugger;

typedef struct _DebuggerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Debugger * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Debugger * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Debugger * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Debugger * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Debugger * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Debugger * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Debugger * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DebuggerVtbl;

interface _Debugger
{
    CONST_VTBL struct _DebuggerVtbl *lpVtbl;
};

#endif 	

#ifndef ___DebuggerStepThroughAttribute_INTERFACE_DEFINED__
#define ___DebuggerStepThroughAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DebuggerStepThroughAttribute;

typedef struct _DebuggerStepThroughAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DebuggerStepThroughAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DebuggerStepThroughAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DebuggerStepThroughAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DebuggerStepThroughAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DebuggerStepThroughAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DebuggerStepThroughAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DebuggerStepThroughAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DebuggerStepThroughAttributeVtbl;

interface _DebuggerStepThroughAttribute
{
    CONST_VTBL struct _DebuggerStepThroughAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___DebuggerStepperBoundaryAttribute_INTERFACE_DEFINED__
#define ___DebuggerStepperBoundaryAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DebuggerStepperBoundaryAttribute;

typedef struct _DebuggerStepperBoundaryAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DebuggerStepperBoundaryAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DebuggerStepperBoundaryAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DebuggerStepperBoundaryAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DebuggerStepperBoundaryAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DebuggerStepperBoundaryAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DebuggerStepperBoundaryAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DebuggerStepperBoundaryAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DebuggerStepperBoundaryAttributeVtbl;

interface _DebuggerStepperBoundaryAttribute
{
    CONST_VTBL struct _DebuggerStepperBoundaryAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___DebuggerHiddenAttribute_INTERFACE_DEFINED__
#define ___DebuggerHiddenAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DebuggerHiddenAttribute;

typedef struct _DebuggerHiddenAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DebuggerHiddenAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DebuggerHiddenAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DebuggerHiddenAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DebuggerHiddenAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DebuggerHiddenAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DebuggerHiddenAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DebuggerHiddenAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DebuggerHiddenAttributeVtbl;

interface _DebuggerHiddenAttribute
{
    CONST_VTBL struct _DebuggerHiddenAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___DebuggerNonUserCodeAttribute_INTERFACE_DEFINED__
#define ___DebuggerNonUserCodeAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DebuggerNonUserCodeAttribute;

typedef struct _DebuggerNonUserCodeAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DebuggerNonUserCodeAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DebuggerNonUserCodeAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DebuggerNonUserCodeAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DebuggerNonUserCodeAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DebuggerNonUserCodeAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DebuggerNonUserCodeAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DebuggerNonUserCodeAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DebuggerNonUserCodeAttributeVtbl;

interface _DebuggerNonUserCodeAttribute
{
    CONST_VTBL struct _DebuggerNonUserCodeAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___DebuggableAttribute_INTERFACE_DEFINED__
#define ___DebuggableAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DebuggableAttribute;

typedef struct _DebuggableAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DebuggableAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DebuggableAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DebuggableAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DebuggableAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DebuggableAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DebuggableAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DebuggableAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DebuggableAttributeVtbl;

interface _DebuggableAttribute
{
    CONST_VTBL struct _DebuggableAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___DebuggerBrowsableAttribute_INTERFACE_DEFINED__
#define ___DebuggerBrowsableAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DebuggerBrowsableAttribute;

typedef struct _DebuggerBrowsableAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DebuggerBrowsableAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DebuggerBrowsableAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DebuggerBrowsableAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DebuggerBrowsableAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DebuggerBrowsableAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DebuggerBrowsableAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DebuggerBrowsableAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DebuggerBrowsableAttributeVtbl;

interface _DebuggerBrowsableAttribute
{
    CONST_VTBL struct _DebuggerBrowsableAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___DebuggerTypeProxyAttribute_INTERFACE_DEFINED__
#define ___DebuggerTypeProxyAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DebuggerTypeProxyAttribute;

typedef struct _DebuggerTypeProxyAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DebuggerTypeProxyAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DebuggerTypeProxyAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DebuggerTypeProxyAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DebuggerTypeProxyAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DebuggerTypeProxyAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DebuggerTypeProxyAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DebuggerTypeProxyAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DebuggerTypeProxyAttributeVtbl;

interface _DebuggerTypeProxyAttribute
{
    CONST_VTBL struct _DebuggerTypeProxyAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___DebuggerDisplayAttribute_INTERFACE_DEFINED__
#define ___DebuggerDisplayAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DebuggerDisplayAttribute;

typedef struct _DebuggerDisplayAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DebuggerDisplayAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DebuggerDisplayAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DebuggerDisplayAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DebuggerDisplayAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DebuggerDisplayAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DebuggerDisplayAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DebuggerDisplayAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DebuggerDisplayAttributeVtbl;

interface _DebuggerDisplayAttribute
{
    CONST_VTBL struct _DebuggerDisplayAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___DebuggerVisualizerAttribute_INTERFACE_DEFINED__
#define ___DebuggerVisualizerAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DebuggerVisualizerAttribute;

typedef struct _DebuggerVisualizerAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DebuggerVisualizerAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DebuggerVisualizerAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DebuggerVisualizerAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DebuggerVisualizerAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DebuggerVisualizerAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DebuggerVisualizerAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DebuggerVisualizerAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DebuggerVisualizerAttributeVtbl;

interface _DebuggerVisualizerAttribute
{
    CONST_VTBL struct _DebuggerVisualizerAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___StackTrace_INTERFACE_DEFINED__
#define ___StackTrace_INTERFACE_DEFINED__

EXTERN_C const IID IID__StackTrace;

typedef struct _StackTraceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _StackTrace * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _StackTrace * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _StackTrace * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _StackTrace * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _StackTrace * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _StackTrace * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _StackTrace * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StackTraceVtbl;

interface _StackTrace
{
    CONST_VTBL struct _StackTraceVtbl *lpVtbl;
};

#endif 	

#ifndef ___StackFrame_INTERFACE_DEFINED__
#define ___StackFrame_INTERFACE_DEFINED__

EXTERN_C const IID IID__StackFrame;

typedef struct _StackFrameVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _StackFrame * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _StackFrame * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _StackFrame * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _StackFrame * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _StackFrame * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _StackFrame * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _StackFrame * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StackFrameVtbl;

interface _StackFrame
{
    CONST_VTBL struct _StackFrameVtbl *lpVtbl;
};

#endif 	

#ifndef ___SymDocumentType_INTERFACE_DEFINED__
#define ___SymDocumentType_INTERFACE_DEFINED__

EXTERN_C const IID IID__SymDocumentType;

typedef struct _SymDocumentTypeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SymDocumentType * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SymDocumentType * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SymDocumentType * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SymDocumentType * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SymDocumentType * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SymDocumentType * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SymDocumentType * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SymDocumentTypeVtbl;

interface _SymDocumentType
{
    CONST_VTBL struct _SymDocumentTypeVtbl *lpVtbl;
};

#endif 	

#ifndef ___SymLanguageType_INTERFACE_DEFINED__
#define ___SymLanguageType_INTERFACE_DEFINED__

EXTERN_C const IID IID__SymLanguageType;

typedef struct _SymLanguageTypeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SymLanguageType * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SymLanguageType * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SymLanguageType * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SymLanguageType * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SymLanguageType * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SymLanguageType * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SymLanguageType * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SymLanguageTypeVtbl;

interface _SymLanguageType
{
    CONST_VTBL struct _SymLanguageTypeVtbl *lpVtbl;
};

#endif 	

#ifndef ___SymLanguageVendor_INTERFACE_DEFINED__
#define ___SymLanguageVendor_INTERFACE_DEFINED__

EXTERN_C const IID IID__SymLanguageVendor;

typedef struct _SymLanguageVendorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SymLanguageVendor * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SymLanguageVendor * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SymLanguageVendor * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SymLanguageVendor * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SymLanguageVendor * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SymLanguageVendor * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SymLanguageVendor * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SymLanguageVendorVtbl;

interface _SymLanguageVendor
{
    CONST_VTBL struct _SymLanguageVendorVtbl *lpVtbl;
};

#endif 	

#ifndef ___AmbiguousMatchException_INTERFACE_DEFINED__
#define ___AmbiguousMatchException_INTERFACE_DEFINED__

EXTERN_C const IID IID__AmbiguousMatchException;

typedef struct _AmbiguousMatchExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AmbiguousMatchException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AmbiguousMatchException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AmbiguousMatchException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AmbiguousMatchException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AmbiguousMatchException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AmbiguousMatchException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AmbiguousMatchException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AmbiguousMatchExceptionVtbl;

interface _AmbiguousMatchException
{
    CONST_VTBL struct _AmbiguousMatchExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ModuleResolveEventHandler_INTERFACE_DEFINED__
#define ___ModuleResolveEventHandler_INTERFACE_DEFINED__

EXTERN_C const IID IID__ModuleResolveEventHandler;

typedef struct _ModuleResolveEventHandlerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ModuleResolveEventHandler * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ModuleResolveEventHandler * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ModuleResolveEventHandler * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ModuleResolveEventHandler * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ModuleResolveEventHandler * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ModuleResolveEventHandler * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ModuleResolveEventHandler * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ModuleResolveEventHandlerVtbl;

interface _ModuleResolveEventHandler
{
    CONST_VTBL struct _ModuleResolveEventHandlerVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyCopyrightAttribute_INTERFACE_DEFINED__
#define ___AssemblyCopyrightAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyCopyrightAttribute;

typedef struct _AssemblyCopyrightAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyCopyrightAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyCopyrightAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyCopyrightAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyCopyrightAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyCopyrightAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyCopyrightAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyCopyrightAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyCopyrightAttributeVtbl;

interface _AssemblyCopyrightAttribute
{
    CONST_VTBL struct _AssemblyCopyrightAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyTrademarkAttribute_INTERFACE_DEFINED__
#define ___AssemblyTrademarkAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyTrademarkAttribute;

typedef struct _AssemblyTrademarkAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyTrademarkAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyTrademarkAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyTrademarkAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyTrademarkAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyTrademarkAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyTrademarkAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyTrademarkAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyTrademarkAttributeVtbl;

interface _AssemblyTrademarkAttribute
{
    CONST_VTBL struct _AssemblyTrademarkAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyProductAttribute_INTERFACE_DEFINED__
#define ___AssemblyProductAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyProductAttribute;

typedef struct _AssemblyProductAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyProductAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyProductAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyProductAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyProductAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyProductAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyProductAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyProductAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyProductAttributeVtbl;

interface _AssemblyProductAttribute
{
    CONST_VTBL struct _AssemblyProductAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyCompanyAttribute_INTERFACE_DEFINED__
#define ___AssemblyCompanyAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyCompanyAttribute;

typedef struct _AssemblyCompanyAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyCompanyAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyCompanyAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyCompanyAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyCompanyAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyCompanyAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyCompanyAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyCompanyAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyCompanyAttributeVtbl;

interface _AssemblyCompanyAttribute
{
    CONST_VTBL struct _AssemblyCompanyAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyDescriptionAttribute_INTERFACE_DEFINED__
#define ___AssemblyDescriptionAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyDescriptionAttribute;

typedef struct _AssemblyDescriptionAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyDescriptionAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyDescriptionAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyDescriptionAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyDescriptionAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyDescriptionAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyDescriptionAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyDescriptionAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyDescriptionAttributeVtbl;

interface _AssemblyDescriptionAttribute
{
    CONST_VTBL struct _AssemblyDescriptionAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyTitleAttribute_INTERFACE_DEFINED__
#define ___AssemblyTitleAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyTitleAttribute;

typedef struct _AssemblyTitleAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyTitleAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyTitleAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyTitleAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyTitleAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyTitleAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyTitleAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyTitleAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyTitleAttributeVtbl;

interface _AssemblyTitleAttribute
{
    CONST_VTBL struct _AssemblyTitleAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyConfigurationAttribute_INTERFACE_DEFINED__
#define ___AssemblyConfigurationAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyConfigurationAttribute;

typedef struct _AssemblyConfigurationAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyConfigurationAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyConfigurationAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyConfigurationAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyConfigurationAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyConfigurationAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyConfigurationAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyConfigurationAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyConfigurationAttributeVtbl;

interface _AssemblyConfigurationAttribute
{
    CONST_VTBL struct _AssemblyConfigurationAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyDefaultAliasAttribute_INTERFACE_DEFINED__
#define ___AssemblyDefaultAliasAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyDefaultAliasAttribute;

typedef struct _AssemblyDefaultAliasAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyDefaultAliasAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyDefaultAliasAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyDefaultAliasAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyDefaultAliasAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyDefaultAliasAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyDefaultAliasAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyDefaultAliasAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyDefaultAliasAttributeVtbl;

interface _AssemblyDefaultAliasAttribute
{
    CONST_VTBL struct _AssemblyDefaultAliasAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyInformationalVersionAttribute_INTERFACE_DEFINED__
#define ___AssemblyInformationalVersionAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyInformationalVersionAttribute;

typedef struct _AssemblyInformationalVersionAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyInformationalVersionAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyInformationalVersionAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyInformationalVersionAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyInformationalVersionAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyInformationalVersionAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyInformationalVersionAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyInformationalVersionAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyInformationalVersionAttributeVtbl;

interface _AssemblyInformationalVersionAttribute
{
    CONST_VTBL struct _AssemblyInformationalVersionAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyFileVersionAttribute_INTERFACE_DEFINED__
#define ___AssemblyFileVersionAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyFileVersionAttribute;

typedef struct _AssemblyFileVersionAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyFileVersionAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyFileVersionAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyFileVersionAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyFileVersionAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyFileVersionAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyFileVersionAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyFileVersionAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyFileVersionAttributeVtbl;

interface _AssemblyFileVersionAttribute
{
    CONST_VTBL struct _AssemblyFileVersionAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyCultureAttribute_INTERFACE_DEFINED__
#define ___AssemblyCultureAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyCultureAttribute;

typedef struct _AssemblyCultureAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyCultureAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyCultureAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyCultureAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyCultureAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyCultureAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyCultureAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyCultureAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyCultureAttributeVtbl;

interface _AssemblyCultureAttribute
{
    CONST_VTBL struct _AssemblyCultureAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyVersionAttribute_INTERFACE_DEFINED__
#define ___AssemblyVersionAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyVersionAttribute;

typedef struct _AssemblyVersionAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyVersionAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyVersionAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyVersionAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyVersionAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyVersionAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyVersionAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyVersionAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyVersionAttributeVtbl;

interface _AssemblyVersionAttribute
{
    CONST_VTBL struct _AssemblyVersionAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyKeyFileAttribute_INTERFACE_DEFINED__
#define ___AssemblyKeyFileAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyKeyFileAttribute;

typedef struct _AssemblyKeyFileAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyKeyFileAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyKeyFileAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyKeyFileAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyKeyFileAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyKeyFileAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyKeyFileAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyKeyFileAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyKeyFileAttributeVtbl;

interface _AssemblyKeyFileAttribute
{
    CONST_VTBL struct _AssemblyKeyFileAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyDelaySignAttribute_INTERFACE_DEFINED__
#define ___AssemblyDelaySignAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyDelaySignAttribute;

typedef struct _AssemblyDelaySignAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyDelaySignAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyDelaySignAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyDelaySignAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyDelaySignAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyDelaySignAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyDelaySignAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyDelaySignAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyDelaySignAttributeVtbl;

interface _AssemblyDelaySignAttribute
{
    CONST_VTBL struct _AssemblyDelaySignAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyAlgorithmIdAttribute_INTERFACE_DEFINED__
#define ___AssemblyAlgorithmIdAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyAlgorithmIdAttribute;

typedef struct _AssemblyAlgorithmIdAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyAlgorithmIdAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyAlgorithmIdAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyAlgorithmIdAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyAlgorithmIdAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyAlgorithmIdAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyAlgorithmIdAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyAlgorithmIdAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyAlgorithmIdAttributeVtbl;

interface _AssemblyAlgorithmIdAttribute
{
    CONST_VTBL struct _AssemblyAlgorithmIdAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyFlagsAttribute_INTERFACE_DEFINED__
#define ___AssemblyFlagsAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyFlagsAttribute;

typedef struct _AssemblyFlagsAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyFlagsAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyFlagsAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyFlagsAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyFlagsAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyFlagsAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyFlagsAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyFlagsAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyFlagsAttributeVtbl;

interface _AssemblyFlagsAttribute
{
    CONST_VTBL struct _AssemblyFlagsAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyKeyNameAttribute_INTERFACE_DEFINED__
#define ___AssemblyKeyNameAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyKeyNameAttribute;

typedef struct _AssemblyKeyNameAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyKeyNameAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyKeyNameAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyKeyNameAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyKeyNameAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyKeyNameAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyKeyNameAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyKeyNameAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyKeyNameAttributeVtbl;

interface _AssemblyKeyNameAttribute
{
    CONST_VTBL struct _AssemblyKeyNameAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AssemblyNameProxy_INTERFACE_DEFINED__
#define ___AssemblyNameProxy_INTERFACE_DEFINED__

EXTERN_C const IID IID__AssemblyNameProxy;

typedef struct _AssemblyNameProxyVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AssemblyNameProxy * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AssemblyNameProxy * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AssemblyNameProxy * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AssemblyNameProxy * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AssemblyNameProxy * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AssemblyNameProxy * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AssemblyNameProxy * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AssemblyNameProxyVtbl;

interface _AssemblyNameProxy
{
    CONST_VTBL struct _AssemblyNameProxyVtbl *lpVtbl;
};

#endif 	

#ifndef ___CustomAttributeFormatException_INTERFACE_DEFINED__
#define ___CustomAttributeFormatException_INTERFACE_DEFINED__

EXTERN_C const IID IID__CustomAttributeFormatException;

typedef struct _CustomAttributeFormatExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CustomAttributeFormatException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CustomAttributeFormatException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CustomAttributeFormatException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CustomAttributeFormatException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CustomAttributeFormatException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CustomAttributeFormatException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CustomAttributeFormatException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CustomAttributeFormatExceptionVtbl;

interface _CustomAttributeFormatException
{
    CONST_VTBL struct _CustomAttributeFormatExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___CustomAttributeData_INTERFACE_DEFINED__
#define ___CustomAttributeData_INTERFACE_DEFINED__

EXTERN_C const IID IID__CustomAttributeData;

typedef struct _CustomAttributeDataVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CustomAttributeData * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CustomAttributeData * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CustomAttributeData * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CustomAttributeData * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CustomAttributeData * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CustomAttributeData * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CustomAttributeData * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CustomAttributeDataVtbl;

interface _CustomAttributeData
{
    CONST_VTBL struct _CustomAttributeDataVtbl *lpVtbl;
};

#endif 	

#ifndef ___DefaultMemberAttribute_INTERFACE_DEFINED__
#define ___DefaultMemberAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DefaultMemberAttribute;

typedef struct _DefaultMemberAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DefaultMemberAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DefaultMemberAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DefaultMemberAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DefaultMemberAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DefaultMemberAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DefaultMemberAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DefaultMemberAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DefaultMemberAttributeVtbl;

interface _DefaultMemberAttribute
{
    CONST_VTBL struct _DefaultMemberAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___InvalidFilterCriteriaException_INTERFACE_DEFINED__
#define ___InvalidFilterCriteriaException_INTERFACE_DEFINED__

EXTERN_C const IID IID__InvalidFilterCriteriaException;

typedef struct _InvalidFilterCriteriaExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _InvalidFilterCriteriaException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _InvalidFilterCriteriaException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _InvalidFilterCriteriaException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _InvalidFilterCriteriaException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _InvalidFilterCriteriaException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _InvalidFilterCriteriaException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _InvalidFilterCriteriaException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _InvalidFilterCriteriaExceptionVtbl;

interface _InvalidFilterCriteriaException
{
    CONST_VTBL struct _InvalidFilterCriteriaExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ManifestResourceInfo_INTERFACE_DEFINED__
#define ___ManifestResourceInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__ManifestResourceInfo;

typedef struct _ManifestResourceInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ManifestResourceInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ManifestResourceInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ManifestResourceInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ManifestResourceInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ManifestResourceInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ManifestResourceInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ManifestResourceInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ManifestResourceInfoVtbl;

interface _ManifestResourceInfo
{
    CONST_VTBL struct _ManifestResourceInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___MemberFilter_INTERFACE_DEFINED__
#define ___MemberFilter_INTERFACE_DEFINED__

EXTERN_C const IID IID__MemberFilter;

typedef struct _MemberFilterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MemberFilter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MemberFilter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MemberFilter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MemberFilter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MemberFilter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MemberFilter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MemberFilter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MemberFilterVtbl;

interface _MemberFilter
{
    CONST_VTBL struct _MemberFilterVtbl *lpVtbl;
};

#endif 	

#ifndef ___Missing_INTERFACE_DEFINED__
#define ___Missing_INTERFACE_DEFINED__

EXTERN_C const IID IID__Missing;

typedef struct _MissingVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Missing * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Missing * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Missing * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Missing * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Missing * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Missing * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Missing * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MissingVtbl;

interface _Missing
{
    CONST_VTBL struct _MissingVtbl *lpVtbl;
};

#endif 	

#ifndef ___ObfuscateAssemblyAttribute_INTERFACE_DEFINED__
#define ___ObfuscateAssemblyAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ObfuscateAssemblyAttribute;

typedef struct _ObfuscateAssemblyAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ObfuscateAssemblyAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ObfuscateAssemblyAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ObfuscateAssemblyAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ObfuscateAssemblyAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ObfuscateAssemblyAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ObfuscateAssemblyAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ObfuscateAssemblyAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ObfuscateAssemblyAttributeVtbl;

interface _ObfuscateAssemblyAttribute
{
    CONST_VTBL struct _ObfuscateAssemblyAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ObfuscationAttribute_INTERFACE_DEFINED__
#define ___ObfuscationAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ObfuscationAttribute;

typedef struct _ObfuscationAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ObfuscationAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ObfuscationAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ObfuscationAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ObfuscationAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ObfuscationAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ObfuscationAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ObfuscationAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ObfuscationAttributeVtbl;

interface _ObfuscationAttribute
{
    CONST_VTBL struct _ObfuscationAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ExceptionHandlingClause_INTERFACE_DEFINED__
#define ___ExceptionHandlingClause_INTERFACE_DEFINED__

EXTERN_C const IID IID__ExceptionHandlingClause;

typedef struct _ExceptionHandlingClauseVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ExceptionHandlingClause * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ExceptionHandlingClause * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ExceptionHandlingClause * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ExceptionHandlingClause * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ExceptionHandlingClause * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ExceptionHandlingClause * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ExceptionHandlingClause * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ExceptionHandlingClauseVtbl;

interface _ExceptionHandlingClause
{
    CONST_VTBL struct _ExceptionHandlingClauseVtbl *lpVtbl;
};

#endif 	

#ifndef ___MethodBody_INTERFACE_DEFINED__
#define ___MethodBody_INTERFACE_DEFINED__

EXTERN_C const IID IID__MethodBody;

typedef struct _MethodBodyVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MethodBody * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MethodBody * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MethodBody * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MethodBody * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MethodBody * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MethodBody * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MethodBody * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MethodBodyVtbl;

interface _MethodBody
{
    CONST_VTBL struct _MethodBodyVtbl *lpVtbl;
};

#endif 	

#ifndef ___LocalVariableInfo_INTERFACE_DEFINED__
#define ___LocalVariableInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__LocalVariableInfo;

typedef struct _LocalVariableInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _LocalVariableInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _LocalVariableInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _LocalVariableInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _LocalVariableInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _LocalVariableInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _LocalVariableInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _LocalVariableInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _LocalVariableInfoVtbl;

interface _LocalVariableInfo
{
    CONST_VTBL struct _LocalVariableInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___Pointer_INTERFACE_DEFINED__
#define ___Pointer_INTERFACE_DEFINED__

EXTERN_C const IID IID__Pointer;

typedef struct _PointerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Pointer * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Pointer * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Pointer * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Pointer * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Pointer * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Pointer * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Pointer * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _PointerVtbl;

interface _Pointer
{
    CONST_VTBL struct _PointerVtbl *lpVtbl;
};

#endif 	

#ifndef ___ReflectionTypeLoadException_INTERFACE_DEFINED__
#define ___ReflectionTypeLoadException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ReflectionTypeLoadException;

typedef struct _ReflectionTypeLoadExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ReflectionTypeLoadException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ReflectionTypeLoadException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ReflectionTypeLoadException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ReflectionTypeLoadException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ReflectionTypeLoadException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ReflectionTypeLoadException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ReflectionTypeLoadException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ReflectionTypeLoadExceptionVtbl;

interface _ReflectionTypeLoadException
{
    CONST_VTBL struct _ReflectionTypeLoadExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___StrongNameKeyPair_INTERFACE_DEFINED__
#define ___StrongNameKeyPair_INTERFACE_DEFINED__

EXTERN_C const IID IID__StrongNameKeyPair;

typedef struct _StrongNameKeyPairVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _StrongNameKeyPair * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _StrongNameKeyPair * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _StrongNameKeyPair * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _StrongNameKeyPair * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _StrongNameKeyPair * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _StrongNameKeyPair * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _StrongNameKeyPair * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StrongNameKeyPairVtbl;

interface _StrongNameKeyPair
{
    CONST_VTBL struct _StrongNameKeyPairVtbl *lpVtbl;
};

#endif 	

#ifndef ___TargetException_INTERFACE_DEFINED__
#define ___TargetException_INTERFACE_DEFINED__

EXTERN_C const IID IID__TargetException;

typedef struct _TargetExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TargetException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TargetException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TargetException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TargetException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TargetException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TargetException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TargetException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TargetExceptionVtbl;

interface _TargetException
{
    CONST_VTBL struct _TargetExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___TargetInvocationException_INTERFACE_DEFINED__
#define ___TargetInvocationException_INTERFACE_DEFINED__

EXTERN_C const IID IID__TargetInvocationException;

typedef struct _TargetInvocationExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TargetInvocationException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TargetInvocationException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TargetInvocationException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TargetInvocationException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TargetInvocationException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TargetInvocationException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TargetInvocationException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TargetInvocationExceptionVtbl;

interface _TargetInvocationException
{
    CONST_VTBL struct _TargetInvocationExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___TargetParameterCountException_INTERFACE_DEFINED__
#define ___TargetParameterCountException_INTERFACE_DEFINED__

EXTERN_C const IID IID__TargetParameterCountException;

typedef struct _TargetParameterCountExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TargetParameterCountException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TargetParameterCountException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TargetParameterCountException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TargetParameterCountException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TargetParameterCountException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TargetParameterCountException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TargetParameterCountException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TargetParameterCountExceptionVtbl;

interface _TargetParameterCountException
{
    CONST_VTBL struct _TargetParameterCountExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___TypeDelegator_INTERFACE_DEFINED__
#define ___TypeDelegator_INTERFACE_DEFINED__

EXTERN_C const IID IID__TypeDelegator;

typedef struct _TypeDelegatorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TypeDelegator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TypeDelegator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TypeDelegator * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TypeDelegator * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TypeDelegator * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TypeDelegator * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TypeDelegator * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TypeDelegatorVtbl;

interface _TypeDelegator
{
    CONST_VTBL struct _TypeDelegatorVtbl *lpVtbl;
};

#endif 	

#ifndef ___TypeFilter_INTERFACE_DEFINED__
#define ___TypeFilter_INTERFACE_DEFINED__

EXTERN_C const IID IID__TypeFilter;

typedef struct _TypeFilterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TypeFilter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TypeFilter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TypeFilter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TypeFilter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TypeFilter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TypeFilter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TypeFilter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TypeFilterVtbl;

interface _TypeFilter
{
    CONST_VTBL struct _TypeFilterVtbl *lpVtbl;
};

#endif 	

#ifndef ___Formatter_INTERFACE_DEFINED__
#define ___Formatter_INTERFACE_DEFINED__

EXTERN_C const IID IID__Formatter;

typedef struct _FormatterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Formatter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Formatter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Formatter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Formatter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Formatter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Formatter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Formatter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FormatterVtbl;

interface _Formatter
{
    CONST_VTBL struct _FormatterVtbl *lpVtbl;
};

#endif 	

#ifndef ___FormatterConverter_INTERFACE_DEFINED__
#define ___FormatterConverter_INTERFACE_DEFINED__

EXTERN_C const IID IID__FormatterConverter;

typedef struct _FormatterConverterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FormatterConverter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FormatterConverter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FormatterConverter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FormatterConverter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FormatterConverter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FormatterConverter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FormatterConverter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FormatterConverterVtbl;

interface _FormatterConverter
{
    CONST_VTBL struct _FormatterConverterVtbl *lpVtbl;
};

#endif 	

#ifndef ___FormatterServices_INTERFACE_DEFINED__
#define ___FormatterServices_INTERFACE_DEFINED__

EXTERN_C const IID IID__FormatterServices;

typedef struct _FormatterServicesVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FormatterServices * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FormatterServices * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FormatterServices * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FormatterServices * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FormatterServices * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FormatterServices * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FormatterServices * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FormatterServicesVtbl;

interface _FormatterServices
{
    CONST_VTBL struct _FormatterServicesVtbl *lpVtbl;
};

#endif 	

#ifndef ___ObjectIDGenerator_INTERFACE_DEFINED__
#define ___ObjectIDGenerator_INTERFACE_DEFINED__

EXTERN_C const IID IID__ObjectIDGenerator;

typedef struct _ObjectIDGeneratorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ObjectIDGenerator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ObjectIDGenerator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ObjectIDGenerator * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ObjectIDGenerator * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ObjectIDGenerator * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ObjectIDGenerator * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ObjectIDGenerator * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ObjectIDGeneratorVtbl;

interface _ObjectIDGenerator
{
    CONST_VTBL struct _ObjectIDGeneratorVtbl *lpVtbl;
};

#endif 	

#ifndef ___ObjectManager_INTERFACE_DEFINED__
#define ___ObjectManager_INTERFACE_DEFINED__

EXTERN_C const IID IID__ObjectManager;

typedef struct _ObjectManagerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ObjectManager * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ObjectManager * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ObjectManager * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ObjectManager * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ObjectManager * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ObjectManager * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ObjectManager * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ObjectManagerVtbl;

interface _ObjectManager
{
    CONST_VTBL struct _ObjectManagerVtbl *lpVtbl;
};

#endif 	

#ifndef ___OptionalFieldAttribute_INTERFACE_DEFINED__
#define ___OptionalFieldAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__OptionalFieldAttribute;

typedef struct _OptionalFieldAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _OptionalFieldAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _OptionalFieldAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _OptionalFieldAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _OptionalFieldAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _OptionalFieldAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _OptionalFieldAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _OptionalFieldAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OptionalFieldAttributeVtbl;

interface _OptionalFieldAttribute
{
    CONST_VTBL struct _OptionalFieldAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___OnSerializingAttribute_INTERFACE_DEFINED__
#define ___OnSerializingAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__OnSerializingAttribute;

typedef struct _OnSerializingAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _OnSerializingAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _OnSerializingAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _OnSerializingAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _OnSerializingAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _OnSerializingAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _OnSerializingAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _OnSerializingAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OnSerializingAttributeVtbl;

interface _OnSerializingAttribute
{
    CONST_VTBL struct _OnSerializingAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___OnSerializedAttribute_INTERFACE_DEFINED__
#define ___OnSerializedAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__OnSerializedAttribute;

typedef struct _OnSerializedAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _OnSerializedAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _OnSerializedAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _OnSerializedAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _OnSerializedAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _OnSerializedAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _OnSerializedAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _OnSerializedAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OnSerializedAttributeVtbl;

interface _OnSerializedAttribute
{
    CONST_VTBL struct _OnSerializedAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___OnDeserializingAttribute_INTERFACE_DEFINED__
#define ___OnDeserializingAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__OnDeserializingAttribute;

typedef struct _OnDeserializingAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _OnDeserializingAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _OnDeserializingAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _OnDeserializingAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _OnDeserializingAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _OnDeserializingAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _OnDeserializingAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _OnDeserializingAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OnDeserializingAttributeVtbl;

interface _OnDeserializingAttribute
{
    CONST_VTBL struct _OnDeserializingAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___OnDeserializedAttribute_INTERFACE_DEFINED__
#define ___OnDeserializedAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__OnDeserializedAttribute;

typedef struct _OnDeserializedAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _OnDeserializedAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _OnDeserializedAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _OnDeserializedAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _OnDeserializedAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _OnDeserializedAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _OnDeserializedAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _OnDeserializedAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OnDeserializedAttributeVtbl;

interface _OnDeserializedAttribute
{
    CONST_VTBL struct _OnDeserializedAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___SerializationBinder_INTERFACE_DEFINED__
#define ___SerializationBinder_INTERFACE_DEFINED__

EXTERN_C const IID IID__SerializationBinder;

typedef struct _SerializationBinderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SerializationBinder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SerializationBinder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SerializationBinder * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SerializationBinder * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SerializationBinder * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SerializationBinder * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SerializationBinder * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SerializationBinderVtbl;

interface _SerializationBinder
{
    CONST_VTBL struct _SerializationBinderVtbl *lpVtbl;
};

#endif 	

#ifndef ___SerializationInfo_INTERFACE_DEFINED__
#define ___SerializationInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__SerializationInfo;

typedef struct _SerializationInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SerializationInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SerializationInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SerializationInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SerializationInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SerializationInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SerializationInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SerializationInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SerializationInfoVtbl;

interface _SerializationInfo
{
    CONST_VTBL struct _SerializationInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___SerializationInfoEnumerator_INTERFACE_DEFINED__
#define ___SerializationInfoEnumerator_INTERFACE_DEFINED__

EXTERN_C const IID IID__SerializationInfoEnumerator;

typedef struct _SerializationInfoEnumeratorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SerializationInfoEnumerator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SerializationInfoEnumerator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SerializationInfoEnumerator * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SerializationInfoEnumerator * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SerializationInfoEnumerator * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SerializationInfoEnumerator * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SerializationInfoEnumerator * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SerializationInfoEnumeratorVtbl;

interface _SerializationInfoEnumerator
{
    CONST_VTBL struct _SerializationInfoEnumeratorVtbl *lpVtbl;
};

#endif 	

#ifndef ___SerializationException_INTERFACE_DEFINED__
#define ___SerializationException_INTERFACE_DEFINED__

EXTERN_C const IID IID__SerializationException;

typedef struct _SerializationExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SerializationException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SerializationException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SerializationException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SerializationException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SerializationException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SerializationException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SerializationException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SerializationExceptionVtbl;

interface _SerializationException
{
    CONST_VTBL struct _SerializationExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___SurrogateSelector_INTERFACE_DEFINED__
#define ___SurrogateSelector_INTERFACE_DEFINED__

EXTERN_C const IID IID__SurrogateSelector;

typedef struct _SurrogateSelectorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SurrogateSelector * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SurrogateSelector * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SurrogateSelector * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SurrogateSelector * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SurrogateSelector * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SurrogateSelector * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SurrogateSelector * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SurrogateSelectorVtbl;

interface _SurrogateSelector
{
    CONST_VTBL struct _SurrogateSelectorVtbl *lpVtbl;
};

#endif 	

#ifndef ___Calendar_INTERFACE_DEFINED__
#define ___Calendar_INTERFACE_DEFINED__

EXTERN_C const IID IID__Calendar;

typedef struct _CalendarVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Calendar * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Calendar * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Calendar * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Calendar * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Calendar * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Calendar * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Calendar * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CalendarVtbl;

interface _Calendar
{
    CONST_VTBL struct _CalendarVtbl *lpVtbl;
};

#endif 	

#ifndef ___EastAsianLunisolarCalendar_INTERFACE_DEFINED__
#define ___EastAsianLunisolarCalendar_INTERFACE_DEFINED__

EXTERN_C const IID IID__EastAsianLunisolarCalendar;

typedef struct _EastAsianLunisolarCalendarVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _EastAsianLunisolarCalendar * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _EastAsianLunisolarCalendar * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _EastAsianLunisolarCalendar * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _EastAsianLunisolarCalendar * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _EastAsianLunisolarCalendar * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _EastAsianLunisolarCalendar * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _EastAsianLunisolarCalendar * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _EastAsianLunisolarCalendarVtbl;

interface _EastAsianLunisolarCalendar
{
    CONST_VTBL struct _EastAsianLunisolarCalendarVtbl *lpVtbl;
};

#endif 	

#ifndef ___CompareInfo_INTERFACE_DEFINED__
#define ___CompareInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__CompareInfo;

typedef struct _CompareInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CompareInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CompareInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CompareInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CompareInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CompareInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CompareInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CompareInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CompareInfoVtbl;

interface _CompareInfo
{
    CONST_VTBL struct _CompareInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___CultureInfo_INTERFACE_DEFINED__
#define ___CultureInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__CultureInfo;

typedef struct _CultureInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CultureInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CultureInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CultureInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CultureInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CultureInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CultureInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CultureInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CultureInfoVtbl;

interface _CultureInfo
{
    CONST_VTBL struct _CultureInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___DateTimeFormatInfo_INTERFACE_DEFINED__
#define ___DateTimeFormatInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__DateTimeFormatInfo;

typedef struct _DateTimeFormatInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DateTimeFormatInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DateTimeFormatInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DateTimeFormatInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DateTimeFormatInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DateTimeFormatInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DateTimeFormatInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DateTimeFormatInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DateTimeFormatInfoVtbl;

interface _DateTimeFormatInfo
{
    CONST_VTBL struct _DateTimeFormatInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___DaylightTime_INTERFACE_DEFINED__
#define ___DaylightTime_INTERFACE_DEFINED__

EXTERN_C const IID IID__DaylightTime;

typedef struct _DaylightTimeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DaylightTime * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DaylightTime * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DaylightTime * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DaylightTime * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DaylightTime * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DaylightTime * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DaylightTime * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DaylightTimeVtbl;

interface _DaylightTime
{
    CONST_VTBL struct _DaylightTimeVtbl *lpVtbl;
};

#endif 	

#ifndef ___GregorianCalendar_INTERFACE_DEFINED__
#define ___GregorianCalendar_INTERFACE_DEFINED__

EXTERN_C const IID IID__GregorianCalendar;

typedef struct _GregorianCalendarVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _GregorianCalendar * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _GregorianCalendar * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _GregorianCalendar * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _GregorianCalendar * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _GregorianCalendar * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _GregorianCalendar * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _GregorianCalendar * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _GregorianCalendarVtbl;

interface _GregorianCalendar
{
    CONST_VTBL struct _GregorianCalendarVtbl *lpVtbl;
};

#endif 	

#ifndef ___HebrewCalendar_INTERFACE_DEFINED__
#define ___HebrewCalendar_INTERFACE_DEFINED__

EXTERN_C const IID IID__HebrewCalendar;

typedef struct _HebrewCalendarVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _HebrewCalendar * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _HebrewCalendar * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _HebrewCalendar * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _HebrewCalendar * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _HebrewCalendar * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _HebrewCalendar * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _HebrewCalendar * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _HebrewCalendarVtbl;

interface _HebrewCalendar
{
    CONST_VTBL struct _HebrewCalendarVtbl *lpVtbl;
};

#endif 	

#ifndef ___HijriCalendar_INTERFACE_DEFINED__
#define ___HijriCalendar_INTERFACE_DEFINED__

EXTERN_C const IID IID__HijriCalendar;

typedef struct _HijriCalendarVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _HijriCalendar * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _HijriCalendar * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _HijriCalendar * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _HijriCalendar * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _HijriCalendar * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _HijriCalendar * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _HijriCalendar * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _HijriCalendarVtbl;

interface _HijriCalendar
{
    CONST_VTBL struct _HijriCalendarVtbl *lpVtbl;
};

#endif 	

#ifndef ___JapaneseCalendar_INTERFACE_DEFINED__
#define ___JapaneseCalendar_INTERFACE_DEFINED__

EXTERN_C const IID IID__JapaneseCalendar;

typedef struct _JapaneseCalendarVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _JapaneseCalendar * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _JapaneseCalendar * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _JapaneseCalendar * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _JapaneseCalendar * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _JapaneseCalendar * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _JapaneseCalendar * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _JapaneseCalendar * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _JapaneseCalendarVtbl;

interface _JapaneseCalendar
{
    CONST_VTBL struct _JapaneseCalendarVtbl *lpVtbl;
};

#endif 	

#ifndef ___JulianCalendar_INTERFACE_DEFINED__
#define ___JulianCalendar_INTERFACE_DEFINED__

EXTERN_C const IID IID__JulianCalendar;

typedef struct _JulianCalendarVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _JulianCalendar * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _JulianCalendar * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _JulianCalendar * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _JulianCalendar * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _JulianCalendar * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _JulianCalendar * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _JulianCalendar * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _JulianCalendarVtbl;

interface _JulianCalendar
{
    CONST_VTBL struct _JulianCalendarVtbl *lpVtbl;
};

#endif 	

#ifndef ___KoreanCalendar_INTERFACE_DEFINED__
#define ___KoreanCalendar_INTERFACE_DEFINED__

EXTERN_C const IID IID__KoreanCalendar;

typedef struct _KoreanCalendarVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _KoreanCalendar * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _KoreanCalendar * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _KoreanCalendar * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _KoreanCalendar * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _KoreanCalendar * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _KoreanCalendar * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _KoreanCalendar * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _KoreanCalendarVtbl;

interface _KoreanCalendar
{
    CONST_VTBL struct _KoreanCalendarVtbl *lpVtbl;
};

#endif 	

#ifndef ___RegionInfo_INTERFACE_DEFINED__
#define ___RegionInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__RegionInfo;

typedef struct _RegionInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _RegionInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _RegionInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _RegionInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _RegionInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _RegionInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _RegionInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _RegionInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _RegionInfoVtbl;

interface _RegionInfo
{
    CONST_VTBL struct _RegionInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___SortKey_INTERFACE_DEFINED__
#define ___SortKey_INTERFACE_DEFINED__

EXTERN_C const IID IID__SortKey;

typedef struct _SortKeyVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SortKey * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SortKey * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SortKey * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SortKey * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SortKey * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SortKey * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SortKey * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SortKeyVtbl;

interface _SortKey
{
    CONST_VTBL struct _SortKeyVtbl *lpVtbl;
};

#endif 	

#ifndef ___StringInfo_INTERFACE_DEFINED__
#define ___StringInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__StringInfo;

typedef struct _StringInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _StringInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _StringInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _StringInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _StringInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _StringInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _StringInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _StringInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StringInfoVtbl;

interface _StringInfo
{
    CONST_VTBL struct _StringInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___TaiwanCalendar_INTERFACE_DEFINED__
#define ___TaiwanCalendar_INTERFACE_DEFINED__

EXTERN_C const IID IID__TaiwanCalendar;

typedef struct _TaiwanCalendarVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TaiwanCalendar * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TaiwanCalendar * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TaiwanCalendar * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TaiwanCalendar * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TaiwanCalendar * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TaiwanCalendar * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TaiwanCalendar * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TaiwanCalendarVtbl;

interface _TaiwanCalendar
{
    CONST_VTBL struct _TaiwanCalendarVtbl *lpVtbl;
};

#endif 	

#ifndef ___TextElementEnumerator_INTERFACE_DEFINED__
#define ___TextElementEnumerator_INTERFACE_DEFINED__

EXTERN_C const IID IID__TextElementEnumerator;

typedef struct _TextElementEnumeratorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TextElementEnumerator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TextElementEnumerator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TextElementEnumerator * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TextElementEnumerator * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TextElementEnumerator * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TextElementEnumerator * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TextElementEnumerator * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TextElementEnumeratorVtbl;

interface _TextElementEnumerator
{
    CONST_VTBL struct _TextElementEnumeratorVtbl *lpVtbl;
};

#endif 	

#ifndef ___TextInfo_INTERFACE_DEFINED__
#define ___TextInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__TextInfo;

typedef struct _TextInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TextInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TextInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TextInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TextInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TextInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TextInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TextInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TextInfoVtbl;

interface _TextInfo
{
    CONST_VTBL struct _TextInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___ThaiBuddhistCalendar_INTERFACE_DEFINED__
#define ___ThaiBuddhistCalendar_INTERFACE_DEFINED__

EXTERN_C const IID IID__ThaiBuddhistCalendar;

typedef struct _ThaiBuddhistCalendarVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ThaiBuddhistCalendar * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ThaiBuddhistCalendar * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ThaiBuddhistCalendar * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ThaiBuddhistCalendar * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ThaiBuddhistCalendar * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ThaiBuddhistCalendar * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ThaiBuddhistCalendar * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ThaiBuddhistCalendarVtbl;

interface _ThaiBuddhistCalendar
{
    CONST_VTBL struct _ThaiBuddhistCalendarVtbl *lpVtbl;
};

#endif 	

#ifndef ___NumberFormatInfo_INTERFACE_DEFINED__
#define ___NumberFormatInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__NumberFormatInfo;

typedef struct _NumberFormatInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _NumberFormatInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _NumberFormatInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _NumberFormatInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _NumberFormatInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _NumberFormatInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _NumberFormatInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _NumberFormatInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _NumberFormatInfoVtbl;

interface _NumberFormatInfo
{
    CONST_VTBL struct _NumberFormatInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___Encoding_INTERFACE_DEFINED__
#define ___Encoding_INTERFACE_DEFINED__

EXTERN_C const IID IID__Encoding;

typedef struct _EncodingVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Encoding * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Encoding * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Encoding * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Encoding * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Encoding * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Encoding * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Encoding * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _EncodingVtbl;

interface _Encoding
{
    CONST_VTBL struct _EncodingVtbl *lpVtbl;
};

#endif 	

#ifndef ___Encoder_INTERFACE_DEFINED__
#define ___Encoder_INTERFACE_DEFINED__

EXTERN_C const IID IID__Encoder;

typedef struct _EncoderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Encoder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Encoder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Encoder * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Encoder * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Encoder * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Encoder * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Encoder * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _EncoderVtbl;

interface _Encoder
{
    CONST_VTBL struct _EncoderVtbl *lpVtbl;
};

#endif 	

#ifndef ___Decoder_INTERFACE_DEFINED__
#define ___Decoder_INTERFACE_DEFINED__

EXTERN_C const IID IID__Decoder;

typedef struct _DecoderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Decoder * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Decoder * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Decoder * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Decoder * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Decoder * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Decoder * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Decoder * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DecoderVtbl;

interface _Decoder
{
    CONST_VTBL struct _DecoderVtbl *lpVtbl;
};

#endif 	

#ifndef ___ASCIIEncoding_INTERFACE_DEFINED__
#define ___ASCIIEncoding_INTERFACE_DEFINED__

EXTERN_C const IID IID__ASCIIEncoding;

typedef struct _ASCIIEncodingVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ASCIIEncoding * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ASCIIEncoding * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ASCIIEncoding * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ASCIIEncoding * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ASCIIEncoding * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ASCIIEncoding * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ASCIIEncoding * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ASCIIEncodingVtbl;

interface _ASCIIEncoding
{
    CONST_VTBL struct _ASCIIEncodingVtbl *lpVtbl;
};

#endif 	

#ifndef ___UnicodeEncoding_INTERFACE_DEFINED__
#define ___UnicodeEncoding_INTERFACE_DEFINED__

EXTERN_C const IID IID__UnicodeEncoding;

typedef struct _UnicodeEncodingVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _UnicodeEncoding * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _UnicodeEncoding * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _UnicodeEncoding * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _UnicodeEncoding * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _UnicodeEncoding * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _UnicodeEncoding * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _UnicodeEncoding * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _UnicodeEncodingVtbl;

interface _UnicodeEncoding
{
    CONST_VTBL struct _UnicodeEncodingVtbl *lpVtbl;
};

#endif 	

#ifndef ___UTF7Encoding_INTERFACE_DEFINED__
#define ___UTF7Encoding_INTERFACE_DEFINED__

EXTERN_C const IID IID__UTF7Encoding;

typedef struct _UTF7EncodingVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _UTF7Encoding * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _UTF7Encoding * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _UTF7Encoding * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _UTF7Encoding * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _UTF7Encoding * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _UTF7Encoding * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _UTF7Encoding * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _UTF7EncodingVtbl;

interface _UTF7Encoding
{
    CONST_VTBL struct _UTF7EncodingVtbl *lpVtbl;
};

#endif 	

#ifndef ___UTF8Encoding_INTERFACE_DEFINED__
#define ___UTF8Encoding_INTERFACE_DEFINED__

EXTERN_C const IID IID__UTF8Encoding;

typedef struct _UTF8EncodingVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _UTF8Encoding * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _UTF8Encoding * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _UTF8Encoding * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _UTF8Encoding * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _UTF8Encoding * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _UTF8Encoding * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _UTF8Encoding * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _UTF8EncodingVtbl;

interface _UTF8Encoding
{
    CONST_VTBL struct _UTF8EncodingVtbl *lpVtbl;
};

#endif 	

#ifndef ___MissingManifestResourceException_INTERFACE_DEFINED__
#define ___MissingManifestResourceException_INTERFACE_DEFINED__

EXTERN_C const IID IID__MissingManifestResourceException;

typedef struct _MissingManifestResourceExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MissingManifestResourceException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MissingManifestResourceException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MissingManifestResourceException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MissingManifestResourceException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MissingManifestResourceException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MissingManifestResourceException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MissingManifestResourceException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MissingManifestResourceExceptionVtbl;

interface _MissingManifestResourceException
{
    CONST_VTBL struct _MissingManifestResourceExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___MissingSatelliteAssemblyException_INTERFACE_DEFINED__
#define ___MissingSatelliteAssemblyException_INTERFACE_DEFINED__

EXTERN_C const IID IID__MissingSatelliteAssemblyException;

typedef struct _MissingSatelliteAssemblyExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MissingSatelliteAssemblyException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MissingSatelliteAssemblyException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MissingSatelliteAssemblyException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MissingSatelliteAssemblyException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MissingSatelliteAssemblyException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MissingSatelliteAssemblyException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MissingSatelliteAssemblyException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MissingSatelliteAssemblyExceptionVtbl;

interface _MissingSatelliteAssemblyException
{
    CONST_VTBL struct _MissingSatelliteAssemblyExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___NeutralResourcesLanguageAttribute_INTERFACE_DEFINED__
#define ___NeutralResourcesLanguageAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__NeutralResourcesLanguageAttribute;

typedef struct _NeutralResourcesLanguageAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _NeutralResourcesLanguageAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _NeutralResourcesLanguageAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _NeutralResourcesLanguageAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _NeutralResourcesLanguageAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _NeutralResourcesLanguageAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _NeutralResourcesLanguageAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _NeutralResourcesLanguageAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _NeutralResourcesLanguageAttributeVtbl;

interface _NeutralResourcesLanguageAttribute
{
    CONST_VTBL struct _NeutralResourcesLanguageAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ResourceManager_INTERFACE_DEFINED__
#define ___ResourceManager_INTERFACE_DEFINED__

EXTERN_C const IID IID__ResourceManager;

typedef struct _ResourceManagerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ResourceManager * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ResourceManager * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ResourceManager * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ResourceManager * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ResourceManager * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ResourceManager * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ResourceManager * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ResourceManagerVtbl;

interface _ResourceManager
{
    CONST_VTBL struct _ResourceManagerVtbl *lpVtbl;
};

#endif 	

#ifndef ___ResourceReader_INTERFACE_DEFINED__
#define ___ResourceReader_INTERFACE_DEFINED__

EXTERN_C const IID IID__ResourceReader;

typedef struct _ResourceReaderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ResourceReader * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ResourceReader * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ResourceReader * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ResourceReader * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ResourceReader * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ResourceReader * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ResourceReader * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ResourceReaderVtbl;

interface _ResourceReader
{
    CONST_VTBL struct _ResourceReaderVtbl *lpVtbl;
};

#endif 	

#ifndef ___ResourceSet_INTERFACE_DEFINED__
#define ___ResourceSet_INTERFACE_DEFINED__

EXTERN_C const IID IID__ResourceSet;

typedef struct _ResourceSetVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ResourceSet * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ResourceSet * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ResourceSet * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ResourceSet * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ResourceSet * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ResourceSet * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ResourceSet * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ResourceSetVtbl;

interface _ResourceSet
{
    CONST_VTBL struct _ResourceSetVtbl *lpVtbl;
};

#endif 	

#ifndef ___ResourceWriter_INTERFACE_DEFINED__
#define ___ResourceWriter_INTERFACE_DEFINED__

EXTERN_C const IID IID__ResourceWriter;

typedef struct _ResourceWriterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ResourceWriter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ResourceWriter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ResourceWriter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ResourceWriter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ResourceWriter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ResourceWriter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ResourceWriter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ResourceWriterVtbl;

interface _ResourceWriter
{
    CONST_VTBL struct _ResourceWriterVtbl *lpVtbl;
};

#endif 	

#ifndef ___SatelliteContractVersionAttribute_INTERFACE_DEFINED__
#define ___SatelliteContractVersionAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__SatelliteContractVersionAttribute;

typedef struct _SatelliteContractVersionAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SatelliteContractVersionAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SatelliteContractVersionAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SatelliteContractVersionAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SatelliteContractVersionAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SatelliteContractVersionAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SatelliteContractVersionAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SatelliteContractVersionAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SatelliteContractVersionAttributeVtbl;

interface _SatelliteContractVersionAttribute
{
    CONST_VTBL struct _SatelliteContractVersionAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___Registry_INTERFACE_DEFINED__
#define ___Registry_INTERFACE_DEFINED__

EXTERN_C const IID IID__Registry;

typedef struct _RegistryVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Registry * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Registry * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Registry * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Registry * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Registry * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Registry * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Registry * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _RegistryVtbl;

interface _Registry
{
    CONST_VTBL struct _RegistryVtbl *lpVtbl;
};

#endif 	

#ifndef ___RegistryKey_INTERFACE_DEFINED__
#define ___RegistryKey_INTERFACE_DEFINED__

EXTERN_C const IID IID__RegistryKey;

typedef struct _RegistryKeyVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _RegistryKey * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _RegistryKey * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _RegistryKey * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _RegistryKey * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _RegistryKey * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _RegistryKey * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _RegistryKey * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _RegistryKeyVtbl;

interface _RegistryKey
{
    CONST_VTBL struct _RegistryKeyVtbl *lpVtbl;
};

#endif 	

#ifndef ___AllMembershipCondition_INTERFACE_DEFINED__
#define ___AllMembershipCondition_INTERFACE_DEFINED__

EXTERN_C const IID IID__AllMembershipCondition;

typedef struct _AllMembershipConditionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AllMembershipCondition * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AllMembershipCondition * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AllMembershipCondition * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AllMembershipCondition * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AllMembershipCondition * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AllMembershipCondition * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AllMembershipCondition * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AllMembershipConditionVtbl;

interface _AllMembershipCondition
{
    CONST_VTBL struct _AllMembershipConditionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ApplicationDirectory_INTERFACE_DEFINED__
#define ___ApplicationDirectory_INTERFACE_DEFINED__

EXTERN_C const IID IID__ApplicationDirectory;

typedef struct _ApplicationDirectoryVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ApplicationDirectory * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ApplicationDirectory * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ApplicationDirectory * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ApplicationDirectory * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ApplicationDirectory * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ApplicationDirectory * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ApplicationDirectory * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ApplicationDirectoryVtbl;

interface _ApplicationDirectory
{
    CONST_VTBL struct _ApplicationDirectoryVtbl *lpVtbl;
};

#endif 	

#ifndef ___ApplicationDirectoryMembershipCondition_INTERFACE_DEFINED__
#define ___ApplicationDirectoryMembershipCondition_INTERFACE_DEFINED__

EXTERN_C const IID IID__ApplicationDirectoryMembershipCondition;

typedef struct _ApplicationDirectoryMembershipConditionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ApplicationDirectoryMembershipCondition * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ApplicationDirectoryMembershipCondition * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ApplicationDirectoryMembershipCondition * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ApplicationDirectoryMembershipCondition * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ApplicationDirectoryMembershipCondition * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ApplicationDirectoryMembershipCondition * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ApplicationDirectoryMembershipCondition * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ApplicationDirectoryMembershipConditionVtbl;

interface _ApplicationDirectoryMembershipCondition
{
    CONST_VTBL struct _ApplicationDirectoryMembershipConditionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ApplicationSecurityInfo_INTERFACE_DEFINED__
#define ___ApplicationSecurityInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__ApplicationSecurityInfo;

typedef struct _ApplicationSecurityInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ApplicationSecurityInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ApplicationSecurityInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ApplicationSecurityInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ApplicationSecurityInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ApplicationSecurityInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ApplicationSecurityInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ApplicationSecurityInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ApplicationSecurityInfoVtbl;

interface _ApplicationSecurityInfo
{
    CONST_VTBL struct _ApplicationSecurityInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___ApplicationSecurityManager_INTERFACE_DEFINED__
#define ___ApplicationSecurityManager_INTERFACE_DEFINED__

EXTERN_C const IID IID__ApplicationSecurityManager;

typedef struct _ApplicationSecurityManagerVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ApplicationSecurityManager * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ApplicationSecurityManager * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ApplicationSecurityManager * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ApplicationSecurityManager * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ApplicationSecurityManager * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ApplicationSecurityManager * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ApplicationSecurityManager * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ApplicationSecurityManagerVtbl;

interface _ApplicationSecurityManager
{
    CONST_VTBL struct _ApplicationSecurityManagerVtbl *lpVtbl;
};

#endif 	

#ifndef ___ApplicationTrust_INTERFACE_DEFINED__
#define ___ApplicationTrust_INTERFACE_DEFINED__

EXTERN_C const IID IID__ApplicationTrust;

typedef struct _ApplicationTrustVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ApplicationTrust * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ApplicationTrust * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ApplicationTrust * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ApplicationTrust * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ApplicationTrust * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ApplicationTrust * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ApplicationTrust * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ApplicationTrustVtbl;

interface _ApplicationTrust
{
    CONST_VTBL struct _ApplicationTrustVtbl *lpVtbl;
};

#endif 	

#ifndef ___ApplicationTrustCollection_INTERFACE_DEFINED__
#define ___ApplicationTrustCollection_INTERFACE_DEFINED__

EXTERN_C const IID IID__ApplicationTrustCollection;

typedef struct _ApplicationTrustCollectionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ApplicationTrustCollection * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ApplicationTrustCollection * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ApplicationTrustCollection * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ApplicationTrustCollection * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ApplicationTrustCollection * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ApplicationTrustCollection * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ApplicationTrustCollection * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ApplicationTrustCollectionVtbl;

interface _ApplicationTrustCollection
{
    CONST_VTBL struct _ApplicationTrustCollectionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ApplicationTrustEnumerator_INTERFACE_DEFINED__
#define ___ApplicationTrustEnumerator_INTERFACE_DEFINED__

EXTERN_C const IID IID__ApplicationTrustEnumerator;

typedef struct _ApplicationTrustEnumeratorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ApplicationTrustEnumerator * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ApplicationTrustEnumerator * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ApplicationTrustEnumerator * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ApplicationTrustEnumerator * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ApplicationTrustEnumerator * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ApplicationTrustEnumerator * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ApplicationTrustEnumerator * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ApplicationTrustEnumeratorVtbl;

interface _ApplicationTrustEnumerator
{
    CONST_VTBL struct _ApplicationTrustEnumeratorVtbl *lpVtbl;
};

#endif 	

#ifndef ___CodeGroup_INTERFACE_DEFINED__
#define ___CodeGroup_INTERFACE_DEFINED__

EXTERN_C const IID IID__CodeGroup;

typedef struct _CodeGroupVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CodeGroup * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CodeGroup * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CodeGroup * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CodeGroup * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CodeGroup * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CodeGroup * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CodeGroup * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CodeGroupVtbl;

interface _CodeGroup
{
    CONST_VTBL struct _CodeGroupVtbl *lpVtbl;
};

#endif 	

#ifndef ___Evidence_INTERFACE_DEFINED__
#define ___Evidence_INTERFACE_DEFINED__

EXTERN_C const IID IID__Evidence;

typedef struct _EvidenceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Evidence * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Evidence * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Evidence * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Evidence * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Evidence * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Evidence * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Evidence * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _EvidenceVtbl;

interface _Evidence
{
    CONST_VTBL struct _EvidenceVtbl *lpVtbl;
};

#endif 	

#ifndef ___FileCodeGroup_INTERFACE_DEFINED__
#define ___FileCodeGroup_INTERFACE_DEFINED__

EXTERN_C const IID IID__FileCodeGroup;

typedef struct _FileCodeGroupVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FileCodeGroup * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FileCodeGroup * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FileCodeGroup * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FileCodeGroup * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FileCodeGroup * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FileCodeGroup * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FileCodeGroup * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FileCodeGroupVtbl;

interface _FileCodeGroup
{
    CONST_VTBL struct _FileCodeGroupVtbl *lpVtbl;
};

#endif 	

#ifndef ___FirstMatchCodeGroup_INTERFACE_DEFINED__
#define ___FirstMatchCodeGroup_INTERFACE_DEFINED__

EXTERN_C const IID IID__FirstMatchCodeGroup;

typedef struct _FirstMatchCodeGroupVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FirstMatchCodeGroup * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FirstMatchCodeGroup * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FirstMatchCodeGroup * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FirstMatchCodeGroup * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FirstMatchCodeGroup * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FirstMatchCodeGroup * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FirstMatchCodeGroup * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FirstMatchCodeGroupVtbl;

interface _FirstMatchCodeGroup
{
    CONST_VTBL struct _FirstMatchCodeGroupVtbl *lpVtbl;
};

#endif 	

#ifndef ___TrustManagerContext_INTERFACE_DEFINED__
#define ___TrustManagerContext_INTERFACE_DEFINED__

EXTERN_C const IID IID__TrustManagerContext;

typedef struct _TrustManagerContextVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TrustManagerContext * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TrustManagerContext * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TrustManagerContext * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TrustManagerContext * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TrustManagerContext * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TrustManagerContext * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TrustManagerContext * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TrustManagerContextVtbl;

interface _TrustManagerContext
{
    CONST_VTBL struct _TrustManagerContextVtbl *lpVtbl;
};

#endif 	

#ifndef ___CodeConnectAccess_INTERFACE_DEFINED__
#define ___CodeConnectAccess_INTERFACE_DEFINED__

EXTERN_C const IID IID__CodeConnectAccess;

typedef struct _CodeConnectAccessVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CodeConnectAccess * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CodeConnectAccess * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CodeConnectAccess * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CodeConnectAccess * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CodeConnectAccess * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CodeConnectAccess * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CodeConnectAccess * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CodeConnectAccessVtbl;

interface _CodeConnectAccess
{
    CONST_VTBL struct _CodeConnectAccessVtbl *lpVtbl;
};

#endif 	

#ifndef ___NetCodeGroup_INTERFACE_DEFINED__
#define ___NetCodeGroup_INTERFACE_DEFINED__

EXTERN_C const IID IID__NetCodeGroup;

typedef struct _NetCodeGroupVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _NetCodeGroup * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _NetCodeGroup * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _NetCodeGroup * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _NetCodeGroup * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _NetCodeGroup * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _NetCodeGroup * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _NetCodeGroup * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _NetCodeGroupVtbl;

interface _NetCodeGroup
{
    CONST_VTBL struct _NetCodeGroupVtbl *lpVtbl;
};

#endif 	

#ifndef ___PermissionRequestEvidence_INTERFACE_DEFINED__
#define ___PermissionRequestEvidence_INTERFACE_DEFINED__

EXTERN_C const IID IID__PermissionRequestEvidence;

typedef struct _PermissionRequestEvidenceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _PermissionRequestEvidence * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _PermissionRequestEvidence * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _PermissionRequestEvidence * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _PermissionRequestEvidence * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _PermissionRequestEvidence * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _PermissionRequestEvidence * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _PermissionRequestEvidence * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _PermissionRequestEvidenceVtbl;

interface _PermissionRequestEvidence
{
    CONST_VTBL struct _PermissionRequestEvidenceVtbl *lpVtbl;
};

#endif 	

#ifndef ___PolicyException_INTERFACE_DEFINED__
#define ___PolicyException_INTERFACE_DEFINED__

EXTERN_C const IID IID__PolicyException;

typedef struct _PolicyExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _PolicyException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _PolicyException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _PolicyException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _PolicyException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _PolicyException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _PolicyException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _PolicyException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _PolicyExceptionVtbl;

interface _PolicyException
{
    CONST_VTBL struct _PolicyExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___PolicyLevel_INTERFACE_DEFINED__
#define ___PolicyLevel_INTERFACE_DEFINED__

EXTERN_C const IID IID__PolicyLevel;

typedef struct _PolicyLevelVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _PolicyLevel * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _PolicyLevel * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _PolicyLevel * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _PolicyLevel * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _PolicyLevel * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _PolicyLevel * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _PolicyLevel * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _PolicyLevelVtbl;

interface _PolicyLevel
{
    CONST_VTBL struct _PolicyLevelVtbl *lpVtbl;
};

#endif 	

#ifndef ___PolicyStatement_INTERFACE_DEFINED__
#define ___PolicyStatement_INTERFACE_DEFINED__

EXTERN_C const IID IID__PolicyStatement;

typedef struct _PolicyStatementVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _PolicyStatement * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _PolicyStatement * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _PolicyStatement * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _PolicyStatement * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _PolicyStatement * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _PolicyStatement * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _PolicyStatement * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _PolicyStatementVtbl;

interface _PolicyStatement
{
    CONST_VTBL struct _PolicyStatementVtbl *lpVtbl;
};

#endif 	

#ifndef ___Site_INTERFACE_DEFINED__
#define ___Site_INTERFACE_DEFINED__

EXTERN_C const IID IID__Site;

typedef struct _SiteVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Site * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Site * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Site * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Site * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Site * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Site * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Site * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SiteVtbl;

interface _Site
{
    CONST_VTBL struct _SiteVtbl *lpVtbl;
};

#endif 	

#ifndef ___SiteMembershipCondition_INTERFACE_DEFINED__
#define ___SiteMembershipCondition_INTERFACE_DEFINED__

EXTERN_C const IID IID__SiteMembershipCondition;

typedef struct _SiteMembershipConditionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SiteMembershipCondition * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SiteMembershipCondition * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SiteMembershipCondition * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SiteMembershipCondition * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SiteMembershipCondition * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SiteMembershipCondition * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SiteMembershipCondition * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SiteMembershipConditionVtbl;

interface _SiteMembershipCondition
{
    CONST_VTBL struct _SiteMembershipConditionVtbl *lpVtbl;
};

#endif 	

#ifndef ___StrongName_INTERFACE_DEFINED__
#define ___StrongName_INTERFACE_DEFINED__

EXTERN_C const IID IID__StrongName;

typedef struct _StrongNameVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _StrongName * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _StrongName * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _StrongName * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _StrongName * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _StrongName * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _StrongName * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _StrongName * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StrongNameVtbl;

interface _StrongName
{
    CONST_VTBL struct _StrongNameVtbl *lpVtbl;
};

#endif 	

#ifndef ___StrongNameMembershipCondition_INTERFACE_DEFINED__
#define ___StrongNameMembershipCondition_INTERFACE_DEFINED__

EXTERN_C const IID IID__StrongNameMembershipCondition;

typedef struct _StrongNameMembershipConditionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _StrongNameMembershipCondition * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _StrongNameMembershipCondition * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _StrongNameMembershipCondition * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _StrongNameMembershipCondition * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _StrongNameMembershipCondition * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _StrongNameMembershipCondition * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _StrongNameMembershipCondition * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StrongNameMembershipConditionVtbl;

interface _StrongNameMembershipCondition
{
    CONST_VTBL struct _StrongNameMembershipConditionVtbl *lpVtbl;
};

#endif 	

#ifndef ___UnionCodeGroup_INTERFACE_DEFINED__
#define ___UnionCodeGroup_INTERFACE_DEFINED__

EXTERN_C const IID IID__UnionCodeGroup;

typedef struct _UnionCodeGroupVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _UnionCodeGroup * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _UnionCodeGroup * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _UnionCodeGroup * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _UnionCodeGroup * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _UnionCodeGroup * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _UnionCodeGroup * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _UnionCodeGroup * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _UnionCodeGroupVtbl;

interface _UnionCodeGroup
{
    CONST_VTBL struct _UnionCodeGroupVtbl *lpVtbl;
};

#endif 	

#ifndef ___Url_INTERFACE_DEFINED__
#define ___Url_INTERFACE_DEFINED__

EXTERN_C const IID IID__Url;

typedef struct _UrlVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Url * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Url * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Url * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Url * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Url * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Url * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Url * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _UrlVtbl;

interface _Url
{
    CONST_VTBL struct _UrlVtbl *lpVtbl;
};

#endif 	

#ifndef ___UrlMembershipCondition_INTERFACE_DEFINED__
#define ___UrlMembershipCondition_INTERFACE_DEFINED__

EXTERN_C const IID IID__UrlMembershipCondition;

typedef struct _UrlMembershipConditionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _UrlMembershipCondition * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _UrlMembershipCondition * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _UrlMembershipCondition * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _UrlMembershipCondition * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _UrlMembershipCondition * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _UrlMembershipCondition * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _UrlMembershipCondition * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _UrlMembershipConditionVtbl;

interface _UrlMembershipCondition
{
    CONST_VTBL struct _UrlMembershipConditionVtbl *lpVtbl;
};

#endif 	

#ifndef ___Zone_INTERFACE_DEFINED__
#define ___Zone_INTERFACE_DEFINED__

EXTERN_C const IID IID__Zone;

typedef struct _ZoneVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Zone * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Zone * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Zone * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Zone * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Zone * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Zone * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Zone * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ZoneVtbl;

interface _Zone
{
    CONST_VTBL struct _ZoneVtbl *lpVtbl;
};

#endif 	

#ifndef ___ZoneMembershipCondition_INTERFACE_DEFINED__
#define ___ZoneMembershipCondition_INTERFACE_DEFINED__

EXTERN_C const IID IID__ZoneMembershipCondition;

typedef struct _ZoneMembershipConditionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ZoneMembershipCondition * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ZoneMembershipCondition * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ZoneMembershipCondition * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ZoneMembershipCondition * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ZoneMembershipCondition * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ZoneMembershipCondition * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ZoneMembershipCondition * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ZoneMembershipConditionVtbl;

interface _ZoneMembershipCondition
{
    CONST_VTBL struct _ZoneMembershipConditionVtbl *lpVtbl;
};

#endif 	

#ifndef ___GacInstalled_INTERFACE_DEFINED__
#define ___GacInstalled_INTERFACE_DEFINED__

EXTERN_C const IID IID__GacInstalled;

typedef struct _GacInstalledVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _GacInstalled * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _GacInstalled * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _GacInstalled * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _GacInstalled * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _GacInstalled * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _GacInstalled * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _GacInstalled * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _GacInstalledVtbl;

interface _GacInstalled
{
    CONST_VTBL struct _GacInstalledVtbl *lpVtbl;
};

#endif 	

#ifndef ___GacMembershipCondition_INTERFACE_DEFINED__
#define ___GacMembershipCondition_INTERFACE_DEFINED__

EXTERN_C const IID IID__GacMembershipCondition;

typedef struct _GacMembershipConditionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _GacMembershipCondition * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _GacMembershipCondition * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _GacMembershipCondition * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _GacMembershipCondition * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _GacMembershipCondition * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _GacMembershipCondition * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _GacMembershipCondition * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _GacMembershipConditionVtbl;

interface _GacMembershipCondition
{
    CONST_VTBL struct _GacMembershipConditionVtbl *lpVtbl;
};

#endif 	

#ifndef ___Hash_INTERFACE_DEFINED__
#define ___Hash_INTERFACE_DEFINED__

EXTERN_C const IID IID__Hash;

typedef struct _HashVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Hash * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Hash * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Hash * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Hash * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Hash * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Hash * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Hash * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _HashVtbl;

interface _Hash
{
    CONST_VTBL struct _HashVtbl *lpVtbl;
};

#endif 	

#ifndef ___HashMembershipCondition_INTERFACE_DEFINED__
#define ___HashMembershipCondition_INTERFACE_DEFINED__

EXTERN_C const IID IID__HashMembershipCondition;

typedef struct _HashMembershipConditionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _HashMembershipCondition * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _HashMembershipCondition * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _HashMembershipCondition * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _HashMembershipCondition * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _HashMembershipCondition * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _HashMembershipCondition * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _HashMembershipCondition * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _HashMembershipConditionVtbl;

interface _HashMembershipCondition
{
    CONST_VTBL struct _HashMembershipConditionVtbl *lpVtbl;
};

#endif 	

#ifndef ___Publisher_INTERFACE_DEFINED__
#define ___Publisher_INTERFACE_DEFINED__

EXTERN_C const IID IID__Publisher;

typedef struct _PublisherVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Publisher * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Publisher * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Publisher * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Publisher * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Publisher * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Publisher * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Publisher * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _PublisherVtbl;

interface _Publisher
{
    CONST_VTBL struct _PublisherVtbl *lpVtbl;
};

#endif 	

#ifndef ___PublisherMembershipCondition_INTERFACE_DEFINED__
#define ___PublisherMembershipCondition_INTERFACE_DEFINED__

EXTERN_C const IID IID__PublisherMembershipCondition;

typedef struct _PublisherMembershipConditionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _PublisherMembershipCondition * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _PublisherMembershipCondition * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _PublisherMembershipCondition * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _PublisherMembershipCondition * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _PublisherMembershipCondition * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _PublisherMembershipCondition * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _PublisherMembershipCondition * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _PublisherMembershipConditionVtbl;

interface _PublisherMembershipCondition
{
    CONST_VTBL struct _PublisherMembershipConditionVtbl *lpVtbl;
};

#endif 	

#ifndef ___GenericIdentity_INTERFACE_DEFINED__
#define ___GenericIdentity_INTERFACE_DEFINED__

EXTERN_C const IID IID__GenericIdentity;

typedef struct _GenericIdentityVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _GenericIdentity * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _GenericIdentity * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _GenericIdentity * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _GenericIdentity * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _GenericIdentity * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _GenericIdentity * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _GenericIdentity * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _GenericIdentityVtbl;

interface _GenericIdentity
{
    CONST_VTBL struct _GenericIdentityVtbl *lpVtbl;
};

#endif 	

#ifndef ___GenericPrincipal_INTERFACE_DEFINED__
#define ___GenericPrincipal_INTERFACE_DEFINED__

EXTERN_C const IID IID__GenericPrincipal;

typedef struct _GenericPrincipalVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _GenericPrincipal * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _GenericPrincipal * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _GenericPrincipal * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _GenericPrincipal * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _GenericPrincipal * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _GenericPrincipal * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _GenericPrincipal * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _GenericPrincipalVtbl;

interface _GenericPrincipal
{
    CONST_VTBL struct _GenericPrincipalVtbl *lpVtbl;
};

#endif 	

#ifndef ___WindowsIdentity_INTERFACE_DEFINED__
#define ___WindowsIdentity_INTERFACE_DEFINED__

EXTERN_C const IID IID__WindowsIdentity;

typedef struct _WindowsIdentityVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _WindowsIdentity * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _WindowsIdentity * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _WindowsIdentity * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _WindowsIdentity * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _WindowsIdentity * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _WindowsIdentity * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _WindowsIdentity * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _WindowsIdentityVtbl;

interface _WindowsIdentity
{
    CONST_VTBL struct _WindowsIdentityVtbl *lpVtbl;
};

#endif 	

#ifndef ___WindowsImpersonationContext_INTERFACE_DEFINED__
#define ___WindowsImpersonationContext_INTERFACE_DEFINED__

EXTERN_C const IID IID__WindowsImpersonationContext;

typedef struct _WindowsImpersonationContextVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _WindowsImpersonationContext * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _WindowsImpersonationContext * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _WindowsImpersonationContext * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _WindowsImpersonationContext * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _WindowsImpersonationContext * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _WindowsImpersonationContext * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _WindowsImpersonationContext * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _WindowsImpersonationContextVtbl;

interface _WindowsImpersonationContext
{
    CONST_VTBL struct _WindowsImpersonationContextVtbl *lpVtbl;
};

#endif 	

#ifndef ___WindowsPrincipal_INTERFACE_DEFINED__
#define ___WindowsPrincipal_INTERFACE_DEFINED__

EXTERN_C const IID IID__WindowsPrincipal;

typedef struct _WindowsPrincipalVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _WindowsPrincipal * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _WindowsPrincipal * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _WindowsPrincipal * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _WindowsPrincipal * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _WindowsPrincipal * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _WindowsPrincipal * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _WindowsPrincipal * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _WindowsPrincipalVtbl;

interface _WindowsPrincipal
{
    CONST_VTBL struct _WindowsPrincipalVtbl *lpVtbl;
};

#endif 	

#ifndef ___UnmanagedFunctionPointerAttribute_INTERFACE_DEFINED__
#define ___UnmanagedFunctionPointerAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__UnmanagedFunctionPointerAttribute;

typedef struct _UnmanagedFunctionPointerAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _UnmanagedFunctionPointerAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _UnmanagedFunctionPointerAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _UnmanagedFunctionPointerAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _UnmanagedFunctionPointerAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _UnmanagedFunctionPointerAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _UnmanagedFunctionPointerAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _UnmanagedFunctionPointerAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _UnmanagedFunctionPointerAttributeVtbl;

interface _UnmanagedFunctionPointerAttribute
{
    CONST_VTBL struct _UnmanagedFunctionPointerAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___DispIdAttribute_INTERFACE_DEFINED__
#define ___DispIdAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DispIdAttribute;

typedef struct _DispIdAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DispIdAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DispIdAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DispIdAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DispIdAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DispIdAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DispIdAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DispIdAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DispIdAttributeVtbl;

interface _DispIdAttribute
{
    CONST_VTBL struct _DispIdAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___InterfaceTypeAttribute_INTERFACE_DEFINED__
#define ___InterfaceTypeAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__InterfaceTypeAttribute;

typedef struct _InterfaceTypeAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _InterfaceTypeAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _InterfaceTypeAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _InterfaceTypeAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _InterfaceTypeAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _InterfaceTypeAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _InterfaceTypeAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _InterfaceTypeAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _InterfaceTypeAttributeVtbl;

interface _InterfaceTypeAttribute
{
    CONST_VTBL struct _InterfaceTypeAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ComDefaultInterfaceAttribute_INTERFACE_DEFINED__
#define ___ComDefaultInterfaceAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ComDefaultInterfaceAttribute;

typedef struct _ComDefaultInterfaceAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ComDefaultInterfaceAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ComDefaultInterfaceAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ComDefaultInterfaceAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ComDefaultInterfaceAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ComDefaultInterfaceAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ComDefaultInterfaceAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ComDefaultInterfaceAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ComDefaultInterfaceAttributeVtbl;

interface _ComDefaultInterfaceAttribute
{
    CONST_VTBL struct _ComDefaultInterfaceAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ClassInterfaceAttribute_INTERFACE_DEFINED__
#define ___ClassInterfaceAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ClassInterfaceAttribute;

typedef struct _ClassInterfaceAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ClassInterfaceAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ClassInterfaceAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ClassInterfaceAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ClassInterfaceAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ClassInterfaceAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ClassInterfaceAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ClassInterfaceAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ClassInterfaceAttributeVtbl;

interface _ClassInterfaceAttribute
{
    CONST_VTBL struct _ClassInterfaceAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ComVisibleAttribute_INTERFACE_DEFINED__
#define ___ComVisibleAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ComVisibleAttribute;

typedef struct _ComVisibleAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ComVisibleAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ComVisibleAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ComVisibleAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ComVisibleAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ComVisibleAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ComVisibleAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ComVisibleAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ComVisibleAttributeVtbl;

interface _ComVisibleAttribute
{
    CONST_VTBL struct _ComVisibleAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___TypeLibImportClassAttribute_INTERFACE_DEFINED__
#define ___TypeLibImportClassAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__TypeLibImportClassAttribute;

typedef struct _TypeLibImportClassAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TypeLibImportClassAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TypeLibImportClassAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TypeLibImportClassAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TypeLibImportClassAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TypeLibImportClassAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TypeLibImportClassAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TypeLibImportClassAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TypeLibImportClassAttributeVtbl;

interface _TypeLibImportClassAttribute
{
    CONST_VTBL struct _TypeLibImportClassAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___LCIDConversionAttribute_INTERFACE_DEFINED__
#define ___LCIDConversionAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__LCIDConversionAttribute;

typedef struct _LCIDConversionAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _LCIDConversionAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _LCIDConversionAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _LCIDConversionAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _LCIDConversionAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _LCIDConversionAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _LCIDConversionAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _LCIDConversionAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _LCIDConversionAttributeVtbl;

interface _LCIDConversionAttribute
{
    CONST_VTBL struct _LCIDConversionAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ComRegisterFunctionAttribute_INTERFACE_DEFINED__
#define ___ComRegisterFunctionAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ComRegisterFunctionAttribute;

typedef struct _ComRegisterFunctionAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ComRegisterFunctionAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ComRegisterFunctionAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ComRegisterFunctionAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ComRegisterFunctionAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ComRegisterFunctionAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ComRegisterFunctionAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ComRegisterFunctionAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ComRegisterFunctionAttributeVtbl;

interface _ComRegisterFunctionAttribute
{
    CONST_VTBL struct _ComRegisterFunctionAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ComUnregisterFunctionAttribute_INTERFACE_DEFINED__
#define ___ComUnregisterFunctionAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ComUnregisterFunctionAttribute;

typedef struct _ComUnregisterFunctionAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ComUnregisterFunctionAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ComUnregisterFunctionAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ComUnregisterFunctionAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ComUnregisterFunctionAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ComUnregisterFunctionAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ComUnregisterFunctionAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ComUnregisterFunctionAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ComUnregisterFunctionAttributeVtbl;

interface _ComUnregisterFunctionAttribute
{
    CONST_VTBL struct _ComUnregisterFunctionAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ProgIdAttribute_INTERFACE_DEFINED__
#define ___ProgIdAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ProgIdAttribute;

typedef struct _ProgIdAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ProgIdAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ProgIdAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ProgIdAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ProgIdAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ProgIdAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ProgIdAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ProgIdAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ProgIdAttributeVtbl;

interface _ProgIdAttribute
{
    CONST_VTBL struct _ProgIdAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ImportedFromTypeLibAttribute_INTERFACE_DEFINED__
#define ___ImportedFromTypeLibAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ImportedFromTypeLibAttribute;

typedef struct _ImportedFromTypeLibAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ImportedFromTypeLibAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ImportedFromTypeLibAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ImportedFromTypeLibAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ImportedFromTypeLibAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ImportedFromTypeLibAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ImportedFromTypeLibAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ImportedFromTypeLibAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ImportedFromTypeLibAttributeVtbl;

interface _ImportedFromTypeLibAttribute
{
    CONST_VTBL struct _ImportedFromTypeLibAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___IDispatchImplAttribute_INTERFACE_DEFINED__
#define ___IDispatchImplAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__IDispatchImplAttribute;

typedef struct _IDispatchImplAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _IDispatchImplAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _IDispatchImplAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _IDispatchImplAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _IDispatchImplAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _IDispatchImplAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _IDispatchImplAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _IDispatchImplAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _IDispatchImplAttributeVtbl;

interface _IDispatchImplAttribute
{
    CONST_VTBL struct _IDispatchImplAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ComSourceInterfacesAttribute_INTERFACE_DEFINED__
#define ___ComSourceInterfacesAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ComSourceInterfacesAttribute;

typedef struct _ComSourceInterfacesAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ComSourceInterfacesAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ComSourceInterfacesAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ComSourceInterfacesAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ComSourceInterfacesAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ComSourceInterfacesAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ComSourceInterfacesAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ComSourceInterfacesAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ComSourceInterfacesAttributeVtbl;

interface _ComSourceInterfacesAttribute
{
    CONST_VTBL struct _ComSourceInterfacesAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ComConversionLossAttribute_INTERFACE_DEFINED__
#define ___ComConversionLossAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ComConversionLossAttribute;

typedef struct _ComConversionLossAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ComConversionLossAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ComConversionLossAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ComConversionLossAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ComConversionLossAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ComConversionLossAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ComConversionLossAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ComConversionLossAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ComConversionLossAttributeVtbl;

interface _ComConversionLossAttribute
{
    CONST_VTBL struct _ComConversionLossAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___TypeLibTypeAttribute_INTERFACE_DEFINED__
#define ___TypeLibTypeAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__TypeLibTypeAttribute;

typedef struct _TypeLibTypeAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TypeLibTypeAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TypeLibTypeAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TypeLibTypeAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TypeLibTypeAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TypeLibTypeAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TypeLibTypeAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TypeLibTypeAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TypeLibTypeAttributeVtbl;

interface _TypeLibTypeAttribute
{
    CONST_VTBL struct _TypeLibTypeAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___TypeLibFuncAttribute_INTERFACE_DEFINED__
#define ___TypeLibFuncAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__TypeLibFuncAttribute;

typedef struct _TypeLibFuncAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TypeLibFuncAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TypeLibFuncAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TypeLibFuncAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TypeLibFuncAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TypeLibFuncAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TypeLibFuncAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TypeLibFuncAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TypeLibFuncAttributeVtbl;

interface _TypeLibFuncAttribute
{
    CONST_VTBL struct _TypeLibFuncAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___TypeLibVarAttribute_INTERFACE_DEFINED__
#define ___TypeLibVarAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__TypeLibVarAttribute;

typedef struct _TypeLibVarAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TypeLibVarAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TypeLibVarAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TypeLibVarAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TypeLibVarAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TypeLibVarAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TypeLibVarAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TypeLibVarAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TypeLibVarAttributeVtbl;

interface _TypeLibVarAttribute
{
    CONST_VTBL struct _TypeLibVarAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___MarshalAsAttribute_INTERFACE_DEFINED__
#define ___MarshalAsAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__MarshalAsAttribute;

typedef struct _MarshalAsAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MarshalAsAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MarshalAsAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MarshalAsAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MarshalAsAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MarshalAsAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MarshalAsAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MarshalAsAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MarshalAsAttributeVtbl;

interface _MarshalAsAttribute
{
    CONST_VTBL struct _MarshalAsAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ComImportAttribute_INTERFACE_DEFINED__
#define ___ComImportAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ComImportAttribute;

typedef struct _ComImportAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ComImportAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ComImportAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ComImportAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ComImportAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ComImportAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ComImportAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ComImportAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ComImportAttributeVtbl;

interface _ComImportAttribute
{
    CONST_VTBL struct _ComImportAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___GuidAttribute_INTERFACE_DEFINED__
#define ___GuidAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__GuidAttribute;

typedef struct _GuidAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _GuidAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _GuidAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _GuidAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _GuidAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _GuidAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _GuidAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _GuidAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _GuidAttributeVtbl;

interface _GuidAttribute
{
    CONST_VTBL struct _GuidAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___PreserveSigAttribute_INTERFACE_DEFINED__
#define ___PreserveSigAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__PreserveSigAttribute;

typedef struct _PreserveSigAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _PreserveSigAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _PreserveSigAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _PreserveSigAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _PreserveSigAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _PreserveSigAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _PreserveSigAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _PreserveSigAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _PreserveSigAttributeVtbl;

interface _PreserveSigAttribute
{
    CONST_VTBL struct _PreserveSigAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___InAttribute_INTERFACE_DEFINED__
#define ___InAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__InAttribute;

typedef struct _InAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _InAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _InAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _InAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _InAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _InAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _InAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _InAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _InAttributeVtbl;

interface _InAttribute
{
    CONST_VTBL struct _InAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___OutAttribute_INTERFACE_DEFINED__
#define ___OutAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__OutAttribute;

typedef struct _OutAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _OutAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _OutAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _OutAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _OutAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _OutAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _OutAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _OutAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OutAttributeVtbl;

interface _OutAttribute
{
    CONST_VTBL struct _OutAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___OptionalAttribute_INTERFACE_DEFINED__
#define ___OptionalAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__OptionalAttribute;

typedef struct _OptionalAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _OptionalAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _OptionalAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _OptionalAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _OptionalAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _OptionalAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _OptionalAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _OptionalAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _OptionalAttributeVtbl;

interface _OptionalAttribute
{
    CONST_VTBL struct _OptionalAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___DllImportAttribute_INTERFACE_DEFINED__
#define ___DllImportAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DllImportAttribute;

typedef struct _DllImportAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DllImportAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DllImportAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DllImportAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DllImportAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DllImportAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DllImportAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DllImportAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DllImportAttributeVtbl;

interface _DllImportAttribute
{
    CONST_VTBL struct _DllImportAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___StructLayoutAttribute_INTERFACE_DEFINED__
#define ___StructLayoutAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__StructLayoutAttribute;

typedef struct _StructLayoutAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _StructLayoutAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _StructLayoutAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _StructLayoutAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _StructLayoutAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _StructLayoutAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _StructLayoutAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _StructLayoutAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StructLayoutAttributeVtbl;

interface _StructLayoutAttribute
{
    CONST_VTBL struct _StructLayoutAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___FieldOffsetAttribute_INTERFACE_DEFINED__
#define ___FieldOffsetAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__FieldOffsetAttribute;

typedef struct _FieldOffsetAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FieldOffsetAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FieldOffsetAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FieldOffsetAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FieldOffsetAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FieldOffsetAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FieldOffsetAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FieldOffsetAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FieldOffsetAttributeVtbl;

interface _FieldOffsetAttribute
{
    CONST_VTBL struct _FieldOffsetAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ComAliasNameAttribute_INTERFACE_DEFINED__
#define ___ComAliasNameAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ComAliasNameAttribute;

typedef struct _ComAliasNameAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ComAliasNameAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ComAliasNameAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ComAliasNameAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ComAliasNameAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ComAliasNameAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ComAliasNameAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ComAliasNameAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ComAliasNameAttributeVtbl;

interface _ComAliasNameAttribute
{
    CONST_VTBL struct _ComAliasNameAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___AutomationProxyAttribute_INTERFACE_DEFINED__
#define ___AutomationProxyAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__AutomationProxyAttribute;

typedef struct _AutomationProxyAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _AutomationProxyAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _AutomationProxyAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _AutomationProxyAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _AutomationProxyAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _AutomationProxyAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _AutomationProxyAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _AutomationProxyAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _AutomationProxyAttributeVtbl;

interface _AutomationProxyAttribute
{
    CONST_VTBL struct _AutomationProxyAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___PrimaryInteropAssemblyAttribute_INTERFACE_DEFINED__
#define ___PrimaryInteropAssemblyAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__PrimaryInteropAssemblyAttribute;

typedef struct _PrimaryInteropAssemblyAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _PrimaryInteropAssemblyAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _PrimaryInteropAssemblyAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _PrimaryInteropAssemblyAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _PrimaryInteropAssemblyAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _PrimaryInteropAssemblyAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _PrimaryInteropAssemblyAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _PrimaryInteropAssemblyAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _PrimaryInteropAssemblyAttributeVtbl;

interface _PrimaryInteropAssemblyAttribute
{
    CONST_VTBL struct _PrimaryInteropAssemblyAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___CoClassAttribute_INTERFACE_DEFINED__
#define ___CoClassAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__CoClassAttribute;

typedef struct _CoClassAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CoClassAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CoClassAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CoClassAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CoClassAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CoClassAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CoClassAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CoClassAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CoClassAttributeVtbl;

interface _CoClassAttribute
{
    CONST_VTBL struct _CoClassAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ComEventInterfaceAttribute_INTERFACE_DEFINED__
#define ___ComEventInterfaceAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ComEventInterfaceAttribute;

typedef struct _ComEventInterfaceAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ComEventInterfaceAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ComEventInterfaceAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ComEventInterfaceAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ComEventInterfaceAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ComEventInterfaceAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ComEventInterfaceAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ComEventInterfaceAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ComEventInterfaceAttributeVtbl;

interface _ComEventInterfaceAttribute
{
    CONST_VTBL struct _ComEventInterfaceAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___TypeLibVersionAttribute_INTERFACE_DEFINED__
#define ___TypeLibVersionAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__TypeLibVersionAttribute;

typedef struct _TypeLibVersionAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _TypeLibVersionAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _TypeLibVersionAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _TypeLibVersionAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _TypeLibVersionAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _TypeLibVersionAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _TypeLibVersionAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _TypeLibVersionAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _TypeLibVersionAttributeVtbl;

interface _TypeLibVersionAttribute
{
    CONST_VTBL struct _TypeLibVersionAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ComCompatibleVersionAttribute_INTERFACE_DEFINED__
#define ___ComCompatibleVersionAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__ComCompatibleVersionAttribute;

typedef struct _ComCompatibleVersionAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ComCompatibleVersionAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ComCompatibleVersionAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ComCompatibleVersionAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ComCompatibleVersionAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ComCompatibleVersionAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ComCompatibleVersionAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ComCompatibleVersionAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ComCompatibleVersionAttributeVtbl;

interface _ComCompatibleVersionAttribute
{
    CONST_VTBL struct _ComCompatibleVersionAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___BestFitMappingAttribute_INTERFACE_DEFINED__
#define ___BestFitMappingAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__BestFitMappingAttribute;

typedef struct _BestFitMappingAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _BestFitMappingAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _BestFitMappingAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _BestFitMappingAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _BestFitMappingAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _BestFitMappingAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _BestFitMappingAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _BestFitMappingAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _BestFitMappingAttributeVtbl;

interface _BestFitMappingAttribute
{
    CONST_VTBL struct _BestFitMappingAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___DefaultCharSetAttribute_INTERFACE_DEFINED__
#define ___DefaultCharSetAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__DefaultCharSetAttribute;

typedef struct _DefaultCharSetAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DefaultCharSetAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DefaultCharSetAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DefaultCharSetAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DefaultCharSetAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DefaultCharSetAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DefaultCharSetAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DefaultCharSetAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DefaultCharSetAttributeVtbl;

interface _DefaultCharSetAttribute
{
    CONST_VTBL struct _DefaultCharSetAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___SetWin32ContextInIDispatchAttribute_INTERFACE_DEFINED__
#define ___SetWin32ContextInIDispatchAttribute_INTERFACE_DEFINED__

EXTERN_C const IID IID__SetWin32ContextInIDispatchAttribute;

typedef struct _SetWin32ContextInIDispatchAttributeVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SetWin32ContextInIDispatchAttribute * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SetWin32ContextInIDispatchAttribute * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SetWin32ContextInIDispatchAttribute * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SetWin32ContextInIDispatchAttribute * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SetWin32ContextInIDispatchAttribute * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SetWin32ContextInIDispatchAttribute * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SetWin32ContextInIDispatchAttribute * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SetWin32ContextInIDispatchAttributeVtbl;

interface _SetWin32ContextInIDispatchAttribute
{
    CONST_VTBL struct _SetWin32ContextInIDispatchAttributeVtbl *lpVtbl;
};

#endif 	

#ifndef ___ExternalException_INTERFACE_DEFINED__
#define ___ExternalException_INTERFACE_DEFINED__

EXTERN_C const IID IID__ExternalException;

typedef struct _ExternalExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ExternalException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ExternalException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ExternalException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ExternalException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ExternalException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ExternalException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ExternalException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ExternalExceptionVtbl;

interface _ExternalException
{
    CONST_VTBL struct _ExternalExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___COMException_INTERFACE_DEFINED__
#define ___COMException_INTERFACE_DEFINED__

EXTERN_C const IID IID__COMException;

typedef struct _COMExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _COMException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _COMException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _COMException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _COMException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _COMException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _COMException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _COMException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _COMExceptionVtbl;

interface _COMException
{
    CONST_VTBL struct _COMExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___InvalidOleVariantTypeException_INTERFACE_DEFINED__
#define ___InvalidOleVariantTypeException_INTERFACE_DEFINED__

EXTERN_C const IID IID__InvalidOleVariantTypeException;

typedef struct _InvalidOleVariantTypeExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _InvalidOleVariantTypeException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _InvalidOleVariantTypeException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _InvalidOleVariantTypeException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _InvalidOleVariantTypeException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _InvalidOleVariantTypeException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _InvalidOleVariantTypeException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _InvalidOleVariantTypeException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _InvalidOleVariantTypeExceptionVtbl;

interface _InvalidOleVariantTypeException
{
    CONST_VTBL struct _InvalidOleVariantTypeExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___MarshalDirectiveException_INTERFACE_DEFINED__
#define ___MarshalDirectiveException_INTERFACE_DEFINED__

EXTERN_C const IID IID__MarshalDirectiveException;

typedef struct _MarshalDirectiveExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MarshalDirectiveException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MarshalDirectiveException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MarshalDirectiveException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MarshalDirectiveException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MarshalDirectiveException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MarshalDirectiveException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MarshalDirectiveException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MarshalDirectiveExceptionVtbl;

interface _MarshalDirectiveException
{
    CONST_VTBL struct _MarshalDirectiveExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___RuntimeEnvironment_INTERFACE_DEFINED__
#define ___RuntimeEnvironment_INTERFACE_DEFINED__

EXTERN_C const IID IID__RuntimeEnvironment;

typedef struct _RuntimeEnvironmentVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _RuntimeEnvironment * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _RuntimeEnvironment * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _RuntimeEnvironment * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _RuntimeEnvironment * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _RuntimeEnvironment * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _RuntimeEnvironment * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _RuntimeEnvironment * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _RuntimeEnvironmentVtbl;

interface _RuntimeEnvironment
{
    CONST_VTBL struct _RuntimeEnvironmentVtbl *lpVtbl;
};

#endif 	

#ifndef ___SEHException_INTERFACE_DEFINED__
#define ___SEHException_INTERFACE_DEFINED__

EXTERN_C const IID IID__SEHException;

typedef struct _SEHExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SEHException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SEHException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SEHException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SEHException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SEHException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SEHException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SEHException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SEHExceptionVtbl;

interface _SEHException
{
    CONST_VTBL struct _SEHExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___BStrWrapper_INTERFACE_DEFINED__
#define ___BStrWrapper_INTERFACE_DEFINED__

EXTERN_C const IID IID__BStrWrapper;

typedef struct _BStrWrapperVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _BStrWrapper * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _BStrWrapper * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _BStrWrapper * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _BStrWrapper * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _BStrWrapper * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _BStrWrapper * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _BStrWrapper * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _BStrWrapperVtbl;

interface _BStrWrapper
{
    CONST_VTBL struct _BStrWrapperVtbl *lpVtbl;
};

#endif 	

#ifndef ___CurrencyWrapper_INTERFACE_DEFINED__
#define ___CurrencyWrapper_INTERFACE_DEFINED__

EXTERN_C const IID IID__CurrencyWrapper;

typedef struct _CurrencyWrapperVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _CurrencyWrapper * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _CurrencyWrapper * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _CurrencyWrapper * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _CurrencyWrapper * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _CurrencyWrapper * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _CurrencyWrapper * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _CurrencyWrapper * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _CurrencyWrapperVtbl;

interface _CurrencyWrapper
{
    CONST_VTBL struct _CurrencyWrapperVtbl *lpVtbl;
};

#endif 	

#ifndef ___DispatchWrapper_INTERFACE_DEFINED__
#define ___DispatchWrapper_INTERFACE_DEFINED__

EXTERN_C const IID IID__DispatchWrapper;

typedef struct _DispatchWrapperVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DispatchWrapper * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DispatchWrapper * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DispatchWrapper * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DispatchWrapper * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DispatchWrapper * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DispatchWrapper * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DispatchWrapper * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DispatchWrapperVtbl;

interface _DispatchWrapper
{
    CONST_VTBL struct _DispatchWrapperVtbl *lpVtbl;
};

#endif 	

#ifndef ___ErrorWrapper_INTERFACE_DEFINED__
#define ___ErrorWrapper_INTERFACE_DEFINED__

EXTERN_C const IID IID__ErrorWrapper;

typedef struct _ErrorWrapperVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ErrorWrapper * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ErrorWrapper * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ErrorWrapper * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ErrorWrapper * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ErrorWrapper * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ErrorWrapper * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ErrorWrapper * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ErrorWrapperVtbl;

interface _ErrorWrapper
{
    CONST_VTBL struct _ErrorWrapperVtbl *lpVtbl;
};

#endif 	

#ifndef ___ExtensibleClassFactory_INTERFACE_DEFINED__
#define ___ExtensibleClassFactory_INTERFACE_DEFINED__

EXTERN_C const IID IID__ExtensibleClassFactory;

typedef struct _ExtensibleClassFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ExtensibleClassFactory * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ExtensibleClassFactory * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ExtensibleClassFactory * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ExtensibleClassFactory * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ExtensibleClassFactory * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ExtensibleClassFactory * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ExtensibleClassFactory * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ExtensibleClassFactoryVtbl;

interface _ExtensibleClassFactory
{
    CONST_VTBL struct _ExtensibleClassFactoryVtbl *lpVtbl;
};

#endif 	

#ifndef ___InvalidComObjectException_INTERFACE_DEFINED__
#define ___InvalidComObjectException_INTERFACE_DEFINED__

EXTERN_C const IID IID__InvalidComObjectException;

typedef struct _InvalidComObjectExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _InvalidComObjectException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _InvalidComObjectException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _InvalidComObjectException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _InvalidComObjectException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _InvalidComObjectException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _InvalidComObjectException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _InvalidComObjectException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _InvalidComObjectExceptionVtbl;

interface _InvalidComObjectException
{
    CONST_VTBL struct _InvalidComObjectExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___ObjectCreationDelegate_INTERFACE_DEFINED__
#define ___ObjectCreationDelegate_INTERFACE_DEFINED__

EXTERN_C const IID IID__ObjectCreationDelegate;

typedef struct _ObjectCreationDelegateVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _ObjectCreationDelegate * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _ObjectCreationDelegate * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _ObjectCreationDelegate * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _ObjectCreationDelegate * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _ObjectCreationDelegate * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _ObjectCreationDelegate * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _ObjectCreationDelegate * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _ObjectCreationDelegateVtbl;

interface _ObjectCreationDelegate
{
    CONST_VTBL struct _ObjectCreationDelegateVtbl *lpVtbl;
};

#endif 	

#ifndef ___SafeArrayRankMismatchException_INTERFACE_DEFINED__
#define ___SafeArrayRankMismatchException_INTERFACE_DEFINED__

EXTERN_C const IID IID__SafeArrayRankMismatchException;

typedef struct _SafeArrayRankMismatchExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SafeArrayRankMismatchException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SafeArrayRankMismatchException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SafeArrayRankMismatchException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SafeArrayRankMismatchException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SafeArrayRankMismatchException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SafeArrayRankMismatchException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SafeArrayRankMismatchException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SafeArrayRankMismatchExceptionVtbl;

interface _SafeArrayRankMismatchException
{
    CONST_VTBL struct _SafeArrayRankMismatchExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___SafeArrayTypeMismatchException_INTERFACE_DEFINED__
#define ___SafeArrayTypeMismatchException_INTERFACE_DEFINED__

EXTERN_C const IID IID__SafeArrayTypeMismatchException;

typedef struct _SafeArrayTypeMismatchExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _SafeArrayTypeMismatchException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _SafeArrayTypeMismatchException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _SafeArrayTypeMismatchException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _SafeArrayTypeMismatchException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _SafeArrayTypeMismatchException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _SafeArrayTypeMismatchException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _SafeArrayTypeMismatchException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _SafeArrayTypeMismatchExceptionVtbl;

interface _SafeArrayTypeMismatchException
{
    CONST_VTBL struct _SafeArrayTypeMismatchExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___UnknownWrapper_INTERFACE_DEFINED__
#define ___UnknownWrapper_INTERFACE_DEFINED__

EXTERN_C const IID IID__UnknownWrapper;

typedef struct _UnknownWrapperVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _UnknownWrapper * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _UnknownWrapper * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _UnknownWrapper * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _UnknownWrapper * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _UnknownWrapper * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _UnknownWrapper * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _UnknownWrapper * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _UnknownWrapperVtbl;

interface _UnknownWrapper
{
    CONST_VTBL struct _UnknownWrapperVtbl *lpVtbl;
};

#endif 	

#ifndef ___Stream_INTERFACE_DEFINED__
#define ___Stream_INTERFACE_DEFINED__

EXTERN_C const IID IID__Stream;

typedef struct _StreamVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Stream * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Stream * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Stream * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Stream * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Stream * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Stream * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Stream * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _StreamVtbl;

interface _Stream
{
    CONST_VTBL struct _StreamVtbl *lpVtbl;
};

#endif 	

#ifndef ___BinaryReader_INTERFACE_DEFINED__
#define ___BinaryReader_INTERFACE_DEFINED__

EXTERN_C const IID IID__BinaryReader;

typedef struct _BinaryReaderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _BinaryReader * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _BinaryReader * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _BinaryReader * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _BinaryReader * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _BinaryReader * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _BinaryReader * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _BinaryReader * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _BinaryReaderVtbl;

interface _BinaryReader
{
    CONST_VTBL struct _BinaryReaderVtbl *lpVtbl;
};

#endif 	

#ifndef ___BinaryWriter_INTERFACE_DEFINED__
#define ___BinaryWriter_INTERFACE_DEFINED__

EXTERN_C const IID IID__BinaryWriter;

typedef struct _BinaryWriterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _BinaryWriter * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _BinaryWriter * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _BinaryWriter * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _BinaryWriter * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _BinaryWriter * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _BinaryWriter * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _BinaryWriter * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _BinaryWriterVtbl;

interface _BinaryWriter
{
    CONST_VTBL struct _BinaryWriterVtbl *lpVtbl;
};

#endif 	

#ifndef ___BufferedStream_INTERFACE_DEFINED__
#define ___BufferedStream_INTERFACE_DEFINED__

EXTERN_C const IID IID__BufferedStream;

typedef struct _BufferedStreamVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _BufferedStream * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _BufferedStream * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _BufferedStream * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _BufferedStream * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _BufferedStream * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _BufferedStream * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _BufferedStream * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _BufferedStreamVtbl;

interface _BufferedStream
{
    CONST_VTBL struct _BufferedStreamVtbl *lpVtbl;
};

#endif 	

#ifndef ___Directory_INTERFACE_DEFINED__
#define ___Directory_INTERFACE_DEFINED__

EXTERN_C const IID IID__Directory;

typedef struct _DirectoryVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _Directory * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _Directory * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _Directory * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _Directory * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _Directory * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _Directory * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _Directory * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DirectoryVtbl;

interface _Directory
{
    CONST_VTBL struct _DirectoryVtbl *lpVtbl;
};

#endif 	

#ifndef ___FileSystemInfo_INTERFACE_DEFINED__
#define ___FileSystemInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__FileSystemInfo;

typedef struct _FileSystemInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FileSystemInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FileSystemInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FileSystemInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FileSystemInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FileSystemInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FileSystemInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FileSystemInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FileSystemInfoVtbl;

interface _FileSystemInfo
{
    CONST_VTBL struct _FileSystemInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___DirectoryInfo_INTERFACE_DEFINED__
#define ___DirectoryInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__DirectoryInfo;

typedef struct _DirectoryInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DirectoryInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DirectoryInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DirectoryInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DirectoryInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DirectoryInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DirectoryInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DirectoryInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DirectoryInfoVtbl;

interface _DirectoryInfo
{
    CONST_VTBL struct _DirectoryInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___IOException_INTERFACE_DEFINED__
#define ___IOException_INTERFACE_DEFINED__

EXTERN_C const IID IID__IOException;

typedef struct _IOExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _IOException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _IOException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _IOException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _IOException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _IOException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _IOException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _IOException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _IOExceptionVtbl;

interface _IOException
{
    CONST_VTBL struct _IOExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___DirectoryNotFoundException_INTERFACE_DEFINED__
#define ___DirectoryNotFoundException_INTERFACE_DEFINED__

EXTERN_C const IID IID__DirectoryNotFoundException;

typedef struct _DirectoryNotFoundExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DirectoryNotFoundException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DirectoryNotFoundException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DirectoryNotFoundException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DirectoryNotFoundException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DirectoryNotFoundException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DirectoryNotFoundException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DirectoryNotFoundException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DirectoryNotFoundExceptionVtbl;

interface _DirectoryNotFoundException
{
    CONST_VTBL struct _DirectoryNotFoundExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___DriveInfo_INTERFACE_DEFINED__
#define ___DriveInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__DriveInfo;

typedef struct _DriveInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DriveInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DriveInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DriveInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DriveInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DriveInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DriveInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DriveInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DriveInfoVtbl;

interface _DriveInfo
{
    CONST_VTBL struct _DriveInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___DriveNotFoundException_INTERFACE_DEFINED__
#define ___DriveNotFoundException_INTERFACE_DEFINED__

EXTERN_C const IID IID__DriveNotFoundException;

typedef struct _DriveNotFoundExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _DriveNotFoundException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _DriveNotFoundException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _DriveNotFoundException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _DriveNotFoundException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _DriveNotFoundException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _DriveNotFoundException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _DriveNotFoundException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _DriveNotFoundExceptionVtbl;

interface _DriveNotFoundException
{
    CONST_VTBL struct _DriveNotFoundExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___EndOfStreamException_INTERFACE_DEFINED__
#define ___EndOfStreamException_INTERFACE_DEFINED__

EXTERN_C const IID IID__EndOfStreamException;

typedef struct _EndOfStreamExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _EndOfStreamException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _EndOfStreamException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _EndOfStreamException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _EndOfStreamException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _EndOfStreamException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _EndOfStreamException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _EndOfStreamException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _EndOfStreamExceptionVtbl;

interface _EndOfStreamException
{
    CONST_VTBL struct _EndOfStreamExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___File_INTERFACE_DEFINED__
#define ___File_INTERFACE_DEFINED__

EXTERN_C const IID IID__File;

typedef struct _FileVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _File * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _File * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _File * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _File * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _File * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _File * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _File * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FileVtbl;

interface _File
{
    CONST_VTBL struct _FileVtbl *lpVtbl;
};

#endif 	

#ifndef ___FileInfo_INTERFACE_DEFINED__
#define ___FileInfo_INTERFACE_DEFINED__

EXTERN_C const IID IID__FileInfo;

typedef struct _FileInfoVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FileInfo * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FileInfo * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FileInfo * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FileInfo * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FileInfo * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FileInfo * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FileInfo * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FileInfoVtbl;

interface _FileInfo
{
    CONST_VTBL struct _FileInfoVtbl *lpVtbl;
};

#endif 	

#ifndef ___FileLoadException_INTERFACE_DEFINED__
#define ___FileLoadException_INTERFACE_DEFINED__

EXTERN_C const IID IID__FileLoadException;

typedef struct _FileLoadExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FileLoadException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FileLoadException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FileLoadException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FileLoadException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FileLoadException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FileLoadException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FileLoadException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FileLoadExceptionVtbl;

interface _FileLoadException
{
    CONST_VTBL struct _FileLoadExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___FileNotFoundException_INTERFACE_DEFINED__
#define ___FileNotFoundException_INTERFACE_DEFINED__

EXTERN_C const IID IID__FileNotFoundException;

typedef struct _FileNotFoundExceptionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FileNotFoundException * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FileNotFoundException * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FileNotFoundException * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FileNotFoundException * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FileNotFoundException * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FileNotFoundException * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FileNotFoundException * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FileNotFoundExceptionVtbl;

interface _FileNotFoundException
{
    CONST_VTBL struct _FileNotFoundExceptionVtbl *lpVtbl;
};

#endif 	

#ifndef ___FileStream_INTERFACE_DEFINED__
#define ___FileStream_INTERFACE_DEFINED__

EXTERN_C const IID IID__FileStream;

typedef struct _FileStreamVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _FileStream * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _FileStream * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _FileStream * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _FileStream * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _FileStream * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _FileStream * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _FileStream * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _FileStreamVtbl;

interface _FileStream
{
    CONST_VTBL struct _FileStreamVtbl *lpVtbl;
};

#endif 	

#ifndef ___MemoryStream_INTERFACE_DEFINED__
#define ___MemoryStream_INTERFACE_DEFINED__

EXTERN_C const IID IID__MemoryStream;

typedef struct _MemoryStreamVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
        _MemoryStream * This,
         REFIID riid,
         
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )( 
        _MemoryStream * This);

    ULONG ( STDMETHODCALLTYPE *Release )( 
        _MemoryStream * This);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
        _MemoryStream * This,
         UINT *pctinfo);

    HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
        _MemoryStream * This,
         UINT iTInfo,
         LCID lcid,
         ITypeInfo **ppTInfo);

    HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
        _MemoryStream * This,
         REFIID riid,
         LPOLESTR *rgszNames,
         UINT cNames,
         LCID lcid,
         DISPID *rgDispId);

     HRESULT ( STDMETHODCALLTYPE *Invoke )( 
        _MemoryStream * This,
         
        _In_  DISPID dispIdMember,
         
        _In_  REFIID riid,
         
        _In_  LCID lcid,
         
        _In_  WORD wFlags,
         
        _In_  DISPPARAMS *pDispParams,
         
        _Out_opt_  VARIANT *pVarResult,
         
        _Out_opt_  EXCEPINFO *pExcepInfo,
         
        _Out_opt_  UINT *puArgErr);

    END_INTERFACE
} _MemoryStreamVtbl;

interface _MemoryStream
{
    CONST_VTBL struct _MemoryStreamVtbl *lpVtbl;
};

#endif 	

#ifndef ___Path_INTERFACE_DEFINED__
#define ___Path_INTERFACE_DEFINED__
#endif

EXTERN_C const IID IID__Path;
